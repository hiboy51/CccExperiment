/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.common = (function() {
    
        /**
         * Namespace common.
         * @exports common
         * @namespace
         */
        var common = {};
    
        common.Request = (function() {
    
            /**
             * Properties of a Request.
             * @memberof common
             * @interface IRequest
             * @property {number} code Request code
             * @property {number|null} [api] Request api
             */
    
            /**
             * Constructs a new Request.
             * @memberof common
             * @classdesc Represents a Request.
             * @implements IRequest
             * @constructor
             * @param {common.IRequest=} [properties] Properties to set
             */
            function Request(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Request code.
             * @member {number} code
             * @memberof common.Request
             * @instance
             */
            Request.prototype.code = 0;
    
            /**
             * Request api.
             * @member {number} api
             * @memberof common.Request
             * @instance
             */
            Request.prototype.api = 0;
    
            /**
             * Creates a new Request instance using the specified properties.
             * @function create
             * @memberof common.Request
             * @static
             * @param {common.IRequest=} [properties] Properties to set
             * @returns {common.Request} Request instance
             */
            Request.create = function create(properties) {
                return new Request(properties);
            };
    
            /**
             * Encodes the specified Request message. Does not implicitly {@link common.Request.verify|verify} messages.
             * @function encode
             * @memberof common.Request
             * @static
             * @param {common.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.api != null && message.hasOwnProperty("api"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.api);
                return writer;
            };
    
            /**
             * Encodes the specified Request message, length delimited. Does not implicitly {@link common.Request.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Request
             * @static
             * @param {common.IRequest} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Request.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Request message from the specified reader or buffer.
             * @function decode
             * @memberof common.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Request();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.api = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("code"))
                    throw $util.ProtocolError("missing required 'code'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a Request message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Request
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Request.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Request message.
             * @function verify
             * @memberof common.Request
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Request.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.code))
                    return "code: integer expected";
                if (message.api != null && message.hasOwnProperty("api"))
                    if (!$util.isInteger(message.api))
                        return "api: integer expected";
                return null;
            };
    
            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Request
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Request} Request
             */
            Request.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Request)
                    return object;
                var message = new $root.common.Request();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.api != null)
                    message.api = object.api >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Request message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Request
             * @static
             * @param {common.Request} message Request
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Request.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.api = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.api != null && message.hasOwnProperty("api"))
                    object.api = message.api;
                return object;
            };
    
            /**
             * Converts this Request to JSON.
             * @function toJSON
             * @memberof common.Request
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Request.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Request;
        })();
    
        common.BaseReq = (function() {
    
            /**
             * Properties of a BaseReq.
             * @memberof common
             * @interface IBaseReq
             * @property {common.IRequest} request BaseReq request
             */
    
            /**
             * Constructs a new BaseReq.
             * @memberof common
             * @classdesc Represents a BaseReq.
             * @implements IBaseReq
             * @constructor
             * @param {common.IBaseReq=} [properties] Properties to set
             */
            function BaseReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BaseReq request.
             * @member {common.IRequest} request
             * @memberof common.BaseReq
             * @instance
             */
            BaseReq.prototype.request = null;
    
            /**
             * Creates a new BaseReq instance using the specified properties.
             * @function create
             * @memberof common.BaseReq
             * @static
             * @param {common.IBaseReq=} [properties] Properties to set
             * @returns {common.BaseReq} BaseReq instance
             */
            BaseReq.create = function create(properties) {
                return new BaseReq(properties);
            };
    
            /**
             * Encodes the specified BaseReq message. Does not implicitly {@link common.BaseReq.verify|verify} messages.
             * @function encode
             * @memberof common.BaseReq
             * @static
             * @param {common.IBaseReq} message BaseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BaseReq message, length delimited. Does not implicitly {@link common.BaseReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.BaseReq
             * @static
             * @param {common.IBaseReq} message BaseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BaseReq message from the specified reader or buffer.
             * @function decode
             * @memberof common.BaseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.BaseReq} BaseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.BaseReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a BaseReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.BaseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.BaseReq} BaseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BaseReq message.
             * @function verify
             * @memberof common.BaseReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BaseReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a BaseReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.BaseReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.BaseReq} BaseReq
             */
            BaseReq.fromObject = function fromObject(object) {
                if (object instanceof $root.common.BaseReq)
                    return object;
                var message = new $root.common.BaseReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".common.BaseReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BaseReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.BaseReq
             * @static
             * @param {common.BaseReq} message BaseReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BaseReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this BaseReq to JSON.
             * @function toJSON
             * @memberof common.BaseReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BaseReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BaseReq;
        })();
    
        common.Result = (function() {
    
            /**
             * Properties of a Result.
             * @memberof common
             * @interface IResult
             * @property {common.IRequest|null} [request] Result request
             * @property {number|null} [status] Result status
             * @property {string|null} [message] Result message
             * @property {number|null} [gameId] Result gameId
             */
    
            /**
             * Constructs a new Result.
             * @memberof common
             * @classdesc Represents a Result.
             * @implements IResult
             * @constructor
             * @param {common.IResult=} [properties] Properties to set
             */
            function Result(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Result request.
             * @member {common.IRequest|null|undefined} request
             * @memberof common.Result
             * @instance
             */
            Result.prototype.request = null;
    
            /**
             * Result status.
             * @member {number} status
             * @memberof common.Result
             * @instance
             */
            Result.prototype.status = 0;
    
            /**
             * Result message.
             * @member {string} message
             * @memberof common.Result
             * @instance
             */
            Result.prototype.message = "";
    
            /**
             * Result gameId.
             * @member {number} gameId
             * @memberof common.Result
             * @instance
             */
            Result.prototype.gameId = 0;
    
            /**
             * Creates a new Result instance using the specified properties.
             * @function create
             * @memberof common.Result
             * @static
             * @param {common.IResult=} [properties] Properties to set
             * @returns {common.Result} Result instance
             */
            Result.create = function create(properties) {
                return new Result(properties);
            };
    
            /**
             * Encodes the specified Result message. Does not implicitly {@link common.Result.verify|verify} messages.
             * @function encode
             * @memberof common.Result
             * @static
             * @param {common.IResult} message Result message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Result.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.status != null && message.hasOwnProperty("status"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.status);
                if (message.message != null && message.hasOwnProperty("message"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameId);
                return writer;
            };
    
            /**
             * Encodes the specified Result message, length delimited. Does not implicitly {@link common.Result.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Result
             * @static
             * @param {common.IResult} message Result message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Result.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Result message from the specified reader or buffer.
             * @function decode
             * @memberof common.Result
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Result} Result
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Result.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Result();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.status = reader.uint32();
                        break;
                    case 3:
                        message.message = reader.string();
                        break;
                    case 4:
                        message.gameId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Result message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Result
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Result} Result
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Result.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Result message.
             * @function verify
             * @memberof common.Result
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Result.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                return null;
            };
    
            /**
             * Creates a Result message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Result
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Result} Result
             */
            Result.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Result)
                    return object;
                var message = new $root.common.Result();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".common.Result.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.status != null)
                    message.status = object.status >>> 0;
                if (object.message != null)
                    message.message = String(object.message);
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Result message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Result
             * @static
             * @param {common.Result} message Result
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Result.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.status = 0;
                    object.message = "";
                    object.gameId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                return object;
            };
    
            /**
             * Converts this Result to JSON.
             * @function toJSON
             * @memberof common.Result
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Result.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Result;
        })();
    
        common.BaseRsp = (function() {
    
            /**
             * Properties of a BaseRsp.
             * @memberof common
             * @interface IBaseRsp
             * @property {common.IResult|null} [result] BaseRsp result
             */
    
            /**
             * Constructs a new BaseRsp.
             * @memberof common
             * @classdesc Represents a BaseRsp.
             * @implements IBaseRsp
             * @constructor
             * @param {common.IBaseRsp=} [properties] Properties to set
             */
            function BaseRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BaseRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof common.BaseRsp
             * @instance
             */
            BaseRsp.prototype.result = null;
    
            /**
             * Creates a new BaseRsp instance using the specified properties.
             * @function create
             * @memberof common.BaseRsp
             * @static
             * @param {common.IBaseRsp=} [properties] Properties to set
             * @returns {common.BaseRsp} BaseRsp instance
             */
            BaseRsp.create = function create(properties) {
                return new BaseRsp(properties);
            };
    
            /**
             * Encodes the specified BaseRsp message. Does not implicitly {@link common.BaseRsp.verify|verify} messages.
             * @function encode
             * @memberof common.BaseRsp
             * @static
             * @param {common.IBaseRsp} message BaseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BaseRsp message, length delimited. Does not implicitly {@link common.BaseRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.BaseRsp
             * @static
             * @param {common.IBaseRsp} message BaseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BaseRsp message from the specified reader or buffer.
             * @function decode
             * @memberof common.BaseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.BaseRsp} BaseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.BaseRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BaseRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.BaseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.BaseRsp} BaseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BaseRsp message.
             * @function verify
             * @memberof common.BaseRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BaseRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a BaseRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.BaseRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.BaseRsp} BaseRsp
             */
            BaseRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.common.BaseRsp)
                    return object;
                var message = new $root.common.BaseRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".common.BaseRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BaseRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.BaseRsp
             * @static
             * @param {common.BaseRsp} message BaseRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BaseRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this BaseRsp to JSON.
             * @function toJSON
             * @memberof common.BaseRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BaseRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BaseRsp;
        })();
    
        common.PlayerInfo = (function() {
    
            /**
             * Properties of a PlayerInfo.
             * @memberof common
             * @interface IPlayerInfo
             * @property {number|null} [id] PlayerInfo id
             * @property {number|null} [sex] PlayerInfo sex
             * @property {string|null} [nick] PlayerInfo nick
             * @property {number|Long|null} [money] PlayerInfo money
             * @property {number|null} [diamond] PlayerInfo diamond
             * @property {number|null} [winTimes] PlayerInfo winTimes
             * @property {number|null} [drawTimes] PlayerInfo drawTimes
             * @property {number|null} [loseTimes] PlayerInfo loseTimes
             * @property {number|null} [vipLevel] PlayerInfo vipLevel
             * @property {string|null} [headUrl] PlayerInfo headUrl
             * @property {string|null} [headUrlSmall] PlayerInfo headUrlSmall
             * @property {string|null} [jsonStr] PlayerInfo jsonStr
             * @property {string|null} [referrerNick] PlayerInfo referrerNick
             * @property {number|null} [clubCard] PlayerInfo clubCard
             * @property {number|null} [session] PlayerInfo session
             * @property {number|null} [hallId] PlayerInfo hallId
             */
    
            /**
             * Constructs a new PlayerInfo.
             * @memberof common
             * @classdesc Represents a PlayerInfo.
             * @implements IPlayerInfo
             * @constructor
             * @param {common.IPlayerInfo=} [properties] Properties to set
             */
            function PlayerInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlayerInfo id.
             * @member {number} id
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.id = 0;
    
            /**
             * PlayerInfo sex.
             * @member {number} sex
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.sex = 0;
    
            /**
             * PlayerInfo nick.
             * @member {string} nick
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.nick = "";
    
            /**
             * PlayerInfo money.
             * @member {number|Long} money
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.money = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PlayerInfo diamond.
             * @member {number} diamond
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.diamond = 0;
    
            /**
             * PlayerInfo winTimes.
             * @member {number} winTimes
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.winTimes = 0;
    
            /**
             * PlayerInfo drawTimes.
             * @member {number} drawTimes
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.drawTimes = 0;
    
            /**
             * PlayerInfo loseTimes.
             * @member {number} loseTimes
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.loseTimes = 0;
    
            /**
             * PlayerInfo vipLevel.
             * @member {number} vipLevel
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.vipLevel = 0;
    
            /**
             * PlayerInfo headUrl.
             * @member {string} headUrl
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.headUrl = "";
    
            /**
             * PlayerInfo headUrlSmall.
             * @member {string} headUrlSmall
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.headUrlSmall = "";
    
            /**
             * PlayerInfo jsonStr.
             * @member {string} jsonStr
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.jsonStr = "";
    
            /**
             * PlayerInfo referrerNick.
             * @member {string} referrerNick
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.referrerNick = "";
    
            /**
             * PlayerInfo clubCard.
             * @member {number} clubCard
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.clubCard = 0;
    
            /**
             * PlayerInfo session.
             * @member {number} session
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.session = 0;
    
            /**
             * PlayerInfo hallId.
             * @member {number} hallId
             * @memberof common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.hallId = 0;
    
            /**
             * Creates a new PlayerInfo instance using the specified properties.
             * @function create
             * @memberof common.PlayerInfo
             * @static
             * @param {common.IPlayerInfo=} [properties] Properties to set
             * @returns {common.PlayerInfo} PlayerInfo instance
             */
            PlayerInfo.create = function create(properties) {
                return new PlayerInfo(properties);
            };
    
            /**
             * Encodes the specified PlayerInfo message. Does not implicitly {@link common.PlayerInfo.verify|verify} messages.
             * @function encode
             * @memberof common.PlayerInfo
             * @static
             * @param {common.IPlayerInfo} message PlayerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.sex != null && message.hasOwnProperty("sex"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sex);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.nick);
                if (message.money != null && message.hasOwnProperty("money"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.money);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.diamond);
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.winTimes);
                if (message.drawTimes != null && message.hasOwnProperty("drawTimes"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.drawTimes);
                if (message.loseTimes != null && message.hasOwnProperty("loseTimes"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.loseTimes);
                if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.vipLevel);
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.headUrl);
                if (message.headUrlSmall != null && message.hasOwnProperty("headUrlSmall"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.headUrlSmall);
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.jsonStr);
                if (message.referrerNick != null && message.hasOwnProperty("referrerNick"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.referrerNick);
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int32(message.clubCard);
                if (message.session != null && message.hasOwnProperty("session"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.session);
                if (message.hallId != null && message.hasOwnProperty("hallId"))
                    writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.hallId);
                return writer;
            };
    
            /**
             * Encodes the specified PlayerInfo message, length delimited. Does not implicitly {@link common.PlayerInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.PlayerInfo
             * @static
             * @param {common.IPlayerInfo} message PlayerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlayerInfo message from the specified reader or buffer.
             * @function decode
             * @memberof common.PlayerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.PlayerInfo} PlayerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.PlayerInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.sex = reader.uint32();
                        break;
                    case 3:
                        message.nick = reader.string();
                        break;
                    case 4:
                        message.money = reader.uint64();
                        break;
                    case 5:
                        message.diamond = reader.uint32();
                        break;
                    case 6:
                        message.winTimes = reader.uint32();
                        break;
                    case 7:
                        message.drawTimes = reader.uint32();
                        break;
                    case 8:
                        message.loseTimes = reader.uint32();
                        break;
                    case 9:
                        message.vipLevel = reader.uint32();
                        break;
                    case 10:
                        message.headUrl = reader.string();
                        break;
                    case 11:
                        message.headUrlSmall = reader.string();
                        break;
                    case 12:
                        message.jsonStr = reader.string();
                        break;
                    case 13:
                        message.referrerNick = reader.string();
                        break;
                    case 14:
                        message.clubCard = reader.int32();
                        break;
                    case 15:
                        message.session = reader.uint32();
                        break;
                    case 16:
                        message.hallId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlayerInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.PlayerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.PlayerInfo} PlayerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlayerInfo message.
             * @function verify
             * @memberof common.PlayerInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.sex != null && message.hasOwnProperty("sex"))
                    if (!$util.isInteger(message.sex))
                        return "sex: integer expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.money != null && message.hasOwnProperty("money"))
                    if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
                        return "money: integer|Long expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond))
                        return "diamond: integer expected";
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    if (!$util.isInteger(message.winTimes))
                        return "winTimes: integer expected";
                if (message.drawTimes != null && message.hasOwnProperty("drawTimes"))
                    if (!$util.isInteger(message.drawTimes))
                        return "drawTimes: integer expected";
                if (message.loseTimes != null && message.hasOwnProperty("loseTimes"))
                    if (!$util.isInteger(message.loseTimes))
                        return "loseTimes: integer expected";
                if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                    if (!$util.isInteger(message.vipLevel))
                        return "vipLevel: integer expected";
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    if (!$util.isString(message.headUrl))
                        return "headUrl: string expected";
                if (message.headUrlSmall != null && message.hasOwnProperty("headUrlSmall"))
                    if (!$util.isString(message.headUrlSmall))
                        return "headUrlSmall: string expected";
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    if (!$util.isString(message.jsonStr))
                        return "jsonStr: string expected";
                if (message.referrerNick != null && message.hasOwnProperty("referrerNick"))
                    if (!$util.isString(message.referrerNick))
                        return "referrerNick: string expected";
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    if (!$util.isInteger(message.clubCard))
                        return "clubCard: integer expected";
                if (message.session != null && message.hasOwnProperty("session"))
                    if (!$util.isInteger(message.session))
                        return "session: integer expected";
                if (message.hallId != null && message.hasOwnProperty("hallId"))
                    if (!$util.isInteger(message.hallId))
                        return "hallId: integer expected";
                return null;
            };
    
            /**
             * Creates a PlayerInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.PlayerInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.PlayerInfo} PlayerInfo
             */
            PlayerInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.common.PlayerInfo)
                    return object;
                var message = new $root.common.PlayerInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.sex != null)
                    message.sex = object.sex >>> 0;
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.money != null)
                    if ($util.Long)
                        (message.money = $util.Long.fromValue(object.money)).unsigned = true;
                    else if (typeof object.money === "string")
                        message.money = parseInt(object.money, 10);
                    else if (typeof object.money === "number")
                        message.money = object.money;
                    else if (typeof object.money === "object")
                        message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber(true);
                if (object.diamond != null)
                    message.diamond = object.diamond >>> 0;
                if (object.winTimes != null)
                    message.winTimes = object.winTimes >>> 0;
                if (object.drawTimes != null)
                    message.drawTimes = object.drawTimes >>> 0;
                if (object.loseTimes != null)
                    message.loseTimes = object.loseTimes >>> 0;
                if (object.vipLevel != null)
                    message.vipLevel = object.vipLevel >>> 0;
                if (object.headUrl != null)
                    message.headUrl = String(object.headUrl);
                if (object.headUrlSmall != null)
                    message.headUrlSmall = String(object.headUrlSmall);
                if (object.jsonStr != null)
                    message.jsonStr = String(object.jsonStr);
                if (object.referrerNick != null)
                    message.referrerNick = String(object.referrerNick);
                if (object.clubCard != null)
                    message.clubCard = object.clubCard | 0;
                if (object.session != null)
                    message.session = object.session >>> 0;
                if (object.hallId != null)
                    message.hallId = object.hallId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PlayerInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.PlayerInfo
             * @static
             * @param {common.PlayerInfo} message PlayerInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.sex = 0;
                    object.nick = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.money = options.longs === String ? "0" : 0;
                    object.diamond = 0;
                    object.winTimes = 0;
                    object.drawTimes = 0;
                    object.loseTimes = 0;
                    object.vipLevel = 0;
                    object.headUrl = "";
                    object.headUrlSmall = "";
                    object.jsonStr = "";
                    object.referrerNick = "";
                    object.clubCard = 0;
                    object.session = 0;
                    object.hallId = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.sex != null && message.hasOwnProperty("sex"))
                    object.sex = message.sex;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.money != null && message.hasOwnProperty("money"))
                    if (typeof message.money === "number")
                        object.money = options.longs === String ? String(message.money) : message.money;
                    else
                        object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber(true) : message.money;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    object.diamond = message.diamond;
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    object.winTimes = message.winTimes;
                if (message.drawTimes != null && message.hasOwnProperty("drawTimes"))
                    object.drawTimes = message.drawTimes;
                if (message.loseTimes != null && message.hasOwnProperty("loseTimes"))
                    object.loseTimes = message.loseTimes;
                if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                    object.vipLevel = message.vipLevel;
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    object.headUrl = message.headUrl;
                if (message.headUrlSmall != null && message.hasOwnProperty("headUrlSmall"))
                    object.headUrlSmall = message.headUrlSmall;
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    object.jsonStr = message.jsonStr;
                if (message.referrerNick != null && message.hasOwnProperty("referrerNick"))
                    object.referrerNick = message.referrerNick;
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    object.clubCard = message.clubCard;
                if (message.session != null && message.hasOwnProperty("session"))
                    object.session = message.session;
                if (message.hallId != null && message.hasOwnProperty("hallId"))
                    object.hallId = message.hallId;
                return object;
            };
    
            /**
             * Converts this PlayerInfo to JSON.
             * @function toJSON
             * @memberof common.PlayerInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlayerInfo;
        })();
    
        common.Wallet = (function() {
    
            /**
             * Properties of a Wallet.
             * @memberof common
             * @interface IWallet
             * @property {number|Long|null} [coin] Wallet coin
             * @property {number|Long|null} [diamond] Wallet diamond
             * @property {number|Long|null} [rmb] Wallet rmb
             */
    
            /**
             * Constructs a new Wallet.
             * @memberof common
             * @classdesc Represents a Wallet.
             * @implements IWallet
             * @constructor
             * @param {common.IWallet=} [properties] Properties to set
             */
            function Wallet(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Wallet coin.
             * @member {number|Long} coin
             * @memberof common.Wallet
             * @instance
             */
            Wallet.prototype.coin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Wallet diamond.
             * @member {number|Long} diamond
             * @memberof common.Wallet
             * @instance
             */
            Wallet.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Wallet rmb.
             * @member {number|Long} rmb
             * @memberof common.Wallet
             * @instance
             */
            Wallet.prototype.rmb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Creates a new Wallet instance using the specified properties.
             * @function create
             * @memberof common.Wallet
             * @static
             * @param {common.IWallet=} [properties] Properties to set
             * @returns {common.Wallet} Wallet instance
             */
            Wallet.create = function create(properties) {
                return new Wallet(properties);
            };
    
            /**
             * Encodes the specified Wallet message. Does not implicitly {@link common.Wallet.verify|verify} messages.
             * @function encode
             * @memberof common.Wallet
             * @static
             * @param {common.IWallet} message Wallet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Wallet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.coin != null && message.hasOwnProperty("coin"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.coin);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.diamond);
                if (message.rmb != null && message.hasOwnProperty("rmb"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.rmb);
                return writer;
            };
    
            /**
             * Encodes the specified Wallet message, length delimited. Does not implicitly {@link common.Wallet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Wallet
             * @static
             * @param {common.IWallet} message Wallet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Wallet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Wallet message from the specified reader or buffer.
             * @function decode
             * @memberof common.Wallet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Wallet} Wallet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Wallet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Wallet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.coin = reader.int64();
                        break;
                    case 2:
                        message.diamond = reader.int64();
                        break;
                    case 3:
                        message.rmb = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Wallet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Wallet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Wallet} Wallet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Wallet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Wallet message.
             * @function verify
             * @memberof common.Wallet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Wallet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.coin != null && message.hasOwnProperty("coin"))
                    if (!$util.isInteger(message.coin) && !(message.coin && $util.isInteger(message.coin.low) && $util.isInteger(message.coin.high)))
                        return "coin: integer|Long expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                if (message.rmb != null && message.hasOwnProperty("rmb"))
                    if (!$util.isInteger(message.rmb) && !(message.rmb && $util.isInteger(message.rmb.low) && $util.isInteger(message.rmb.high)))
                        return "rmb: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a Wallet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Wallet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Wallet} Wallet
             */
            Wallet.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Wallet)
                    return object;
                var message = new $root.common.Wallet();
                if (object.coin != null)
                    if ($util.Long)
                        (message.coin = $util.Long.fromValue(object.coin)).unsigned = false;
                    else if (typeof object.coin === "string")
                        message.coin = parseInt(object.coin, 10);
                    else if (typeof object.coin === "number")
                        message.coin = object.coin;
                    else if (typeof object.coin === "object")
                        message.coin = new $util.LongBits(object.coin.low >>> 0, object.coin.high >>> 0).toNumber();
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = false;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber();
                if (object.rmb != null)
                    if ($util.Long)
                        (message.rmb = $util.Long.fromValue(object.rmb)).unsigned = false;
                    else if (typeof object.rmb === "string")
                        message.rmb = parseInt(object.rmb, 10);
                    else if (typeof object.rmb === "number")
                        message.rmb = object.rmb;
                    else if (typeof object.rmb === "object")
                        message.rmb = new $util.LongBits(object.rmb.low >>> 0, object.rmb.high >>> 0).toNumber();
                return message;
            };
    
            /**
             * Creates a plain object from a Wallet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Wallet
             * @static
             * @param {common.Wallet} message Wallet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Wallet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.coin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.coin = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.rmb = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.rmb = options.longs === String ? "0" : 0;
                }
                if (message.coin != null && message.hasOwnProperty("coin"))
                    if (typeof message.coin === "number")
                        object.coin = options.longs === String ? String(message.coin) : message.coin;
                    else
                        object.coin = options.longs === String ? $util.Long.prototype.toString.call(message.coin) : options.longs === Number ? new $util.LongBits(message.coin.low >>> 0, message.coin.high >>> 0).toNumber() : message.coin;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber() : message.diamond;
                if (message.rmb != null && message.hasOwnProperty("rmb"))
                    if (typeof message.rmb === "number")
                        object.rmb = options.longs === String ? String(message.rmb) : message.rmb;
                    else
                        object.rmb = options.longs === String ? $util.Long.prototype.toString.call(message.rmb) : options.longs === Number ? new $util.LongBits(message.rmb.low >>> 0, message.rmb.high >>> 0).toNumber() : message.rmb;
                return object;
            };
    
            /**
             * Converts this Wallet to JSON.
             * @function toJSON
             * @memberof common.Wallet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Wallet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Wallet;
        })();
    
        common.Prop = (function() {
    
            /**
             * Properties of a Prop.
             * @memberof common
             * @interface IProp
             * @property {number|null} [id] Prop id
             * @property {string|null} [name] Prop name
             * @property {number|null} [count] Prop count
             * @property {number|null} [validity] Prop validity
             */
    
            /**
             * Constructs a new Prop.
             * @memberof common
             * @classdesc Represents a Prop.
             * @implements IProp
             * @constructor
             * @param {common.IProp=} [properties] Properties to set
             */
            function Prop(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Prop id.
             * @member {number} id
             * @memberof common.Prop
             * @instance
             */
            Prop.prototype.id = 0;
    
            /**
             * Prop name.
             * @member {string} name
             * @memberof common.Prop
             * @instance
             */
            Prop.prototype.name = "";
    
            /**
             * Prop count.
             * @member {number} count
             * @memberof common.Prop
             * @instance
             */
            Prop.prototype.count = 0;
    
            /**
             * Prop validity.
             * @member {number} validity
             * @memberof common.Prop
             * @instance
             */
            Prop.prototype.validity = 0;
    
            /**
             * Creates a new Prop instance using the specified properties.
             * @function create
             * @memberof common.Prop
             * @static
             * @param {common.IProp=} [properties] Properties to set
             * @returns {common.Prop} Prop instance
             */
            Prop.create = function create(properties) {
                return new Prop(properties);
            };
    
            /**
             * Encodes the specified Prop message. Does not implicitly {@link common.Prop.verify|verify} messages.
             * @function encode
             * @memberof common.Prop
             * @static
             * @param {common.IProp} message Prop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Prop.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.count);
                if (message.validity != null && message.hasOwnProperty("validity"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.validity);
                return writer;
            };
    
            /**
             * Encodes the specified Prop message, length delimited. Does not implicitly {@link common.Prop.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Prop
             * @static
             * @param {common.IProp} message Prop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Prop.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Prop message from the specified reader or buffer.
             * @function decode
             * @memberof common.Prop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Prop} Prop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Prop.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Prop();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.count = reader.uint32();
                        break;
                    case 4:
                        message.validity = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Prop message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Prop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Prop} Prop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Prop.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Prop message.
             * @function verify
             * @memberof common.Prop
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Prop.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.validity != null && message.hasOwnProperty("validity"))
                    if (!$util.isInteger(message.validity))
                        return "validity: integer expected";
                return null;
            };
    
            /**
             * Creates a Prop message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Prop
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Prop} Prop
             */
            Prop.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Prop)
                    return object;
                var message = new $root.common.Prop();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.count != null)
                    message.count = object.count >>> 0;
                if (object.validity != null)
                    message.validity = object.validity >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Prop message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Prop
             * @static
             * @param {common.Prop} message Prop
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Prop.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.count = 0;
                    object.validity = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.validity != null && message.hasOwnProperty("validity"))
                    object.validity = message.validity;
                return object;
            };
    
            /**
             * Converts this Prop to JSON.
             * @function toJSON
             * @memberof common.Prop
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Prop.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Prop;
        })();
    
        common.Item = (function() {
    
            /**
             * Properties of an Item.
             * @memberof common
             * @interface IItem
             * @property {number|null} [id] Item id
             * @property {number|null} [count] Item count
             */
    
            /**
             * Constructs a new Item.
             * @memberof common
             * @classdesc Represents an Item.
             * @implements IItem
             * @constructor
             * @param {common.IItem=} [properties] Properties to set
             */
            function Item(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Item id.
             * @member {number} id
             * @memberof common.Item
             * @instance
             */
            Item.prototype.id = 0;
    
            /**
             * Item count.
             * @member {number} count
             * @memberof common.Item
             * @instance
             */
            Item.prototype.count = 0;
    
            /**
             * Creates a new Item instance using the specified properties.
             * @function create
             * @memberof common.Item
             * @static
             * @param {common.IItem=} [properties] Properties to set
             * @returns {common.Item} Item instance
             */
            Item.create = function create(properties) {
                return new Item(properties);
            };
    
            /**
             * Encodes the specified Item message. Does not implicitly {@link common.Item.verify|verify} messages.
             * @function encode
             * @memberof common.Item
             * @static
             * @param {common.IItem} message Item message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Item.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.count);
                return writer;
            };
    
            /**
             * Encodes the specified Item message, length delimited. Does not implicitly {@link common.Item.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Item
             * @static
             * @param {common.IItem} message Item message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Item.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Item message from the specified reader or buffer.
             * @function decode
             * @memberof common.Item
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Item} Item
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Item.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Item();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Item message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Item
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Item} Item
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Item.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Item message.
             * @function verify
             * @memberof common.Item
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Item.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };
    
            /**
             * Creates an Item message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Item
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Item} Item
             */
            Item.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Item)
                    return object;
                var message = new $root.common.Item();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Item message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Item
             * @static
             * @param {common.Item} message Item
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Item.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.count = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };
    
            /**
             * Converts this Item to JSON.
             * @function toJSON
             * @memberof common.Item
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Item.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Item;
        })();
    
        common.Attr = (function() {
    
            /**
             * Properties of an Attr.
             * @memberof common
             * @interface IAttr
             * @property {number|null} [id] Attr id
             * @property {number|Long|null} [count] Attr count
             */
    
            /**
             * Constructs a new Attr.
             * @memberof common
             * @classdesc Represents an Attr.
             * @implements IAttr
             * @constructor
             * @param {common.IAttr=} [properties] Properties to set
             */
            function Attr(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Attr id.
             * @member {number} id
             * @memberof common.Attr
             * @instance
             */
            Attr.prototype.id = 0;
    
            /**
             * Attr count.
             * @member {number|Long} count
             * @memberof common.Attr
             * @instance
             */
            Attr.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Creates a new Attr instance using the specified properties.
             * @function create
             * @memberof common.Attr
             * @static
             * @param {common.IAttr=} [properties] Properties to set
             * @returns {common.Attr} Attr instance
             */
            Attr.create = function create(properties) {
                return new Attr(properties);
            };
    
            /**
             * Encodes the specified Attr message. Does not implicitly {@link common.Attr.verify|verify} messages.
             * @function encode
             * @memberof common.Attr
             * @static
             * @param {common.IAttr} message Attr message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Attr.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                return writer;
            };
    
            /**
             * Encodes the specified Attr message, length delimited. Does not implicitly {@link common.Attr.verify|verify} messages.
             * @function encodeDelimited
             * @memberof common.Attr
             * @static
             * @param {common.IAttr} message Attr message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Attr.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Attr message from the specified reader or buffer.
             * @function decode
             * @memberof common.Attr
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {common.Attr} Attr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Attr.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.common.Attr();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.count = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Attr message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof common.Attr
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {common.Attr} Attr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Attr.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Attr message.
             * @function verify
             * @memberof common.Attr
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Attr.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                        return "count: integer|Long expected";
                return null;
            };
    
            /**
             * Creates an Attr message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof common.Attr
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {common.Attr} Attr
             */
            Attr.fromObject = function fromObject(object) {
                if (object instanceof $root.common.Attr)
                    return object;
                var message = new $root.common.Attr();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.count != null)
                    if ($util.Long)
                        (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                    else if (typeof object.count === "string")
                        message.count = parseInt(object.count, 10);
                    else if (typeof object.count === "number")
                        message.count = object.count;
                    else if (typeof object.count === "object")
                        message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                return message;
            };
    
            /**
             * Creates a plain object from an Attr message. Also converts values to other types if specified.
             * @function toObject
             * @memberof common.Attr
             * @static
             * @param {common.Attr} message Attr
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Attr.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.count = options.longs === String ? "0" : 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.count != null && message.hasOwnProperty("count"))
                    if (typeof message.count === "number")
                        object.count = options.longs === String ? String(message.count) : message.count;
                    else
                        object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                return object;
            };
    
            /**
             * Converts this Attr to JSON.
             * @function toJSON
             * @memberof common.Attr
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Attr.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Attr;
        })();
    
        return common;
    })();
    
    $root.hall = (function() {
    
        /**
         * Namespace hall.
         * @exports hall
         * @namespace
         */
        var hall = {};
    
        hall.Basic = (function() {
    
            /**
             * Properties of a Basic.
             * @memberof hall
             * @interface IBasic
             * @property {number|null} [api] Basic api
             * @property {string|null} [verName] Basic verName
             * @property {number|null} [userType] Basic userType
             * @property {number|null} [hotCode] Basic hotCode
             */
    
            /**
             * Constructs a new Basic.
             * @memberof hall
             * @classdesc Represents a Basic.
             * @implements IBasic
             * @constructor
             * @param {hall.IBasic=} [properties] Properties to set
             */
            function Basic(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Basic api.
             * @member {number} api
             * @memberof hall.Basic
             * @instance
             */
            Basic.prototype.api = 0;
    
            /**
             * Basic verName.
             * @member {string} verName
             * @memberof hall.Basic
             * @instance
             */
            Basic.prototype.verName = "";
    
            /**
             * Basic userType.
             * @member {number} userType
             * @memberof hall.Basic
             * @instance
             */
            Basic.prototype.userType = 0;
    
            /**
             * Basic hotCode.
             * @member {number} hotCode
             * @memberof hall.Basic
             * @instance
             */
            Basic.prototype.hotCode = 0;
    
            /**
             * Creates a new Basic instance using the specified properties.
             * @function create
             * @memberof hall.Basic
             * @static
             * @param {hall.IBasic=} [properties] Properties to set
             * @returns {hall.Basic} Basic instance
             */
            Basic.create = function create(properties) {
                return new Basic(properties);
            };
    
            /**
             * Encodes the specified Basic message. Does not implicitly {@link hall.Basic.verify|verify} messages.
             * @function encode
             * @memberof hall.Basic
             * @static
             * @param {hall.IBasic} message Basic message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Basic.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.api != null && message.hasOwnProperty("api"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.api);
                if (message.verName != null && message.hasOwnProperty("verName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.verName);
                if (message.userType != null && message.hasOwnProperty("userType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userType);
                if (message.hotCode != null && message.hasOwnProperty("hotCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.hotCode);
                return writer;
            };
    
            /**
             * Encodes the specified Basic message, length delimited. Does not implicitly {@link hall.Basic.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.Basic
             * @static
             * @param {hall.IBasic} message Basic message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Basic.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Basic message from the specified reader or buffer.
             * @function decode
             * @memberof hall.Basic
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.Basic} Basic
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Basic.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.Basic();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.api = reader.uint32();
                        break;
                    case 2:
                        message.verName = reader.string();
                        break;
                    case 3:
                        message.userType = reader.uint32();
                        break;
                    case 4:
                        message.hotCode = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Basic message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.Basic
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.Basic} Basic
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Basic.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Basic message.
             * @function verify
             * @memberof hall.Basic
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Basic.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.api != null && message.hasOwnProperty("api"))
                    if (!$util.isInteger(message.api))
                        return "api: integer expected";
                if (message.verName != null && message.hasOwnProperty("verName"))
                    if (!$util.isString(message.verName))
                        return "verName: string expected";
                if (message.userType != null && message.hasOwnProperty("userType"))
                    if (!$util.isInteger(message.userType))
                        return "userType: integer expected";
                if (message.hotCode != null && message.hasOwnProperty("hotCode"))
                    if (!$util.isInteger(message.hotCode))
                        return "hotCode: integer expected";
                return null;
            };
    
            /**
             * Creates a Basic message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.Basic
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.Basic} Basic
             */
            Basic.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.Basic)
                    return object;
                var message = new $root.hall.Basic();
                if (object.api != null)
                    message.api = object.api >>> 0;
                if (object.verName != null)
                    message.verName = String(object.verName);
                if (object.userType != null)
                    message.userType = object.userType >>> 0;
                if (object.hotCode != null)
                    message.hotCode = object.hotCode >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Basic message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.Basic
             * @static
             * @param {hall.Basic} message Basic
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Basic.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.api = 0;
                    object.verName = "";
                    object.userType = 0;
                    object.hotCode = 0;
                }
                if (message.api != null && message.hasOwnProperty("api"))
                    object.api = message.api;
                if (message.verName != null && message.hasOwnProperty("verName"))
                    object.verName = message.verName;
                if (message.userType != null && message.hasOwnProperty("userType"))
                    object.userType = message.userType;
                if (message.hotCode != null && message.hasOwnProperty("hotCode"))
                    object.hotCode = message.hotCode;
                return object;
            };
    
            /**
             * Converts this Basic to JSON.
             * @function toJSON
             * @memberof hall.Basic
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Basic.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Basic;
        })();
    
        hall.HeartBeatReq = (function() {
    
            /**
             * Properties of a HeartBeatReq.
             * @memberof hall
             * @interface IHeartBeatReq
             * @property {common.IRequest} request HeartBeatReq request
             */
    
            /**
             * Constructs a new HeartBeatReq.
             * @memberof hall
             * @classdesc Represents a HeartBeatReq.
             * @implements IHeartBeatReq
             * @constructor
             * @param {hall.IHeartBeatReq=} [properties] Properties to set
             */
            function HeartBeatReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HeartBeatReq request.
             * @member {common.IRequest} request
             * @memberof hall.HeartBeatReq
             * @instance
             */
            HeartBeatReq.prototype.request = null;
    
            /**
             * Creates a new HeartBeatReq instance using the specified properties.
             * @function create
             * @memberof hall.HeartBeatReq
             * @static
             * @param {hall.IHeartBeatReq=} [properties] Properties to set
             * @returns {hall.HeartBeatReq} HeartBeatReq instance
             */
            HeartBeatReq.create = function create(properties) {
                return new HeartBeatReq(properties);
            };
    
            /**
             * Encodes the specified HeartBeatReq message. Does not implicitly {@link hall.HeartBeatReq.verify|verify} messages.
             * @function encode
             * @memberof hall.HeartBeatReq
             * @static
             * @param {hall.IHeartBeatReq} message HeartBeatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartBeatReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified HeartBeatReq message, length delimited. Does not implicitly {@link hall.HeartBeatReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.HeartBeatReq
             * @static
             * @param {hall.IHeartBeatReq} message HeartBeatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartBeatReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HeartBeatReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.HeartBeatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.HeartBeatReq} HeartBeatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartBeatReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.HeartBeatReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a HeartBeatReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.HeartBeatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.HeartBeatReq} HeartBeatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartBeatReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HeartBeatReq message.
             * @function verify
             * @memberof hall.HeartBeatReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HeartBeatReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a HeartBeatReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.HeartBeatReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.HeartBeatReq} HeartBeatReq
             */
            HeartBeatReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.HeartBeatReq)
                    return object;
                var message = new $root.hall.HeartBeatReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.HeartBeatReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a HeartBeatReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.HeartBeatReq
             * @static
             * @param {hall.HeartBeatReq} message HeartBeatReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HeartBeatReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this HeartBeatReq to JSON.
             * @function toJSON
             * @memberof hall.HeartBeatReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HeartBeatReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HeartBeatReq;
        })();
    
        hall.HeartBeatRsp = (function() {
    
            /**
             * Properties of a HeartBeatRsp.
             * @memberof hall
             * @interface IHeartBeatRsp
             * @property {common.IResult|null} [result] HeartBeatRsp result
             */
    
            /**
             * Constructs a new HeartBeatRsp.
             * @memberof hall
             * @classdesc Represents a HeartBeatRsp.
             * @implements IHeartBeatRsp
             * @constructor
             * @param {hall.IHeartBeatRsp=} [properties] Properties to set
             */
            function HeartBeatRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HeartBeatRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.HeartBeatRsp
             * @instance
             */
            HeartBeatRsp.prototype.result = null;
    
            /**
             * Creates a new HeartBeatRsp instance using the specified properties.
             * @function create
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {hall.IHeartBeatRsp=} [properties] Properties to set
             * @returns {hall.HeartBeatRsp} HeartBeatRsp instance
             */
            HeartBeatRsp.create = function create(properties) {
                return new HeartBeatRsp(properties);
            };
    
            /**
             * Encodes the specified HeartBeatRsp message. Does not implicitly {@link hall.HeartBeatRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {hall.IHeartBeatRsp} message HeartBeatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartBeatRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified HeartBeatRsp message, length delimited. Does not implicitly {@link hall.HeartBeatRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {hall.IHeartBeatRsp} message HeartBeatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartBeatRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HeartBeatRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.HeartBeatRsp} HeartBeatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartBeatRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.HeartBeatRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HeartBeatRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.HeartBeatRsp} HeartBeatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartBeatRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HeartBeatRsp message.
             * @function verify
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HeartBeatRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a HeartBeatRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.HeartBeatRsp} HeartBeatRsp
             */
            HeartBeatRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.HeartBeatRsp)
                    return object;
                var message = new $root.hall.HeartBeatRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.HeartBeatRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a HeartBeatRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.HeartBeatRsp
             * @static
             * @param {hall.HeartBeatRsp} message HeartBeatRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HeartBeatRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this HeartBeatRsp to JSON.
             * @function toJSON
             * @memberof hall.HeartBeatRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HeartBeatRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HeartBeatRsp;
        })();
    
        hall.UserInfo = (function() {
    
            /**
             * Properties of a UserInfo.
             * @memberof hall
             * @interface IUserInfo
             * @property {number|null} [id] UserInfo id
             * @property {common.IPlayerInfo|null} [playerInfo] UserInfo playerInfo
             * @property {string|null} [lastLoginTime] UserInfo lastLoginTime
             * @property {number|null} [isRegister] UserInfo isRegister
             * @property {string|null} [session] UserInfo session
             * @property {number|null} [firstPayStatus] UserInfo firstPayStatus
             */
    
            /**
             * Constructs a new UserInfo.
             * @memberof hall
             * @classdesc Represents a UserInfo.
             * @implements IUserInfo
             * @constructor
             * @param {hall.IUserInfo=} [properties] Properties to set
             */
            function UserInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * UserInfo id.
             * @member {number} id
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.id = 0;
    
            /**
             * UserInfo playerInfo.
             * @member {common.IPlayerInfo|null|undefined} playerInfo
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.playerInfo = null;
    
            /**
             * UserInfo lastLoginTime.
             * @member {string} lastLoginTime
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.lastLoginTime = "";
    
            /**
             * UserInfo isRegister.
             * @member {number} isRegister
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.isRegister = 0;
    
            /**
             * UserInfo session.
             * @member {string} session
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.session = "";
    
            /**
             * UserInfo firstPayStatus.
             * @member {number} firstPayStatus
             * @memberof hall.UserInfo
             * @instance
             */
            UserInfo.prototype.firstPayStatus = 0;
    
            /**
             * Creates a new UserInfo instance using the specified properties.
             * @function create
             * @memberof hall.UserInfo
             * @static
             * @param {hall.IUserInfo=} [properties] Properties to set
             * @returns {hall.UserInfo} UserInfo instance
             */
            UserInfo.create = function create(properties) {
                return new UserInfo(properties);
            };
    
            /**
             * Encodes the specified UserInfo message. Does not implicitly {@link hall.UserInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.UserInfo
             * @static
             * @param {hall.IUserInfo} message UserInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    $root.common.PlayerInfo.encode(message.playerInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.lastLoginTime != null && message.hasOwnProperty("lastLoginTime"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.lastLoginTime);
                if (message.isRegister != null && message.hasOwnProperty("isRegister"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.isRegister);
                if (message.session != null && message.hasOwnProperty("session"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.session);
                if (message.firstPayStatus != null && message.hasOwnProperty("firstPayStatus"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.firstPayStatus);
                return writer;
            };
    
            /**
             * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link hall.UserInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.UserInfo
             * @static
             * @param {hall.IUserInfo} message UserInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a UserInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.UserInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.UserInfo} UserInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.UserInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.playerInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.lastLoginTime = reader.string();
                        break;
                    case 4:
                        message.isRegister = reader.uint32();
                        break;
                    case 5:
                        message.session = reader.string();
                        break;
                    case 6:
                        message.firstPayStatus = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a UserInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.UserInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.UserInfo} UserInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a UserInfo message.
             * @function verify
             * @memberof hall.UserInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
                    var error = $root.common.PlayerInfo.verify(message.playerInfo);
                    if (error)
                        return "playerInfo." + error;
                }
                if (message.lastLoginTime != null && message.hasOwnProperty("lastLoginTime"))
                    if (!$util.isString(message.lastLoginTime))
                        return "lastLoginTime: string expected";
                if (message.isRegister != null && message.hasOwnProperty("isRegister"))
                    if (!$util.isInteger(message.isRegister))
                        return "isRegister: integer expected";
                if (message.session != null && message.hasOwnProperty("session"))
                    if (!$util.isString(message.session))
                        return "session: string expected";
                if (message.firstPayStatus != null && message.hasOwnProperty("firstPayStatus"))
                    if (!$util.isInteger(message.firstPayStatus))
                        return "firstPayStatus: integer expected";
                return null;
            };
    
            /**
             * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.UserInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.UserInfo} UserInfo
             */
            UserInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.UserInfo)
                    return object;
                var message = new $root.hall.UserInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.playerInfo != null) {
                    if (typeof object.playerInfo !== "object")
                        throw TypeError(".hall.UserInfo.playerInfo: object expected");
                    message.playerInfo = $root.common.PlayerInfo.fromObject(object.playerInfo);
                }
                if (object.lastLoginTime != null)
                    message.lastLoginTime = String(object.lastLoginTime);
                if (object.isRegister != null)
                    message.isRegister = object.isRegister >>> 0;
                if (object.session != null)
                    message.session = String(object.session);
                if (object.firstPayStatus != null)
                    message.firstPayStatus = object.firstPayStatus >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.UserInfo
             * @static
             * @param {hall.UserInfo} message UserInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.playerInfo = null;
                    object.lastLoginTime = "";
                    object.isRegister = 0;
                    object.session = "";
                    object.firstPayStatus = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    object.playerInfo = $root.common.PlayerInfo.toObject(message.playerInfo, options);
                if (message.lastLoginTime != null && message.hasOwnProperty("lastLoginTime"))
                    object.lastLoginTime = message.lastLoginTime;
                if (message.isRegister != null && message.hasOwnProperty("isRegister"))
                    object.isRegister = message.isRegister;
                if (message.session != null && message.hasOwnProperty("session"))
                    object.session = message.session;
                if (message.firstPayStatus != null && message.hasOwnProperty("firstPayStatus"))
                    object.firstPayStatus = message.firstPayStatus;
                return object;
            };
    
            /**
             * Converts this UserInfo to JSON.
             * @function toJSON
             * @memberof hall.UserInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return UserInfo;
        })();
    
        hall.Config = (function() {
    
            /**
             * Properties of a Config.
             * @memberof hall
             * @interface IConfig
             * @property {number|null} [worldchatCost] Config worldchatCost
             * @property {number|null} [bindProxyAward] Config bindProxyAward
             */
    
            /**
             * Constructs a new Config.
             * @memberof hall
             * @classdesc Represents a Config.
             * @implements IConfig
             * @constructor
             * @param {hall.IConfig=} [properties] Properties to set
             */
            function Config(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Config worldchatCost.
             * @member {number} worldchatCost
             * @memberof hall.Config
             * @instance
             */
            Config.prototype.worldchatCost = 0;
    
            /**
             * Config bindProxyAward.
             * @member {number} bindProxyAward
             * @memberof hall.Config
             * @instance
             */
            Config.prototype.bindProxyAward = 0;
    
            /**
             * Creates a new Config instance using the specified properties.
             * @function create
             * @memberof hall.Config
             * @static
             * @param {hall.IConfig=} [properties] Properties to set
             * @returns {hall.Config} Config instance
             */
            Config.create = function create(properties) {
                return new Config(properties);
            };
    
            /**
             * Encodes the specified Config message. Does not implicitly {@link hall.Config.verify|verify} messages.
             * @function encode
             * @memberof hall.Config
             * @static
             * @param {hall.IConfig} message Config message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Config.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.worldchatCost != null && message.hasOwnProperty("worldchatCost"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.worldchatCost);
                if (message.bindProxyAward != null && message.hasOwnProperty("bindProxyAward"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.bindProxyAward);
                return writer;
            };
    
            /**
             * Encodes the specified Config message, length delimited. Does not implicitly {@link hall.Config.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.Config
             * @static
             * @param {hall.IConfig} message Config message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Config.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Config message from the specified reader or buffer.
             * @function decode
             * @memberof hall.Config
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.Config} Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Config.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.Config();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.worldchatCost = reader.uint32();
                        break;
                    case 2:
                        message.bindProxyAward = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Config message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.Config
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.Config} Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Config.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Config message.
             * @function verify
             * @memberof hall.Config
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Config.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.worldchatCost != null && message.hasOwnProperty("worldchatCost"))
                    if (!$util.isInteger(message.worldchatCost))
                        return "worldchatCost: integer expected";
                if (message.bindProxyAward != null && message.hasOwnProperty("bindProxyAward"))
                    if (!$util.isInteger(message.bindProxyAward))
                        return "bindProxyAward: integer expected";
                return null;
            };
    
            /**
             * Creates a Config message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.Config
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.Config} Config
             */
            Config.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.Config)
                    return object;
                var message = new $root.hall.Config();
                if (object.worldchatCost != null)
                    message.worldchatCost = object.worldchatCost >>> 0;
                if (object.bindProxyAward != null)
                    message.bindProxyAward = object.bindProxyAward >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Config message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.Config
             * @static
             * @param {hall.Config} message Config
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Config.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.worldchatCost = 0;
                    object.bindProxyAward = 0;
                }
                if (message.worldchatCost != null && message.hasOwnProperty("worldchatCost"))
                    object.worldchatCost = message.worldchatCost;
                if (message.bindProxyAward != null && message.hasOwnProperty("bindProxyAward"))
                    object.bindProxyAward = message.bindProxyAward;
                return object;
            };
    
            /**
             * Converts this Config to JSON.
             * @function toJSON
             * @memberof hall.Config
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Config.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Config;
        })();
    
        hall.LoginReq = (function() {
    
            /**
             * Properties of a LoginReq.
             * @memberof hall
             * @interface ILoginReq
             * @property {common.IRequest} request LoginReq request
             * @property {hall.IBasic|null} [basic] LoginReq basic
             * @property {string|null} [imei] LoginReq imei
             * @property {number|null} [simType] LoginReq simType
             * @property {string|null} [tel] LoginReq tel
             * @property {string|null} [modelName] LoginReq modelName
             * @property {string|null} [os] LoginReq os
             * @property {string|null} [account] LoginReq account
             * @property {string|null} [password] LoginReq password
             * @property {string|null} [thirdInfo] LoginReq thirdInfo
             */
    
            /**
             * Constructs a new LoginReq.
             * @memberof hall
             * @classdesc Represents a LoginReq.
             * @implements ILoginReq
             * @constructor
             * @param {hall.ILoginReq=} [properties] Properties to set
             */
            function LoginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LoginReq request.
             * @member {common.IRequest} request
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.request = null;
    
            /**
             * LoginReq basic.
             * @member {hall.IBasic|null|undefined} basic
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.basic = null;
    
            /**
             * LoginReq imei.
             * @member {string} imei
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.imei = "";
    
            /**
             * LoginReq simType.
             * @member {number} simType
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.simType = 0;
    
            /**
             * LoginReq tel.
             * @member {string} tel
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.tel = "";
    
            /**
             * LoginReq modelName.
             * @member {string} modelName
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.modelName = "";
    
            /**
             * LoginReq os.
             * @member {string} os
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.os = "";
    
            /**
             * LoginReq account.
             * @member {string} account
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.account = "";
    
            /**
             * LoginReq password.
             * @member {string} password
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.password = "";
    
            /**
             * LoginReq thirdInfo.
             * @member {string} thirdInfo
             * @memberof hall.LoginReq
             * @instance
             */
            LoginReq.prototype.thirdInfo = "";
    
            /**
             * Creates a new LoginReq instance using the specified properties.
             * @function create
             * @memberof hall.LoginReq
             * @static
             * @param {hall.ILoginReq=} [properties] Properties to set
             * @returns {hall.LoginReq} LoginReq instance
             */
            LoginReq.create = function create(properties) {
                return new LoginReq(properties);
            };
    
            /**
             * Encodes the specified LoginReq message. Does not implicitly {@link hall.LoginReq.verify|verify} messages.
             * @function encode
             * @memberof hall.LoginReq
             * @static
             * @param {hall.ILoginReq} message LoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.basic != null && message.hasOwnProperty("basic"))
                    $root.hall.Basic.encode(message.basic, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.imei != null && message.hasOwnProperty("imei"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.imei);
                if (message.simType != null && message.hasOwnProperty("simType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.simType);
                if (message.tel != null && message.hasOwnProperty("tel"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.tel);
                if (message.modelName != null && message.hasOwnProperty("modelName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.modelName);
                if (message.os != null && message.hasOwnProperty("os"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.os);
                if (message.account != null && message.hasOwnProperty("account"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.account);
                if (message.password != null && message.hasOwnProperty("password"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.password);
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.thirdInfo);
                return writer;
            };
    
            /**
             * Encodes the specified LoginReq message, length delimited. Does not implicitly {@link hall.LoginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.LoginReq
             * @static
             * @param {hall.ILoginReq} message LoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LoginReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.LoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.LoginReq} LoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.LoginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.basic = $root.hall.Basic.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.imei = reader.string();
                        break;
                    case 4:
                        message.simType = reader.uint32();
                        break;
                    case 5:
                        message.tel = reader.string();
                        break;
                    case 6:
                        message.modelName = reader.string();
                        break;
                    case 7:
                        message.os = reader.string();
                        break;
                    case 8:
                        message.account = reader.string();
                        break;
                    case 9:
                        message.password = reader.string();
                        break;
                    case 10:
                        message.thirdInfo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a LoginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.LoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.LoginReq} LoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LoginReq message.
             * @function verify
             * @memberof hall.LoginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.basic != null && message.hasOwnProperty("basic")) {
                    var error = $root.hall.Basic.verify(message.basic);
                    if (error)
                        return "basic." + error;
                }
                if (message.imei != null && message.hasOwnProperty("imei"))
                    if (!$util.isString(message.imei))
                        return "imei: string expected";
                if (message.simType != null && message.hasOwnProperty("simType"))
                    if (!$util.isInteger(message.simType))
                        return "simType: integer expected";
                if (message.tel != null && message.hasOwnProperty("tel"))
                    if (!$util.isString(message.tel))
                        return "tel: string expected";
                if (message.modelName != null && message.hasOwnProperty("modelName"))
                    if (!$util.isString(message.modelName))
                        return "modelName: string expected";
                if (message.os != null && message.hasOwnProperty("os"))
                    if (!$util.isString(message.os))
                        return "os: string expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.password != null && message.hasOwnProperty("password"))
                    if (!$util.isString(message.password))
                        return "password: string expected";
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    if (!$util.isString(message.thirdInfo))
                        return "thirdInfo: string expected";
                return null;
            };
    
            /**
             * Creates a LoginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.LoginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.LoginReq} LoginReq
             */
            LoginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.LoginReq)
                    return object;
                var message = new $root.hall.LoginReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.LoginReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.basic != null) {
                    if (typeof object.basic !== "object")
                        throw TypeError(".hall.LoginReq.basic: object expected");
                    message.basic = $root.hall.Basic.fromObject(object.basic);
                }
                if (object.imei != null)
                    message.imei = String(object.imei);
                if (object.simType != null)
                    message.simType = object.simType >>> 0;
                if (object.tel != null)
                    message.tel = String(object.tel);
                if (object.modelName != null)
                    message.modelName = String(object.modelName);
                if (object.os != null)
                    message.os = String(object.os);
                if (object.account != null)
                    message.account = String(object.account);
                if (object.password != null)
                    message.password = String(object.password);
                if (object.thirdInfo != null)
                    message.thirdInfo = String(object.thirdInfo);
                return message;
            };
    
            /**
             * Creates a plain object from a LoginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.LoginReq
             * @static
             * @param {hall.LoginReq} message LoginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.basic = null;
                    object.imei = "";
                    object.simType = 0;
                    object.tel = "";
                    object.modelName = "";
                    object.os = "";
                    object.account = "";
                    object.password = "";
                    object.thirdInfo = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.basic != null && message.hasOwnProperty("basic"))
                    object.basic = $root.hall.Basic.toObject(message.basic, options);
                if (message.imei != null && message.hasOwnProperty("imei"))
                    object.imei = message.imei;
                if (message.simType != null && message.hasOwnProperty("simType"))
                    object.simType = message.simType;
                if (message.tel != null && message.hasOwnProperty("tel"))
                    object.tel = message.tel;
                if (message.modelName != null && message.hasOwnProperty("modelName"))
                    object.modelName = message.modelName;
                if (message.os != null && message.hasOwnProperty("os"))
                    object.os = message.os;
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.password != null && message.hasOwnProperty("password"))
                    object.password = message.password;
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    object.thirdInfo = message.thirdInfo;
                return object;
            };
    
            /**
             * Converts this LoginReq to JSON.
             * @function toJSON
             * @memberof hall.LoginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LoginReq;
        })();
    
        hall.LoginRsp = (function() {
    
            /**
             * Properties of a LoginRsp.
             * @memberof hall
             * @interface ILoginRsp
             * @property {common.IResult|null} [result] LoginRsp result
             * @property {hall.IUserInfo|null} [userInfo] LoginRsp userInfo
             * @property {number|null} [userType] LoginRsp userType
             * @property {number|null} [isBinded] LoginRsp isBinded
             * @property {string|null} [thirdInfo] LoginRsp thirdInfo
             * @property {number|null} [ip] LoginRsp ip
             * @property {Array.<hall.IGameInfo>|null} [gameInfos] LoginRsp gameInfos
             * @property {hall.IConfig|null} [config] LoginRsp config
             * @property {string|null} [proxyUrl] LoginRsp proxyUrl
             * @property {string|null} [voiceUrl] LoginRsp voiceUrl
             * @property {string|null} [downloadUrl] LoginRsp downloadUrl
             * @property {string|null} [shareUrl] LoginRsp shareUrl
             * @property {string|null} [updateUrl] LoginRsp updateUrl
             * @property {boolean|null} [wechatPay] LoginRsp wechatPay
             * @property {string|null} [activityUrl] LoginRsp activityUrl
             * @property {number|null} [builtCode] LoginRsp builtCode
             * @property {number|null} [playCode] LoginRsp playCode
             * @property {Array.<number>|null} [builtCodes] LoginRsp builtCodes
             * @property {boolean|null} [isAgent] LoginRsp isAgent
             * @property {string|null} [extendJson] LoginRsp extendJson
             * @property {string|null} [agentWX] LoginRsp agentWX
             * @property {string|null} [customersrvWX] LoginRsp customersrvWX
             * @property {string|null} [suggestionWX] LoginRsp suggestionWX
             * @property {string|null} [scroller] LoginRsp scroller
             * @property {hall.IActivityInfo|null} [activityInfo] LoginRsp activityInfo
             * @property {number|null} [expireTime] LoginRsp expireTime
             */
    
            /**
             * Constructs a new LoginRsp.
             * @memberof hall
             * @classdesc Represents a LoginRsp.
             * @implements ILoginRsp
             * @constructor
             * @param {hall.ILoginRsp=} [properties] Properties to set
             */
            function LoginRsp(properties) {
                this.gameInfos = [];
                this.builtCodes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.result = null;
    
            /**
             * LoginRsp userInfo.
             * @member {hall.IUserInfo|null|undefined} userInfo
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.userInfo = null;
    
            /**
             * LoginRsp userType.
             * @member {number} userType
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.userType = 0;
    
            /**
             * LoginRsp isBinded.
             * @member {number} isBinded
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.isBinded = 0;
    
            /**
             * LoginRsp thirdInfo.
             * @member {string} thirdInfo
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.thirdInfo = "";
    
            /**
             * LoginRsp ip.
             * @member {number} ip
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.ip = 0;
    
            /**
             * LoginRsp gameInfos.
             * @member {Array.<hall.IGameInfo>} gameInfos
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.gameInfos = $util.emptyArray;
    
            /**
             * LoginRsp config.
             * @member {hall.IConfig|null|undefined} config
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.config = null;
    
            /**
             * LoginRsp proxyUrl.
             * @member {string} proxyUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.proxyUrl = "";
    
            /**
             * LoginRsp voiceUrl.
             * @member {string} voiceUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.voiceUrl = "";
    
            /**
             * LoginRsp downloadUrl.
             * @member {string} downloadUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.downloadUrl = "";
    
            /**
             * LoginRsp shareUrl.
             * @member {string} shareUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.shareUrl = "";
    
            /**
             * LoginRsp updateUrl.
             * @member {string} updateUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.updateUrl = "";
    
            /**
             * LoginRsp wechatPay.
             * @member {boolean} wechatPay
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.wechatPay = false;
    
            /**
             * LoginRsp activityUrl.
             * @member {string} activityUrl
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.activityUrl = "";
    
            /**
             * LoginRsp builtCode.
             * @member {number} builtCode
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.builtCode = 0;
    
            /**
             * LoginRsp playCode.
             * @member {number} playCode
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.playCode = 0;
    
            /**
             * LoginRsp builtCodes.
             * @member {Array.<number>} builtCodes
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.builtCodes = $util.emptyArray;
    
            /**
             * LoginRsp isAgent.
             * @member {boolean} isAgent
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.isAgent = false;
    
            /**
             * LoginRsp extendJson.
             * @member {string} extendJson
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.extendJson = "";
    
            /**
             * LoginRsp agentWX.
             * @member {string} agentWX
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.agentWX = "";
    
            /**
             * LoginRsp customersrvWX.
             * @member {string} customersrvWX
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.customersrvWX = "";
    
            /**
             * LoginRsp suggestionWX.
             * @member {string} suggestionWX
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.suggestionWX = "";
    
            /**
             * LoginRsp scroller.
             * @member {string} scroller
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.scroller = "";
    
            /**
             * LoginRsp activityInfo.
             * @member {hall.IActivityInfo|null|undefined} activityInfo
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.activityInfo = null;
    
            /**
             * LoginRsp expireTime.
             * @member {number} expireTime
             * @memberof hall.LoginRsp
             * @instance
             */
            LoginRsp.prototype.expireTime = 0;
    
            /**
             * Creates a new LoginRsp instance using the specified properties.
             * @function create
             * @memberof hall.LoginRsp
             * @static
             * @param {hall.ILoginRsp=} [properties] Properties to set
             * @returns {hall.LoginRsp} LoginRsp instance
             */
            LoginRsp.create = function create(properties) {
                return new LoginRsp(properties);
            };
    
            /**
             * Encodes the specified LoginRsp message. Does not implicitly {@link hall.LoginRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.LoginRsp
             * @static
             * @param {hall.ILoginRsp} message LoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                    $root.hall.UserInfo.encode(message.userInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.userType != null && message.hasOwnProperty("userType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userType);
                if (message.isBinded != null && message.hasOwnProperty("isBinded"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.isBinded);
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.thirdInfo);
                if (message.ip != null && message.hasOwnProperty("ip"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ip);
                if (message.gameInfos != null && message.gameInfos.length)
                    for (var i = 0; i < message.gameInfos.length; ++i)
                        $root.hall.GameInfo.encode(message.gameInfos[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.config != null && message.hasOwnProperty("config"))
                    $root.hall.Config.encode(message.config, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.proxyUrl);
                if (message.voiceUrl != null && message.hasOwnProperty("voiceUrl"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.voiceUrl);
                if (message.downloadUrl != null && message.hasOwnProperty("downloadUrl"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.downloadUrl);
                if (message.shareUrl != null && message.hasOwnProperty("shareUrl"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.shareUrl);
                if (message.updateUrl != null && message.hasOwnProperty("updateUrl"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.updateUrl);
                if (message.wechatPay != null && message.hasOwnProperty("wechatPay"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.wechatPay);
                if (message.activityUrl != null && message.hasOwnProperty("activityUrl"))
                    writer.uint32(/* id 16, wireType 2 =*/130).string(message.activityUrl);
                if (message.builtCode != null && message.hasOwnProperty("builtCode"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.builtCode);
                if (message.playCode != null && message.hasOwnProperty("playCode"))
                    writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.playCode);
                if (message.builtCodes != null && message.builtCodes.length)
                    for (var i = 0; i < message.builtCodes.length; ++i)
                        writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.builtCodes[i]);
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.isAgent);
                if (message.extendJson != null && message.hasOwnProperty("extendJson"))
                    writer.uint32(/* id 21, wireType 2 =*/170).string(message.extendJson);
                if (message.agentWX != null && message.hasOwnProperty("agentWX"))
                    writer.uint32(/* id 22, wireType 2 =*/178).string(message.agentWX);
                if (message.customersrvWX != null && message.hasOwnProperty("customersrvWX"))
                    writer.uint32(/* id 23, wireType 2 =*/186).string(message.customersrvWX);
                if (message.suggestionWX != null && message.hasOwnProperty("suggestionWX"))
                    writer.uint32(/* id 24, wireType 2 =*/194).string(message.suggestionWX);
                if (message.scroller != null && message.hasOwnProperty("scroller"))
                    writer.uint32(/* id 25, wireType 2 =*/202).string(message.scroller);
                if (message.activityInfo != null && message.hasOwnProperty("activityInfo"))
                    $root.hall.ActivityInfo.encode(message.activityInfo, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.expireTime);
                return writer;
            };
    
            /**
             * Encodes the specified LoginRsp message, length delimited. Does not implicitly {@link hall.LoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.LoginRsp
             * @static
             * @param {hall.ILoginRsp} message LoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.LoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.LoginRsp} LoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.LoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userInfo = $root.hall.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.userType = reader.uint32();
                        break;
                    case 4:
                        message.isBinded = reader.uint32();
                        break;
                    case 5:
                        message.thirdInfo = reader.string();
                        break;
                    case 6:
                        message.ip = reader.uint32();
                        break;
                    case 8:
                        if (!(message.gameInfos && message.gameInfos.length))
                            message.gameInfos = [];
                        message.gameInfos.push($root.hall.GameInfo.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        message.config = $root.hall.Config.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.proxyUrl = reader.string();
                        break;
                    case 11:
                        message.voiceUrl = reader.string();
                        break;
                    case 12:
                        message.downloadUrl = reader.string();
                        break;
                    case 13:
                        message.shareUrl = reader.string();
                        break;
                    case 14:
                        message.updateUrl = reader.string();
                        break;
                    case 15:
                        message.wechatPay = reader.bool();
                        break;
                    case 16:
                        message.activityUrl = reader.string();
                        break;
                    case 17:
                        message.builtCode = reader.uint32();
                        break;
                    case 18:
                        message.playCode = reader.uint32();
                        break;
                    case 19:
                        if (!(message.builtCodes && message.builtCodes.length))
                            message.builtCodes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.builtCodes.push(reader.uint32());
                        } else
                            message.builtCodes.push(reader.uint32());
                        break;
                    case 20:
                        message.isAgent = reader.bool();
                        break;
                    case 21:
                        message.extendJson = reader.string();
                        break;
                    case 22:
                        message.agentWX = reader.string();
                        break;
                    case 23:
                        message.customersrvWX = reader.string();
                        break;
                    case 24:
                        message.suggestionWX = reader.string();
                        break;
                    case 25:
                        message.scroller = reader.string();
                        break;
                    case 26:
                        message.activityInfo = $root.hall.ActivityInfo.decode(reader, reader.uint32());
                        break;
                    case 27:
                        message.expireTime = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.LoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.LoginRsp} LoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LoginRsp message.
             * @function verify
             * @memberof hall.LoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.userInfo != null && message.hasOwnProperty("userInfo")) {
                    var error = $root.hall.UserInfo.verify(message.userInfo);
                    if (error)
                        return "userInfo." + error;
                }
                if (message.userType != null && message.hasOwnProperty("userType"))
                    if (!$util.isInteger(message.userType))
                        return "userType: integer expected";
                if (message.isBinded != null && message.hasOwnProperty("isBinded"))
                    if (!$util.isInteger(message.isBinded))
                        return "isBinded: integer expected";
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    if (!$util.isString(message.thirdInfo))
                        return "thirdInfo: string expected";
                if (message.ip != null && message.hasOwnProperty("ip"))
                    if (!$util.isInteger(message.ip))
                        return "ip: integer expected";
                if (message.gameInfos != null && message.hasOwnProperty("gameInfos")) {
                    if (!Array.isArray(message.gameInfos))
                        return "gameInfos: array expected";
                    for (var i = 0; i < message.gameInfos.length; ++i) {
                        var error = $root.hall.GameInfo.verify(message.gameInfos[i]);
                        if (error)
                            return "gameInfos." + error;
                    }
                }
                if (message.config != null && message.hasOwnProperty("config")) {
                    var error = $root.hall.Config.verify(message.config);
                    if (error)
                        return "config." + error;
                }
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    if (!$util.isString(message.proxyUrl))
                        return "proxyUrl: string expected";
                if (message.voiceUrl != null && message.hasOwnProperty("voiceUrl"))
                    if (!$util.isString(message.voiceUrl))
                        return "voiceUrl: string expected";
                if (message.downloadUrl != null && message.hasOwnProperty("downloadUrl"))
                    if (!$util.isString(message.downloadUrl))
                        return "downloadUrl: string expected";
                if (message.shareUrl != null && message.hasOwnProperty("shareUrl"))
                    if (!$util.isString(message.shareUrl))
                        return "shareUrl: string expected";
                if (message.updateUrl != null && message.hasOwnProperty("updateUrl"))
                    if (!$util.isString(message.updateUrl))
                        return "updateUrl: string expected";
                if (message.wechatPay != null && message.hasOwnProperty("wechatPay"))
                    if (typeof message.wechatPay !== "boolean")
                        return "wechatPay: boolean expected";
                if (message.activityUrl != null && message.hasOwnProperty("activityUrl"))
                    if (!$util.isString(message.activityUrl))
                        return "activityUrl: string expected";
                if (message.builtCode != null && message.hasOwnProperty("builtCode"))
                    if (!$util.isInteger(message.builtCode))
                        return "builtCode: integer expected";
                if (message.playCode != null && message.hasOwnProperty("playCode"))
                    if (!$util.isInteger(message.playCode))
                        return "playCode: integer expected";
                if (message.builtCodes != null && message.hasOwnProperty("builtCodes")) {
                    if (!Array.isArray(message.builtCodes))
                        return "builtCodes: array expected";
                    for (var i = 0; i < message.builtCodes.length; ++i)
                        if (!$util.isInteger(message.builtCodes[i]))
                            return "builtCodes: integer[] expected";
                }
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    if (typeof message.isAgent !== "boolean")
                        return "isAgent: boolean expected";
                if (message.extendJson != null && message.hasOwnProperty("extendJson"))
                    if (!$util.isString(message.extendJson))
                        return "extendJson: string expected";
                if (message.agentWX != null && message.hasOwnProperty("agentWX"))
                    if (!$util.isString(message.agentWX))
                        return "agentWX: string expected";
                if (message.customersrvWX != null && message.hasOwnProperty("customersrvWX"))
                    if (!$util.isString(message.customersrvWX))
                        return "customersrvWX: string expected";
                if (message.suggestionWX != null && message.hasOwnProperty("suggestionWX"))
                    if (!$util.isString(message.suggestionWX))
                        return "suggestionWX: string expected";
                if (message.scroller != null && message.hasOwnProperty("scroller"))
                    if (!$util.isString(message.scroller))
                        return "scroller: string expected";
                if (message.activityInfo != null && message.hasOwnProperty("activityInfo")) {
                    var error = $root.hall.ActivityInfo.verify(message.activityInfo);
                    if (error)
                        return "activityInfo." + error;
                }
                if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                    if (!$util.isInteger(message.expireTime))
                        return "expireTime: integer expected";
                return null;
            };
    
            /**
             * Creates a LoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.LoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.LoginRsp} LoginRsp
             */
            LoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.LoginRsp)
                    return object;
                var message = new $root.hall.LoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.LoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.userInfo != null) {
                    if (typeof object.userInfo !== "object")
                        throw TypeError(".hall.LoginRsp.userInfo: object expected");
                    message.userInfo = $root.hall.UserInfo.fromObject(object.userInfo);
                }
                if (object.userType != null)
                    message.userType = object.userType >>> 0;
                if (object.isBinded != null)
                    message.isBinded = object.isBinded >>> 0;
                if (object.thirdInfo != null)
                    message.thirdInfo = String(object.thirdInfo);
                if (object.ip != null)
                    message.ip = object.ip >>> 0;
                if (object.gameInfos) {
                    if (!Array.isArray(object.gameInfos))
                        throw TypeError(".hall.LoginRsp.gameInfos: array expected");
                    message.gameInfos = [];
                    for (var i = 0; i < object.gameInfos.length; ++i) {
                        if (typeof object.gameInfos[i] !== "object")
                            throw TypeError(".hall.LoginRsp.gameInfos: object expected");
                        message.gameInfos[i] = $root.hall.GameInfo.fromObject(object.gameInfos[i]);
                    }
                }
                if (object.config != null) {
                    if (typeof object.config !== "object")
                        throw TypeError(".hall.LoginRsp.config: object expected");
                    message.config = $root.hall.Config.fromObject(object.config);
                }
                if (object.proxyUrl != null)
                    message.proxyUrl = String(object.proxyUrl);
                if (object.voiceUrl != null)
                    message.voiceUrl = String(object.voiceUrl);
                if (object.downloadUrl != null)
                    message.downloadUrl = String(object.downloadUrl);
                if (object.shareUrl != null)
                    message.shareUrl = String(object.shareUrl);
                if (object.updateUrl != null)
                    message.updateUrl = String(object.updateUrl);
                if (object.wechatPay != null)
                    message.wechatPay = Boolean(object.wechatPay);
                if (object.activityUrl != null)
                    message.activityUrl = String(object.activityUrl);
                if (object.builtCode != null)
                    message.builtCode = object.builtCode >>> 0;
                if (object.playCode != null)
                    message.playCode = object.playCode >>> 0;
                if (object.builtCodes) {
                    if (!Array.isArray(object.builtCodes))
                        throw TypeError(".hall.LoginRsp.builtCodes: array expected");
                    message.builtCodes = [];
                    for (var i = 0; i < object.builtCodes.length; ++i)
                        message.builtCodes[i] = object.builtCodes[i] >>> 0;
                }
                if (object.isAgent != null)
                    message.isAgent = Boolean(object.isAgent);
                if (object.extendJson != null)
                    message.extendJson = String(object.extendJson);
                if (object.agentWX != null)
                    message.agentWX = String(object.agentWX);
                if (object.customersrvWX != null)
                    message.customersrvWX = String(object.customersrvWX);
                if (object.suggestionWX != null)
                    message.suggestionWX = String(object.suggestionWX);
                if (object.scroller != null)
                    message.scroller = String(object.scroller);
                if (object.activityInfo != null) {
                    if (typeof object.activityInfo !== "object")
                        throw TypeError(".hall.LoginRsp.activityInfo: object expected");
                    message.activityInfo = $root.hall.ActivityInfo.fromObject(object.activityInfo);
                }
                if (object.expireTime != null)
                    message.expireTime = object.expireTime >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.LoginRsp
             * @static
             * @param {hall.LoginRsp} message LoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.gameInfos = [];
                    object.builtCodes = [];
                }
                if (options.defaults) {
                    object.result = null;
                    object.userInfo = null;
                    object.userType = 0;
                    object.isBinded = 0;
                    object.thirdInfo = "";
                    object.ip = 0;
                    object.config = null;
                    object.proxyUrl = "";
                    object.voiceUrl = "";
                    object.downloadUrl = "";
                    object.shareUrl = "";
                    object.updateUrl = "";
                    object.wechatPay = false;
                    object.activityUrl = "";
                    object.builtCode = 0;
                    object.playCode = 0;
                    object.isAgent = false;
                    object.extendJson = "";
                    object.agentWX = "";
                    object.customersrvWX = "";
                    object.suggestionWX = "";
                    object.scroller = "";
                    object.activityInfo = null;
                    object.expireTime = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                    object.userInfo = $root.hall.UserInfo.toObject(message.userInfo, options);
                if (message.userType != null && message.hasOwnProperty("userType"))
                    object.userType = message.userType;
                if (message.isBinded != null && message.hasOwnProperty("isBinded"))
                    object.isBinded = message.isBinded;
                if (message.thirdInfo != null && message.hasOwnProperty("thirdInfo"))
                    object.thirdInfo = message.thirdInfo;
                if (message.ip != null && message.hasOwnProperty("ip"))
                    object.ip = message.ip;
                if (message.gameInfos && message.gameInfos.length) {
                    object.gameInfos = [];
                    for (var j = 0; j < message.gameInfos.length; ++j)
                        object.gameInfos[j] = $root.hall.GameInfo.toObject(message.gameInfos[j], options);
                }
                if (message.config != null && message.hasOwnProperty("config"))
                    object.config = $root.hall.Config.toObject(message.config, options);
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    object.proxyUrl = message.proxyUrl;
                if (message.voiceUrl != null && message.hasOwnProperty("voiceUrl"))
                    object.voiceUrl = message.voiceUrl;
                if (message.downloadUrl != null && message.hasOwnProperty("downloadUrl"))
                    object.downloadUrl = message.downloadUrl;
                if (message.shareUrl != null && message.hasOwnProperty("shareUrl"))
                    object.shareUrl = message.shareUrl;
                if (message.updateUrl != null && message.hasOwnProperty("updateUrl"))
                    object.updateUrl = message.updateUrl;
                if (message.wechatPay != null && message.hasOwnProperty("wechatPay"))
                    object.wechatPay = message.wechatPay;
                if (message.activityUrl != null && message.hasOwnProperty("activityUrl"))
                    object.activityUrl = message.activityUrl;
                if (message.builtCode != null && message.hasOwnProperty("builtCode"))
                    object.builtCode = message.builtCode;
                if (message.playCode != null && message.hasOwnProperty("playCode"))
                    object.playCode = message.playCode;
                if (message.builtCodes && message.builtCodes.length) {
                    object.builtCodes = [];
                    for (var j = 0; j < message.builtCodes.length; ++j)
                        object.builtCodes[j] = message.builtCodes[j];
                }
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    object.isAgent = message.isAgent;
                if (message.extendJson != null && message.hasOwnProperty("extendJson"))
                    object.extendJson = message.extendJson;
                if (message.agentWX != null && message.hasOwnProperty("agentWX"))
                    object.agentWX = message.agentWX;
                if (message.customersrvWX != null && message.hasOwnProperty("customersrvWX"))
                    object.customersrvWX = message.customersrvWX;
                if (message.suggestionWX != null && message.hasOwnProperty("suggestionWX"))
                    object.suggestionWX = message.suggestionWX;
                if (message.scroller != null && message.hasOwnProperty("scroller"))
                    object.scroller = message.scroller;
                if (message.activityInfo != null && message.hasOwnProperty("activityInfo"))
                    object.activityInfo = $root.hall.ActivityInfo.toObject(message.activityInfo, options);
                if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                    object.expireTime = message.expireTime;
                return object;
            };
    
            /**
             * Converts this LoginRsp to JSON.
             * @function toJSON
             * @memberof hall.LoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LoginRsp;
        })();
    
        hall.GameInfoReq = (function() {
    
            /**
             * Properties of a GameInfoReq.
             * @memberof hall
             * @interface IGameInfoReq
             * @property {common.IRequest} request GameInfoReq request
             */
    
            /**
             * Constructs a new GameInfoReq.
             * @memberof hall
             * @classdesc Represents a GameInfoReq.
             * @implements IGameInfoReq
             * @constructor
             * @param {hall.IGameInfoReq=} [properties] Properties to set
             */
            function GameInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.GameInfoReq
             * @instance
             */
            GameInfoReq.prototype.request = null;
    
            /**
             * Creates a new GameInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.GameInfoReq
             * @static
             * @param {hall.IGameInfoReq=} [properties] Properties to set
             * @returns {hall.GameInfoReq} GameInfoReq instance
             */
            GameInfoReq.create = function create(properties) {
                return new GameInfoReq(properties);
            };
    
            /**
             * Encodes the specified GameInfoReq message. Does not implicitly {@link hall.GameInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.GameInfoReq
             * @static
             * @param {hall.IGameInfoReq} message GameInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified GameInfoReq message, length delimited. Does not implicitly {@link hall.GameInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.GameInfoReq
             * @static
             * @param {hall.IGameInfoReq} message GameInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.GameInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.GameInfoReq} GameInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.GameInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a GameInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.GameInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.GameInfoReq} GameInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameInfoReq message.
             * @function verify
             * @memberof hall.GameInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a GameInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.GameInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.GameInfoReq} GameInfoReq
             */
            GameInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.GameInfoReq)
                    return object;
                var message = new $root.hall.GameInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.GameInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a GameInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.GameInfoReq
             * @static
             * @param {hall.GameInfoReq} message GameInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this GameInfoReq to JSON.
             * @function toJSON
             * @memberof hall.GameInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameInfoReq;
        })();
    
        hall.GameInfo = (function() {
    
            /**
             * Properties of a GameInfo.
             * @memberof hall
             * @interface IGameInfo
             * @property {number|null} [id] GameInfo id
             * @property {string|null} [name] GameInfo name
             * @property {number|null} [type] GameInfo type
             * @property {string|null} [online] GameInfo online
             * @property {number|null} [flag] GameInfo flag
             */
    
            /**
             * Constructs a new GameInfo.
             * @memberof hall
             * @classdesc Represents a GameInfo.
             * @implements IGameInfo
             * @constructor
             * @param {hall.IGameInfo=} [properties] Properties to set
             */
            function GameInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameInfo id.
             * @member {number} id
             * @memberof hall.GameInfo
             * @instance
             */
            GameInfo.prototype.id = 0;
    
            /**
             * GameInfo name.
             * @member {string} name
             * @memberof hall.GameInfo
             * @instance
             */
            GameInfo.prototype.name = "";
    
            /**
             * GameInfo type.
             * @member {number} type
             * @memberof hall.GameInfo
             * @instance
             */
            GameInfo.prototype.type = 0;
    
            /**
             * GameInfo online.
             * @member {string} online
             * @memberof hall.GameInfo
             * @instance
             */
            GameInfo.prototype.online = "";
    
            /**
             * GameInfo flag.
             * @member {number} flag
             * @memberof hall.GameInfo
             * @instance
             */
            GameInfo.prototype.flag = 0;
    
            /**
             * Creates a new GameInfo instance using the specified properties.
             * @function create
             * @memberof hall.GameInfo
             * @static
             * @param {hall.IGameInfo=} [properties] Properties to set
             * @returns {hall.GameInfo} GameInfo instance
             */
            GameInfo.create = function create(properties) {
                return new GameInfo(properties);
            };
    
            /**
             * Encodes the specified GameInfo message. Does not implicitly {@link hall.GameInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.GameInfo
             * @static
             * @param {hall.IGameInfo} message GameInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.online);
                if (message.flag != null && message.hasOwnProperty("flag"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.flag);
                return writer;
            };
    
            /**
             * Encodes the specified GameInfo message, length delimited. Does not implicitly {@link hall.GameInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.GameInfo
             * @static
             * @param {hall.IGameInfo} message GameInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.GameInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.GameInfo} GameInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.GameInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.type = reader.uint32();
                        break;
                    case 4:
                        message.online = reader.string();
                        break;
                    case 5:
                        message.flag = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.GameInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.GameInfo} GameInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameInfo message.
             * @function verify
             * @memberof hall.GameInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (!$util.isString(message.online))
                        return "online: string expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isInteger(message.flag))
                        return "flag: integer expected";
                return null;
            };
    
            /**
             * Creates a GameInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.GameInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.GameInfo} GameInfo
             */
            GameInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.GameInfo)
                    return object;
                var message = new $root.hall.GameInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.online != null)
                    message.online = String(object.online);
                if (object.flag != null)
                    message.flag = object.flag >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a GameInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.GameInfo
             * @static
             * @param {hall.GameInfo} message GameInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.type = 0;
                    object.online = "";
                    object.flag = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                return object;
            };
    
            /**
             * Converts this GameInfo to JSON.
             * @function toJSON
             * @memberof hall.GameInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameInfo;
        })();
    
        hall.GameInfoRsp = (function() {
    
            /**
             * Properties of a GameInfoRsp.
             * @memberof hall
             * @interface IGameInfoRsp
             * @property {common.IResult|null} [result] GameInfoRsp result
             * @property {Array.<hall.IGameInfo>|null} [gameInfos] GameInfoRsp gameInfos
             */
    
            /**
             * Constructs a new GameInfoRsp.
             * @memberof hall
             * @classdesc Represents a GameInfoRsp.
             * @implements IGameInfoRsp
             * @constructor
             * @param {hall.IGameInfoRsp=} [properties] Properties to set
             */
            function GameInfoRsp(properties) {
                this.gameInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.GameInfoRsp
             * @instance
             */
            GameInfoRsp.prototype.result = null;
    
            /**
             * GameInfoRsp gameInfos.
             * @member {Array.<hall.IGameInfo>} gameInfos
             * @memberof hall.GameInfoRsp
             * @instance
             */
            GameInfoRsp.prototype.gameInfos = $util.emptyArray;
    
            /**
             * Creates a new GameInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.GameInfoRsp
             * @static
             * @param {hall.IGameInfoRsp=} [properties] Properties to set
             * @returns {hall.GameInfoRsp} GameInfoRsp instance
             */
            GameInfoRsp.create = function create(properties) {
                return new GameInfoRsp(properties);
            };
    
            /**
             * Encodes the specified GameInfoRsp message. Does not implicitly {@link hall.GameInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.GameInfoRsp
             * @static
             * @param {hall.IGameInfoRsp} message GameInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameInfos != null && message.gameInfos.length)
                    for (var i = 0; i < message.gameInfos.length; ++i)
                        $root.hall.GameInfo.encode(message.gameInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified GameInfoRsp message, length delimited. Does not implicitly {@link hall.GameInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.GameInfoRsp
             * @static
             * @param {hall.IGameInfoRsp} message GameInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.GameInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.GameInfoRsp} GameInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.GameInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.gameInfos && message.gameInfos.length))
                            message.gameInfos = [];
                        message.gameInfos.push($root.hall.GameInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.GameInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.GameInfoRsp} GameInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameInfoRsp message.
             * @function verify
             * @memberof hall.GameInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameInfos != null && message.hasOwnProperty("gameInfos")) {
                    if (!Array.isArray(message.gameInfos))
                        return "gameInfos: array expected";
                    for (var i = 0; i < message.gameInfos.length; ++i) {
                        var error = $root.hall.GameInfo.verify(message.gameInfos[i]);
                        if (error)
                            return "gameInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a GameInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.GameInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.GameInfoRsp} GameInfoRsp
             */
            GameInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.GameInfoRsp)
                    return object;
                var message = new $root.hall.GameInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.GameInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameInfos) {
                    if (!Array.isArray(object.gameInfos))
                        throw TypeError(".hall.GameInfoRsp.gameInfos: array expected");
                    message.gameInfos = [];
                    for (var i = 0; i < object.gameInfos.length; ++i) {
                        if (typeof object.gameInfos[i] !== "object")
                            throw TypeError(".hall.GameInfoRsp.gameInfos: object expected");
                        message.gameInfos[i] = $root.hall.GameInfo.fromObject(object.gameInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a GameInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.GameInfoRsp
             * @static
             * @param {hall.GameInfoRsp} message GameInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.gameInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameInfos && message.gameInfos.length) {
                    object.gameInfos = [];
                    for (var j = 0; j < message.gameInfos.length; ++j)
                        object.gameInfos[j] = $root.hall.GameInfo.toObject(message.gameInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this GameInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.GameInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameInfoRsp;
        })();
    
        hall.RankInfoReq = (function() {
    
            /**
             * Properties of a RankInfoReq.
             * @memberof hall
             * @interface IRankInfoReq
             * @property {common.IRequest} request RankInfoReq request
             * @property {number|null} [ver] RankInfoReq ver
             * @property {number|null} [name] RankInfoReq name
             */
    
            /**
             * Constructs a new RankInfoReq.
             * @memberof hall
             * @classdesc Represents a RankInfoReq.
             * @implements IRankInfoReq
             * @constructor
             * @param {hall.IRankInfoReq=} [properties] Properties to set
             */
            function RankInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RankInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.RankInfoReq
             * @instance
             */
            RankInfoReq.prototype.request = null;
    
            /**
             * RankInfoReq ver.
             * @member {number} ver
             * @memberof hall.RankInfoReq
             * @instance
             */
            RankInfoReq.prototype.ver = 0;
    
            /**
             * RankInfoReq name.
             * @member {number} name
             * @memberof hall.RankInfoReq
             * @instance
             */
            RankInfoReq.prototype.name = 0;
    
            /**
             * Creates a new RankInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.RankInfoReq
             * @static
             * @param {hall.IRankInfoReq=} [properties] Properties to set
             * @returns {hall.RankInfoReq} RankInfoReq instance
             */
            RankInfoReq.create = function create(properties) {
                return new RankInfoReq(properties);
            };
    
            /**
             * Encodes the specified RankInfoReq message. Does not implicitly {@link hall.RankInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.RankInfoReq
             * @static
             * @param {hall.IRankInfoReq} message RankInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.ver != null && message.hasOwnProperty("ver"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ver);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.name);
                return writer;
            };
    
            /**
             * Encodes the specified RankInfoReq message, length delimited. Does not implicitly {@link hall.RankInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RankInfoReq
             * @static
             * @param {hall.IRankInfoReq} message RankInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RankInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RankInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RankInfoReq} RankInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RankInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.ver = reader.uint32();
                        break;
                    case 3:
                        message.name = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RankInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RankInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RankInfoReq} RankInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RankInfoReq message.
             * @function verify
             * @memberof hall.RankInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RankInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.ver != null && message.hasOwnProperty("ver"))
                    if (!$util.isInteger(message.ver))
                        return "ver: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isInteger(message.name))
                        return "name: integer expected";
                return null;
            };
    
            /**
             * Creates a RankInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RankInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RankInfoReq} RankInfoReq
             */
            RankInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RankInfoReq)
                    return object;
                var message = new $root.hall.RankInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.RankInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.ver != null)
                    message.ver = object.ver >>> 0;
                if (object.name != null)
                    message.name = object.name >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RankInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RankInfoReq
             * @static
             * @param {hall.RankInfoReq} message RankInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RankInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.ver = 0;
                    object.name = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.ver != null && message.hasOwnProperty("ver"))
                    object.ver = message.ver;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                return object;
            };
    
            /**
             * Converts this RankInfoReq to JSON.
             * @function toJSON
             * @memberof hall.RankInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RankInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RankInfoReq;
        })();
    
        hall.RankPlayer = (function() {
    
            /**
             * Properties of a RankPlayer.
             * @memberof hall
             * @interface IRankPlayer
             * @property {common.IPlayerInfo|null} [playerInfo] RankPlayer playerInfo
             * @property {number|null} [earnMoney] RankPlayer earnMoney
             * @property {number|null} [earnCharm] RankPlayer earnCharm
             */
    
            /**
             * Constructs a new RankPlayer.
             * @memberof hall
             * @classdesc Represents a RankPlayer.
             * @implements IRankPlayer
             * @constructor
             * @param {hall.IRankPlayer=} [properties] Properties to set
             */
            function RankPlayer(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RankPlayer playerInfo.
             * @member {common.IPlayerInfo|null|undefined} playerInfo
             * @memberof hall.RankPlayer
             * @instance
             */
            RankPlayer.prototype.playerInfo = null;
    
            /**
             * RankPlayer earnMoney.
             * @member {number} earnMoney
             * @memberof hall.RankPlayer
             * @instance
             */
            RankPlayer.prototype.earnMoney = 0;
    
            /**
             * RankPlayer earnCharm.
             * @member {number} earnCharm
             * @memberof hall.RankPlayer
             * @instance
             */
            RankPlayer.prototype.earnCharm = 0;
    
            /**
             * Creates a new RankPlayer instance using the specified properties.
             * @function create
             * @memberof hall.RankPlayer
             * @static
             * @param {hall.IRankPlayer=} [properties] Properties to set
             * @returns {hall.RankPlayer} RankPlayer instance
             */
            RankPlayer.create = function create(properties) {
                return new RankPlayer(properties);
            };
    
            /**
             * Encodes the specified RankPlayer message. Does not implicitly {@link hall.RankPlayer.verify|verify} messages.
             * @function encode
             * @memberof hall.RankPlayer
             * @static
             * @param {hall.IRankPlayer} message RankPlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankPlayer.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    $root.common.PlayerInfo.encode(message.playerInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.earnMoney != null && message.hasOwnProperty("earnMoney"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.earnMoney);
                if (message.earnCharm != null && message.hasOwnProperty("earnCharm"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.earnCharm);
                return writer;
            };
    
            /**
             * Encodes the specified RankPlayer message, length delimited. Does not implicitly {@link hall.RankPlayer.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RankPlayer
             * @static
             * @param {hall.IRankPlayer} message RankPlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankPlayer.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RankPlayer message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RankPlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RankPlayer} RankPlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankPlayer.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RankPlayer();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.playerInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.earnMoney = reader.uint32();
                        break;
                    case 3:
                        message.earnCharm = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RankPlayer message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RankPlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RankPlayer} RankPlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankPlayer.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RankPlayer message.
             * @function verify
             * @memberof hall.RankPlayer
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RankPlayer.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
                    var error = $root.common.PlayerInfo.verify(message.playerInfo);
                    if (error)
                        return "playerInfo." + error;
                }
                if (message.earnMoney != null && message.hasOwnProperty("earnMoney"))
                    if (!$util.isInteger(message.earnMoney))
                        return "earnMoney: integer expected";
                if (message.earnCharm != null && message.hasOwnProperty("earnCharm"))
                    if (!$util.isInteger(message.earnCharm))
                        return "earnCharm: integer expected";
                return null;
            };
    
            /**
             * Creates a RankPlayer message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RankPlayer
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RankPlayer} RankPlayer
             */
            RankPlayer.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RankPlayer)
                    return object;
                var message = new $root.hall.RankPlayer();
                if (object.playerInfo != null) {
                    if (typeof object.playerInfo !== "object")
                        throw TypeError(".hall.RankPlayer.playerInfo: object expected");
                    message.playerInfo = $root.common.PlayerInfo.fromObject(object.playerInfo);
                }
                if (object.earnMoney != null)
                    message.earnMoney = object.earnMoney >>> 0;
                if (object.earnCharm != null)
                    message.earnCharm = object.earnCharm >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RankPlayer message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RankPlayer
             * @static
             * @param {hall.RankPlayer} message RankPlayer
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RankPlayer.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.playerInfo = null;
                    object.earnMoney = 0;
                    object.earnCharm = 0;
                }
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    object.playerInfo = $root.common.PlayerInfo.toObject(message.playerInfo, options);
                if (message.earnMoney != null && message.hasOwnProperty("earnMoney"))
                    object.earnMoney = message.earnMoney;
                if (message.earnCharm != null && message.hasOwnProperty("earnCharm"))
                    object.earnCharm = message.earnCharm;
                return object;
            };
    
            /**
             * Converts this RankPlayer to JSON.
             * @function toJSON
             * @memberof hall.RankPlayer
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RankPlayer.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RankPlayer;
        })();
    
        hall.RankInfoRsp = (function() {
    
            /**
             * Properties of a RankInfoRsp.
             * @memberof hall
             * @interface IRankInfoRsp
             * @property {common.IResult|null} [result] RankInfoRsp result
             * @property {number|null} [name] RankInfoRsp name
             * @property {number|null} [ver] RankInfoRsp ver
             * @property {Array.<hall.IRankPlayer>|null} [players] RankInfoRsp players
             */
    
            /**
             * Constructs a new RankInfoRsp.
             * @memberof hall
             * @classdesc Represents a RankInfoRsp.
             * @implements IRankInfoRsp
             * @constructor
             * @param {hall.IRankInfoRsp=} [properties] Properties to set
             */
            function RankInfoRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RankInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.RankInfoRsp
             * @instance
             */
            RankInfoRsp.prototype.result = null;
    
            /**
             * RankInfoRsp name.
             * @member {number} name
             * @memberof hall.RankInfoRsp
             * @instance
             */
            RankInfoRsp.prototype.name = 0;
    
            /**
             * RankInfoRsp ver.
             * @member {number} ver
             * @memberof hall.RankInfoRsp
             * @instance
             */
            RankInfoRsp.prototype.ver = 0;
    
            /**
             * RankInfoRsp players.
             * @member {Array.<hall.IRankPlayer>} players
             * @memberof hall.RankInfoRsp
             * @instance
             */
            RankInfoRsp.prototype.players = $util.emptyArray;
    
            /**
             * Creates a new RankInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.RankInfoRsp
             * @static
             * @param {hall.IRankInfoRsp=} [properties] Properties to set
             * @returns {hall.RankInfoRsp} RankInfoRsp instance
             */
            RankInfoRsp.create = function create(properties) {
                return new RankInfoRsp(properties);
            };
    
            /**
             * Encodes the specified RankInfoRsp message. Does not implicitly {@link hall.RankInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.RankInfoRsp
             * @static
             * @param {hall.IRankInfoRsp} message RankInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.name);
                if (message.ver != null && message.hasOwnProperty("ver"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ver);
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.hall.RankPlayer.encode(message.players[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RankInfoRsp message, length delimited. Does not implicitly {@link hall.RankInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RankInfoRsp
             * @static
             * @param {hall.IRankInfoRsp} message RankInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RankInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RankInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RankInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RankInfoRsp} RankInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RankInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.name = reader.uint32();
                        break;
                    case 3:
                        message.ver = reader.uint32();
                        break;
                    case 4:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.hall.RankPlayer.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RankInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RankInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RankInfoRsp} RankInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RankInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RankInfoRsp message.
             * @function verify
             * @memberof hall.RankInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RankInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isInteger(message.name))
                        return "name: integer expected";
                if (message.ver != null && message.hasOwnProperty("ver"))
                    if (!$util.isInteger(message.ver))
                        return "ver: integer expected";
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.hall.RankPlayer.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a RankInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RankInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RankInfoRsp} RankInfoRsp
             */
            RankInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RankInfoRsp)
                    return object;
                var message = new $root.hall.RankInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.RankInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.name != null)
                    message.name = object.name >>> 0;
                if (object.ver != null)
                    message.ver = object.ver >>> 0;
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".hall.RankInfoRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".hall.RankInfoRsp.players: object expected");
                        message.players[i] = $root.hall.RankPlayer.fromObject(object.players[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RankInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RankInfoRsp
             * @static
             * @param {hall.RankInfoRsp} message RankInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RankInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults) {
                    object.result = null;
                    object.name = 0;
                    object.ver = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.ver != null && message.hasOwnProperty("ver"))
                    object.ver = message.ver;
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.hall.RankPlayer.toObject(message.players[j], options);
                }
                return object;
            };
    
            /**
             * Converts this RankInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.RankInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RankInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RankInfoRsp;
        })();
    
        hall.TaskInfoReq = (function() {
    
            /**
             * Properties of a TaskInfoReq.
             * @memberof hall
             * @interface ITaskInfoReq
             * @property {common.IRequest} request TaskInfoReq request
             */
    
            /**
             * Constructs a new TaskInfoReq.
             * @memberof hall
             * @classdesc Represents a TaskInfoReq.
             * @implements ITaskInfoReq
             * @constructor
             * @param {hall.ITaskInfoReq=} [properties] Properties to set
             */
            function TaskInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TaskInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.TaskInfoReq
             * @instance
             */
            TaskInfoReq.prototype.request = null;
    
            /**
             * Creates a new TaskInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.TaskInfoReq
             * @static
             * @param {hall.ITaskInfoReq=} [properties] Properties to set
             * @returns {hall.TaskInfoReq} TaskInfoReq instance
             */
            TaskInfoReq.create = function create(properties) {
                return new TaskInfoReq(properties);
            };
    
            /**
             * Encodes the specified TaskInfoReq message. Does not implicitly {@link hall.TaskInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.TaskInfoReq
             * @static
             * @param {hall.ITaskInfoReq} message TaskInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TaskInfoReq message, length delimited. Does not implicitly {@link hall.TaskInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TaskInfoReq
             * @static
             * @param {hall.ITaskInfoReq} message TaskInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TaskInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TaskInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TaskInfoReq} TaskInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TaskInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a TaskInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TaskInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TaskInfoReq} TaskInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TaskInfoReq message.
             * @function verify
             * @memberof hall.TaskInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TaskInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a TaskInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TaskInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TaskInfoReq} TaskInfoReq
             */
            TaskInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TaskInfoReq)
                    return object;
                var message = new $root.hall.TaskInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.TaskInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TaskInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TaskInfoReq
             * @static
             * @param {hall.TaskInfoReq} message TaskInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TaskInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this TaskInfoReq to JSON.
             * @function toJSON
             * @memberof hall.TaskInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TaskInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TaskInfoReq;
        })();
    
        hall.SingleTaskInfo = (function() {
    
            /**
             * Properties of a SingleTaskInfo.
             * @memberof hall
             * @interface ISingleTaskInfo
             * @property {number|null} [id] SingleTaskInfo id
             * @property {string|null} [name] SingleTaskInfo name
             * @property {string|null} [award] SingleTaskInfo award
             * @property {number|null} [status] SingleTaskInfo status
             * @property {string|null} [title] SingleTaskInfo title
             * @property {number|null} [target] SingleTaskInfo target
             * @property {number|null} [nowP] SingleTaskInfo nowP
             */
    
            /**
             * Constructs a new SingleTaskInfo.
             * @memberof hall
             * @classdesc Represents a SingleTaskInfo.
             * @implements ISingleTaskInfo
             * @constructor
             * @param {hall.ISingleTaskInfo=} [properties] Properties to set
             */
            function SingleTaskInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SingleTaskInfo id.
             * @member {number} id
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.id = 0;
    
            /**
             * SingleTaskInfo name.
             * @member {string} name
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.name = "";
    
            /**
             * SingleTaskInfo award.
             * @member {string} award
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.award = "";
    
            /**
             * SingleTaskInfo status.
             * @member {number} status
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.status = 0;
    
            /**
             * SingleTaskInfo title.
             * @member {string} title
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.title = "";
    
            /**
             * SingleTaskInfo target.
             * @member {number} target
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.target = 0;
    
            /**
             * SingleTaskInfo nowP.
             * @member {number} nowP
             * @memberof hall.SingleTaskInfo
             * @instance
             */
            SingleTaskInfo.prototype.nowP = 0;
    
            /**
             * Creates a new SingleTaskInfo instance using the specified properties.
             * @function create
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {hall.ISingleTaskInfo=} [properties] Properties to set
             * @returns {hall.SingleTaskInfo} SingleTaskInfo instance
             */
            SingleTaskInfo.create = function create(properties) {
                return new SingleTaskInfo(properties);
            };
    
            /**
             * Encodes the specified SingleTaskInfo message. Does not implicitly {@link hall.SingleTaskInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {hall.ISingleTaskInfo} message SingleTaskInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SingleTaskInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.award != null && message.hasOwnProperty("award"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.award);
                if (message.status != null && message.hasOwnProperty("status"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.status);
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.title);
                if (message.target != null && message.hasOwnProperty("target"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.target);
                if (message.nowP != null && message.hasOwnProperty("nowP"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.nowP);
                return writer;
            };
    
            /**
             * Encodes the specified SingleTaskInfo message, length delimited. Does not implicitly {@link hall.SingleTaskInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {hall.ISingleTaskInfo} message SingleTaskInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SingleTaskInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SingleTaskInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SingleTaskInfo} SingleTaskInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SingleTaskInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SingleTaskInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.award = reader.string();
                        break;
                    case 4:
                        message.status = reader.uint32();
                        break;
                    case 5:
                        message.title = reader.string();
                        break;
                    case 6:
                        message.target = reader.uint32();
                        break;
                    case 7:
                        message.nowP = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SingleTaskInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SingleTaskInfo} SingleTaskInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SingleTaskInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SingleTaskInfo message.
             * @function verify
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SingleTaskInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.award != null && message.hasOwnProperty("award"))
                    if (!$util.isString(message.award))
                        return "award: string expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.target != null && message.hasOwnProperty("target"))
                    if (!$util.isInteger(message.target))
                        return "target: integer expected";
                if (message.nowP != null && message.hasOwnProperty("nowP"))
                    if (!$util.isInteger(message.nowP))
                        return "nowP: integer expected";
                return null;
            };
    
            /**
             * Creates a SingleTaskInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SingleTaskInfo} SingleTaskInfo
             */
            SingleTaskInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SingleTaskInfo)
                    return object;
                var message = new $root.hall.SingleTaskInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.award != null)
                    message.award = String(object.award);
                if (object.status != null)
                    message.status = object.status >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.target != null)
                    message.target = object.target >>> 0;
                if (object.nowP != null)
                    message.nowP = object.nowP >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SingleTaskInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SingleTaskInfo
             * @static
             * @param {hall.SingleTaskInfo} message SingleTaskInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SingleTaskInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.award = "";
                    object.status = 0;
                    object.title = "";
                    object.target = 0;
                    object.nowP = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.award != null && message.hasOwnProperty("award"))
                    object.award = message.award;
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.target != null && message.hasOwnProperty("target"))
                    object.target = message.target;
                if (message.nowP != null && message.hasOwnProperty("nowP"))
                    object.nowP = message.nowP;
                return object;
            };
    
            /**
             * Converts this SingleTaskInfo to JSON.
             * @function toJSON
             * @memberof hall.SingleTaskInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SingleTaskInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SingleTaskInfo;
        })();
    
        hall.TaskInfoRsp = (function() {
    
            /**
             * Properties of a TaskInfoRsp.
             * @memberof hall
             * @interface ITaskInfoRsp
             * @property {common.IResult|null} [result] TaskInfoRsp result
             * @property {Array.<hall.ISingleTaskInfo>|null} [tasks] TaskInfoRsp tasks
             */
    
            /**
             * Constructs a new TaskInfoRsp.
             * @memberof hall
             * @classdesc Represents a TaskInfoRsp.
             * @implements ITaskInfoRsp
             * @constructor
             * @param {hall.ITaskInfoRsp=} [properties] Properties to set
             */
            function TaskInfoRsp(properties) {
                this.tasks = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TaskInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.TaskInfoRsp
             * @instance
             */
            TaskInfoRsp.prototype.result = null;
    
            /**
             * TaskInfoRsp tasks.
             * @member {Array.<hall.ISingleTaskInfo>} tasks
             * @memberof hall.TaskInfoRsp
             * @instance
             */
            TaskInfoRsp.prototype.tasks = $util.emptyArray;
    
            /**
             * Creates a new TaskInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {hall.ITaskInfoRsp=} [properties] Properties to set
             * @returns {hall.TaskInfoRsp} TaskInfoRsp instance
             */
            TaskInfoRsp.create = function create(properties) {
                return new TaskInfoRsp(properties);
            };
    
            /**
             * Encodes the specified TaskInfoRsp message. Does not implicitly {@link hall.TaskInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {hall.ITaskInfoRsp} message TaskInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.tasks != null && message.tasks.length)
                    for (var i = 0; i < message.tasks.length; ++i)
                        $root.hall.SingleTaskInfo.encode(message.tasks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TaskInfoRsp message, length delimited. Does not implicitly {@link hall.TaskInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {hall.ITaskInfoRsp} message TaskInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TaskInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TaskInfoRsp} TaskInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TaskInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.tasks && message.tasks.length))
                            message.tasks = [];
                        message.tasks.push($root.hall.SingleTaskInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TaskInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TaskInfoRsp} TaskInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TaskInfoRsp message.
             * @function verify
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TaskInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.tasks != null && message.hasOwnProperty("tasks")) {
                    if (!Array.isArray(message.tasks))
                        return "tasks: array expected";
                    for (var i = 0; i < message.tasks.length; ++i) {
                        var error = $root.hall.SingleTaskInfo.verify(message.tasks[i]);
                        if (error)
                            return "tasks." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a TaskInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TaskInfoRsp} TaskInfoRsp
             */
            TaskInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TaskInfoRsp)
                    return object;
                var message = new $root.hall.TaskInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.TaskInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.tasks) {
                    if (!Array.isArray(object.tasks))
                        throw TypeError(".hall.TaskInfoRsp.tasks: array expected");
                    message.tasks = [];
                    for (var i = 0; i < object.tasks.length; ++i) {
                        if (typeof object.tasks[i] !== "object")
                            throw TypeError(".hall.TaskInfoRsp.tasks: object expected");
                        message.tasks[i] = $root.hall.SingleTaskInfo.fromObject(object.tasks[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TaskInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TaskInfoRsp
             * @static
             * @param {hall.TaskInfoRsp} message TaskInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TaskInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.tasks = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.tasks && message.tasks.length) {
                    object.tasks = [];
                    for (var j = 0; j < message.tasks.length; ++j)
                        object.tasks[j] = $root.hall.SingleTaskInfo.toObject(message.tasks[j], options);
                }
                return object;
            };
    
            /**
             * Converts this TaskInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.TaskInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TaskInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TaskInfoRsp;
        })();
    
        hall.TaskAwardReq = (function() {
    
            /**
             * Properties of a TaskAwardReq.
             * @memberof hall
             * @interface ITaskAwardReq
             * @property {common.IRequest} request TaskAwardReq request
             * @property {number|null} [id] TaskAwardReq id
             */
    
            /**
             * Constructs a new TaskAwardReq.
             * @memberof hall
             * @classdesc Represents a TaskAwardReq.
             * @implements ITaskAwardReq
             * @constructor
             * @param {hall.ITaskAwardReq=} [properties] Properties to set
             */
            function TaskAwardReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TaskAwardReq request.
             * @member {common.IRequest} request
             * @memberof hall.TaskAwardReq
             * @instance
             */
            TaskAwardReq.prototype.request = null;
    
            /**
             * TaskAwardReq id.
             * @member {number} id
             * @memberof hall.TaskAwardReq
             * @instance
             */
            TaskAwardReq.prototype.id = 0;
    
            /**
             * Creates a new TaskAwardReq instance using the specified properties.
             * @function create
             * @memberof hall.TaskAwardReq
             * @static
             * @param {hall.ITaskAwardReq=} [properties] Properties to set
             * @returns {hall.TaskAwardReq} TaskAwardReq instance
             */
            TaskAwardReq.create = function create(properties) {
                return new TaskAwardReq(properties);
            };
    
            /**
             * Encodes the specified TaskAwardReq message. Does not implicitly {@link hall.TaskAwardReq.verify|verify} messages.
             * @function encode
             * @memberof hall.TaskAwardReq
             * @static
             * @param {hall.ITaskAwardReq} message TaskAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskAwardReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified TaskAwardReq message, length delimited. Does not implicitly {@link hall.TaskAwardReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TaskAwardReq
             * @static
             * @param {hall.ITaskAwardReq} message TaskAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskAwardReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TaskAwardReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TaskAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TaskAwardReq} TaskAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskAwardReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TaskAwardReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a TaskAwardReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TaskAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TaskAwardReq} TaskAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskAwardReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TaskAwardReq message.
             * @function verify
             * @memberof hall.TaskAwardReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TaskAwardReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a TaskAwardReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TaskAwardReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TaskAwardReq} TaskAwardReq
             */
            TaskAwardReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TaskAwardReq)
                    return object;
                var message = new $root.hall.TaskAwardReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.TaskAwardReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TaskAwardReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TaskAwardReq
             * @static
             * @param {hall.TaskAwardReq} message TaskAwardReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TaskAwardReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this TaskAwardReq to JSON.
             * @function toJSON
             * @memberof hall.TaskAwardReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TaskAwardReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TaskAwardReq;
        })();
    
        hall.TaskAwardRsp = (function() {
    
            /**
             * Properties of a TaskAwardRsp.
             * @memberof hall
             * @interface ITaskAwardRsp
             * @property {common.IResult|null} [result] TaskAwardRsp result
             * @property {number|Long|null} [awardMoney] TaskAwardRsp awardMoney
             * @property {number|null} [id] TaskAwardRsp id
             * @property {hall.ISingleTaskInfo|null} [nextTask] TaskAwardRsp nextTask
             */
    
            /**
             * Constructs a new TaskAwardRsp.
             * @memberof hall
             * @classdesc Represents a TaskAwardRsp.
             * @implements ITaskAwardRsp
             * @constructor
             * @param {hall.ITaskAwardRsp=} [properties] Properties to set
             */
            function TaskAwardRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TaskAwardRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.TaskAwardRsp
             * @instance
             */
            TaskAwardRsp.prototype.result = null;
    
            /**
             * TaskAwardRsp awardMoney.
             * @member {number|Long} awardMoney
             * @memberof hall.TaskAwardRsp
             * @instance
             */
            TaskAwardRsp.prototype.awardMoney = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * TaskAwardRsp id.
             * @member {number} id
             * @memberof hall.TaskAwardRsp
             * @instance
             */
            TaskAwardRsp.prototype.id = 0;
    
            /**
             * TaskAwardRsp nextTask.
             * @member {hall.ISingleTaskInfo|null|undefined} nextTask
             * @memberof hall.TaskAwardRsp
             * @instance
             */
            TaskAwardRsp.prototype.nextTask = null;
    
            /**
             * Creates a new TaskAwardRsp instance using the specified properties.
             * @function create
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {hall.ITaskAwardRsp=} [properties] Properties to set
             * @returns {hall.TaskAwardRsp} TaskAwardRsp instance
             */
            TaskAwardRsp.create = function create(properties) {
                return new TaskAwardRsp(properties);
            };
    
            /**
             * Encodes the specified TaskAwardRsp message. Does not implicitly {@link hall.TaskAwardRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {hall.ITaskAwardRsp} message TaskAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskAwardRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.awardMoney);
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
                if (message.nextTask != null && message.hasOwnProperty("nextTask"))
                    $root.hall.SingleTaskInfo.encode(message.nextTask, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TaskAwardRsp message, length delimited. Does not implicitly {@link hall.TaskAwardRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {hall.ITaskAwardRsp} message TaskAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TaskAwardRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TaskAwardRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TaskAwardRsp} TaskAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskAwardRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TaskAwardRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.awardMoney = reader.uint64();
                        break;
                    case 3:
                        message.id = reader.uint32();
                        break;
                    case 4:
                        message.nextTask = $root.hall.SingleTaskInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TaskAwardRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TaskAwardRsp} TaskAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TaskAwardRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TaskAwardRsp message.
             * @function verify
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TaskAwardRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (!$util.isInteger(message.awardMoney) && !(message.awardMoney && $util.isInteger(message.awardMoney.low) && $util.isInteger(message.awardMoney.high)))
                        return "awardMoney: integer|Long expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.nextTask != null && message.hasOwnProperty("nextTask")) {
                    var error = $root.hall.SingleTaskInfo.verify(message.nextTask);
                    if (error)
                        return "nextTask." + error;
                }
                return null;
            };
    
            /**
             * Creates a TaskAwardRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TaskAwardRsp} TaskAwardRsp
             */
            TaskAwardRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TaskAwardRsp)
                    return object;
                var message = new $root.hall.TaskAwardRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.TaskAwardRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.awardMoney != null)
                    if ($util.Long)
                        (message.awardMoney = $util.Long.fromValue(object.awardMoney)).unsigned = true;
                    else if (typeof object.awardMoney === "string")
                        message.awardMoney = parseInt(object.awardMoney, 10);
                    else if (typeof object.awardMoney === "number")
                        message.awardMoney = object.awardMoney;
                    else if (typeof object.awardMoney === "object")
                        message.awardMoney = new $util.LongBits(object.awardMoney.low >>> 0, object.awardMoney.high >>> 0).toNumber(true);
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.nextTask != null) {
                    if (typeof object.nextTask !== "object")
                        throw TypeError(".hall.TaskAwardRsp.nextTask: object expected");
                    message.nextTask = $root.hall.SingleTaskInfo.fromObject(object.nextTask);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TaskAwardRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TaskAwardRsp
             * @static
             * @param {hall.TaskAwardRsp} message TaskAwardRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TaskAwardRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.awardMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.awardMoney = options.longs === String ? "0" : 0;
                    object.id = 0;
                    object.nextTask = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (typeof message.awardMoney === "number")
                        object.awardMoney = options.longs === String ? String(message.awardMoney) : message.awardMoney;
                    else
                        object.awardMoney = options.longs === String ? $util.Long.prototype.toString.call(message.awardMoney) : options.longs === Number ? new $util.LongBits(message.awardMoney.low >>> 0, message.awardMoney.high >>> 0).toNumber(true) : message.awardMoney;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.nextTask != null && message.hasOwnProperty("nextTask"))
                    object.nextTask = $root.hall.SingleTaskInfo.toObject(message.nextTask, options);
                return object;
            };
    
            /**
             * Converts this TaskAwardRsp to JSON.
             * @function toJSON
             * @memberof hall.TaskAwardRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TaskAwardRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TaskAwardRsp;
        })();
    
        hall.PushRsp = (function() {
    
            /**
             * Properties of a PushRsp.
             * @memberof hall
             * @interface IPushRsp
             * @property {common.IResult|null} [result] PushRsp result
             * @property {string|null} [json] PushRsp json
             */
    
            /**
             * Constructs a new PushRsp.
             * @memberof hall
             * @classdesc Represents a PushRsp.
             * @implements IPushRsp
             * @constructor
             * @param {hall.IPushRsp=} [properties] Properties to set
             */
            function PushRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PushRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PushRsp
             * @instance
             */
            PushRsp.prototype.result = null;
    
            /**
             * PushRsp json.
             * @member {string} json
             * @memberof hall.PushRsp
             * @instance
             */
            PushRsp.prototype.json = "";
    
            /**
             * Creates a new PushRsp instance using the specified properties.
             * @function create
             * @memberof hall.PushRsp
             * @static
             * @param {hall.IPushRsp=} [properties] Properties to set
             * @returns {hall.PushRsp} PushRsp instance
             */
            PushRsp.create = function create(properties) {
                return new PushRsp(properties);
            };
    
            /**
             * Encodes the specified PushRsp message. Does not implicitly {@link hall.PushRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PushRsp
             * @static
             * @param {hall.IPushRsp} message PushRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PushRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.json != null && message.hasOwnProperty("json"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.json);
                return writer;
            };
    
            /**
             * Encodes the specified PushRsp message, length delimited. Does not implicitly {@link hall.PushRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PushRsp
             * @static
             * @param {hall.IPushRsp} message PushRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PushRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PushRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PushRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PushRsp} PushRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PushRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PushRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.json = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PushRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PushRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PushRsp} PushRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PushRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PushRsp message.
             * @function verify
             * @memberof hall.PushRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PushRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.json != null && message.hasOwnProperty("json"))
                    if (!$util.isString(message.json))
                        return "json: string expected";
                return null;
            };
    
            /**
             * Creates a PushRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PushRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PushRsp} PushRsp
             */
            PushRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PushRsp)
                    return object;
                var message = new $root.hall.PushRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PushRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.json != null)
                    message.json = String(object.json);
                return message;
            };
    
            /**
             * Creates a plain object from a PushRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PushRsp
             * @static
             * @param {hall.PushRsp} message PushRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PushRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.json = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.json != null && message.hasOwnProperty("json"))
                    object.json = message.json;
                return object;
            };
    
            /**
             * Converts this PushRsp to JSON.
             * @function toJSON
             * @memberof hall.PushRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PushRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PushRsp;
        })();
    
        hall.MarketReq = (function() {
    
            /**
             * Properties of a MarketReq.
             * @memberof hall
             * @interface IMarketReq
             * @property {common.IRequest} request MarketReq request
             * @property {number|null} [type] MarketReq type
             */
    
            /**
             * Constructs a new MarketReq.
             * @memberof hall
             * @classdesc Represents a MarketReq.
             * @implements IMarketReq
             * @constructor
             * @param {hall.IMarketReq=} [properties] Properties to set
             */
            function MarketReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MarketReq request.
             * @member {common.IRequest} request
             * @memberof hall.MarketReq
             * @instance
             */
            MarketReq.prototype.request = null;
    
            /**
             * MarketReq type.
             * @member {number} type
             * @memberof hall.MarketReq
             * @instance
             */
            MarketReq.prototype.type = 0;
    
            /**
             * Creates a new MarketReq instance using the specified properties.
             * @function create
             * @memberof hall.MarketReq
             * @static
             * @param {hall.IMarketReq=} [properties] Properties to set
             * @returns {hall.MarketReq} MarketReq instance
             */
            MarketReq.create = function create(properties) {
                return new MarketReq(properties);
            };
    
            /**
             * Encodes the specified MarketReq message. Does not implicitly {@link hall.MarketReq.verify|verify} messages.
             * @function encode
             * @memberof hall.MarketReq
             * @static
             * @param {hall.IMarketReq} message MarketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                return writer;
            };
    
            /**
             * Encodes the specified MarketReq message, length delimited. Does not implicitly {@link hall.MarketReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MarketReq
             * @static
             * @param {hall.IMarketReq} message MarketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MarketReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MarketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MarketReq} MarketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MarketReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MarketReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MarketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MarketReq} MarketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MarketReq message.
             * @function verify
             * @memberof hall.MarketReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MarketReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                return null;
            };
    
            /**
             * Creates a MarketReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MarketReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MarketReq} MarketReq
             */
            MarketReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MarketReq)
                    return object;
                var message = new $root.hall.MarketReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.MarketReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.type != null)
                    message.type = object.type >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MarketReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MarketReq
             * @static
             * @param {hall.MarketReq} message MarketReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MarketReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.type = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                return object;
            };
    
            /**
             * Converts this MarketReq to JSON.
             * @function toJSON
             * @memberof hall.MarketReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MarketReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MarketReq;
        })();
    
        hall.DiamondInfo = (function() {
    
            /**
             * Properties of a DiamondInfo.
             * @memberof hall
             * @interface IDiamondInfo
             * @property {number|null} [id] DiamondInfo id
             * @property {string|null} [name] DiamondInfo name
             * @property {number|null} [price] DiamondInfo price
             * @property {number|null} [num] DiamondInfo num
             * @property {number|null} [giftNum] DiamondInfo giftNum
             * @property {number|null} [tag] DiamondInfo tag
             * @property {number|null} [payType] DiamondInfo payType
             * @property {string|null} [extInfo] DiamondInfo extInfo
             * @property {string|null} [img] DiamondInfo img
             * @property {string|null} [priceName] DiamondInfo priceName
             * @property {string|null} [numName] DiamondInfo numName
             * @property {string|null} [giftName] DiamondInfo giftName
             */
    
            /**
             * Constructs a new DiamondInfo.
             * @memberof hall
             * @classdesc Represents a DiamondInfo.
             * @implements IDiamondInfo
             * @constructor
             * @param {hall.IDiamondInfo=} [properties] Properties to set
             */
            function DiamondInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DiamondInfo id.
             * @member {number} id
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.id = 0;
    
            /**
             * DiamondInfo name.
             * @member {string} name
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.name = "";
    
            /**
             * DiamondInfo price.
             * @member {number} price
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.price = 0;
    
            /**
             * DiamondInfo num.
             * @member {number} num
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.num = 0;
    
            /**
             * DiamondInfo giftNum.
             * @member {number} giftNum
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.giftNum = 0;
    
            /**
             * DiamondInfo tag.
             * @member {number} tag
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.tag = 0;
    
            /**
             * DiamondInfo payType.
             * @member {number} payType
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.payType = 0;
    
            /**
             * DiamondInfo extInfo.
             * @member {string} extInfo
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.extInfo = "";
    
            /**
             * DiamondInfo img.
             * @member {string} img
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.img = "";
    
            /**
             * DiamondInfo priceName.
             * @member {string} priceName
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.priceName = "";
    
            /**
             * DiamondInfo numName.
             * @member {string} numName
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.numName = "";
    
            /**
             * DiamondInfo giftName.
             * @member {string} giftName
             * @memberof hall.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.giftName = "";
    
            /**
             * Creates a new DiamondInfo instance using the specified properties.
             * @function create
             * @memberof hall.DiamondInfo
             * @static
             * @param {hall.IDiamondInfo=} [properties] Properties to set
             * @returns {hall.DiamondInfo} DiamondInfo instance
             */
            DiamondInfo.create = function create(properties) {
                return new DiamondInfo(properties);
            };
    
            /**
             * Encodes the specified DiamondInfo message. Does not implicitly {@link hall.DiamondInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.DiamondInfo
             * @static
             * @param {hall.IDiamondInfo} message DiamondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.num);
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.giftNum);
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tag);
                if (message.payType != null && message.hasOwnProperty("payType"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.payType);
                if (message.extInfo != null && message.hasOwnProperty("extInfo"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.extInfo);
                if (message.img != null && message.hasOwnProperty("img"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.img);
                if (message.priceName != null && message.hasOwnProperty("priceName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.priceName);
                if (message.numName != null && message.hasOwnProperty("numName"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.numName);
                if (message.giftName != null && message.hasOwnProperty("giftName"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.giftName);
                return writer;
            };
    
            /**
             * Encodes the specified DiamondInfo message, length delimited. Does not implicitly {@link hall.DiamondInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.DiamondInfo
             * @static
             * @param {hall.IDiamondInfo} message DiamondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DiamondInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.DiamondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.DiamondInfo} DiamondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.DiamondInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.price = reader.uint32();
                        break;
                    case 4:
                        message.num = reader.uint32();
                        break;
                    case 5:
                        message.giftNum = reader.uint32();
                        break;
                    case 6:
                        message.tag = reader.uint32();
                        break;
                    case 7:
                        message.payType = reader.uint32();
                        break;
                    case 8:
                        message.extInfo = reader.string();
                        break;
                    case 9:
                        message.img = reader.string();
                        break;
                    case 10:
                        message.priceName = reader.string();
                        break;
                    case 11:
                        message.numName = reader.string();
                        break;
                    case 12:
                        message.giftName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DiamondInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.DiamondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.DiamondInfo} DiamondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DiamondInfo message.
             * @function verify
             * @memberof hall.DiamondInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiamondInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price))
                        return "price: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    if (!$util.isInteger(message.giftNum))
                        return "giftNum: integer expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isInteger(message.tag))
                        return "tag: integer expected";
                if (message.payType != null && message.hasOwnProperty("payType"))
                    if (!$util.isInteger(message.payType))
                        return "payType: integer expected";
                if (message.extInfo != null && message.hasOwnProperty("extInfo"))
                    if (!$util.isString(message.extInfo))
                        return "extInfo: string expected";
                if (message.img != null && message.hasOwnProperty("img"))
                    if (!$util.isString(message.img))
                        return "img: string expected";
                if (message.priceName != null && message.hasOwnProperty("priceName"))
                    if (!$util.isString(message.priceName))
                        return "priceName: string expected";
                if (message.numName != null && message.hasOwnProperty("numName"))
                    if (!$util.isString(message.numName))
                        return "numName: string expected";
                if (message.giftName != null && message.hasOwnProperty("giftName"))
                    if (!$util.isString(message.giftName))
                        return "giftName: string expected";
                return null;
            };
    
            /**
             * Creates a DiamondInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.DiamondInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.DiamondInfo} DiamondInfo
             */
            DiamondInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.DiamondInfo)
                    return object;
                var message = new $root.hall.DiamondInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.price != null)
                    message.price = object.price >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.giftNum != null)
                    message.giftNum = object.giftNum >>> 0;
                if (object.tag != null)
                    message.tag = object.tag >>> 0;
                if (object.payType != null)
                    message.payType = object.payType >>> 0;
                if (object.extInfo != null)
                    message.extInfo = String(object.extInfo);
                if (object.img != null)
                    message.img = String(object.img);
                if (object.priceName != null)
                    message.priceName = String(object.priceName);
                if (object.numName != null)
                    message.numName = String(object.numName);
                if (object.giftName != null)
                    message.giftName = String(object.giftName);
                return message;
            };
    
            /**
             * Creates a plain object from a DiamondInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.DiamondInfo
             * @static
             * @param {hall.DiamondInfo} message DiamondInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiamondInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.price = 0;
                    object.num = 0;
                    object.giftNum = 0;
                    object.tag = 0;
                    object.payType = 0;
                    object.extInfo = "";
                    object.img = "";
                    object.priceName = "";
                    object.numName = "";
                    object.giftName = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.price != null && message.hasOwnProperty("price"))
                    object.price = message.price;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    object.giftNum = message.giftNum;
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.payType != null && message.hasOwnProperty("payType"))
                    object.payType = message.payType;
                if (message.extInfo != null && message.hasOwnProperty("extInfo"))
                    object.extInfo = message.extInfo;
                if (message.img != null && message.hasOwnProperty("img"))
                    object.img = message.img;
                if (message.priceName != null && message.hasOwnProperty("priceName"))
                    object.priceName = message.priceName;
                if (message.numName != null && message.hasOwnProperty("numName"))
                    object.numName = message.numName;
                if (message.giftName != null && message.hasOwnProperty("giftName"))
                    object.giftName = message.giftName;
                return object;
            };
    
            /**
             * Converts this DiamondInfo to JSON.
             * @function toJSON
             * @memberof hall.DiamondInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiamondInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DiamondInfo;
        })();
    
        hall.GoldInfo = (function() {
    
            /**
             * Properties of a GoldInfo.
             * @memberof hall
             * @interface IGoldInfo
             * @property {number|null} [id] GoldInfo id
             * @property {string|null} [name] GoldInfo name
             * @property {number|null} [price] GoldInfo price
             * @property {number|null} [num] GoldInfo num
             * @property {number|null} [giftNum] GoldInfo giftNum
             * @property {number|null} [tag] GoldInfo tag
             * @property {number|null} [payType] GoldInfo payType
             * @property {string|null} [img] GoldInfo img
             */
    
            /**
             * Constructs a new GoldInfo.
             * @memberof hall
             * @classdesc Represents a GoldInfo.
             * @implements IGoldInfo
             * @constructor
             * @param {hall.IGoldInfo=} [properties] Properties to set
             */
            function GoldInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GoldInfo id.
             * @member {number} id
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.id = 0;
    
            /**
             * GoldInfo name.
             * @member {string} name
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.name = "";
    
            /**
             * GoldInfo price.
             * @member {number} price
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.price = 0;
    
            /**
             * GoldInfo num.
             * @member {number} num
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.num = 0;
    
            /**
             * GoldInfo giftNum.
             * @member {number} giftNum
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.giftNum = 0;
    
            /**
             * GoldInfo tag.
             * @member {number} tag
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.tag = 0;
    
            /**
             * GoldInfo payType.
             * @member {number} payType
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.payType = 0;
    
            /**
             * GoldInfo img.
             * @member {string} img
             * @memberof hall.GoldInfo
             * @instance
             */
            GoldInfo.prototype.img = "";
    
            /**
             * Creates a new GoldInfo instance using the specified properties.
             * @function create
             * @memberof hall.GoldInfo
             * @static
             * @param {hall.IGoldInfo=} [properties] Properties to set
             * @returns {hall.GoldInfo} GoldInfo instance
             */
            GoldInfo.create = function create(properties) {
                return new GoldInfo(properties);
            };
    
            /**
             * Encodes the specified GoldInfo message. Does not implicitly {@link hall.GoldInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.GoldInfo
             * @static
             * @param {hall.IGoldInfo} message GoldInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoldInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.price);
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.num);
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.giftNum);
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tag);
                if (message.payType != null && message.hasOwnProperty("payType"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.payType);
                if (message.img != null && message.hasOwnProperty("img"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.img);
                return writer;
            };
    
            /**
             * Encodes the specified GoldInfo message, length delimited. Does not implicitly {@link hall.GoldInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.GoldInfo
             * @static
             * @param {hall.IGoldInfo} message GoldInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoldInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GoldInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.GoldInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.GoldInfo} GoldInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoldInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.GoldInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.price = reader.uint32();
                        break;
                    case 4:
                        message.num = reader.uint32();
                        break;
                    case 5:
                        message.giftNum = reader.uint32();
                        break;
                    case 6:
                        message.tag = reader.uint32();
                        break;
                    case 7:
                        message.payType = reader.uint32();
                        break;
                    case 8:
                        message.img = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GoldInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.GoldInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.GoldInfo} GoldInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoldInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GoldInfo message.
             * @function verify
             * @memberof hall.GoldInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GoldInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price))
                        return "price: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    if (!$util.isInteger(message.giftNum))
                        return "giftNum: integer expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isInteger(message.tag))
                        return "tag: integer expected";
                if (message.payType != null && message.hasOwnProperty("payType"))
                    if (!$util.isInteger(message.payType))
                        return "payType: integer expected";
                if (message.img != null && message.hasOwnProperty("img"))
                    if (!$util.isString(message.img))
                        return "img: string expected";
                return null;
            };
    
            /**
             * Creates a GoldInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.GoldInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.GoldInfo} GoldInfo
             */
            GoldInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.GoldInfo)
                    return object;
                var message = new $root.hall.GoldInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.price != null)
                    message.price = object.price >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.giftNum != null)
                    message.giftNum = object.giftNum >>> 0;
                if (object.tag != null)
                    message.tag = object.tag >>> 0;
                if (object.payType != null)
                    message.payType = object.payType >>> 0;
                if (object.img != null)
                    message.img = String(object.img);
                return message;
            };
    
            /**
             * Creates a plain object from a GoldInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.GoldInfo
             * @static
             * @param {hall.GoldInfo} message GoldInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GoldInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.price = 0;
                    object.num = 0;
                    object.giftNum = 0;
                    object.tag = 0;
                    object.payType = 0;
                    object.img = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.price != null && message.hasOwnProperty("price"))
                    object.price = message.price;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.giftNum != null && message.hasOwnProperty("giftNum"))
                    object.giftNum = message.giftNum;
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.payType != null && message.hasOwnProperty("payType"))
                    object.payType = message.payType;
                if (message.img != null && message.hasOwnProperty("img"))
                    object.img = message.img;
                return object;
            };
    
            /**
             * Converts this GoldInfo to JSON.
             * @function toJSON
             * @memberof hall.GoldInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GoldInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GoldInfo;
        })();
    
        hall.OrnamentInfo = (function() {
    
            /**
             * Properties of an OrnamentInfo.
             * @memberof hall
             * @interface IOrnamentInfo
             * @property {number|null} [id] OrnamentInfo id
             * @property {string|null} [name] OrnamentInfo name
             * @property {string|null} [des] OrnamentInfo des
             * @property {number|null} [price] OrnamentInfo price
             * @property {number|null} [num] OrnamentInfo num
             * @property {string|null} [time] OrnamentInfo time
             * @property {number|null} [tag] OrnamentInfo tag
             * @property {number|null} [payType] OrnamentInfo payType
             * @property {number|null} [vipLimit] OrnamentInfo vipLimit
             * @property {number|null} [charmLimit] OrnamentInfo charmLimit
             * @property {string|null} [img] OrnamentInfo img
             */
    
            /**
             * Constructs a new OrnamentInfo.
             * @memberof hall
             * @classdesc Represents an OrnamentInfo.
             * @implements IOrnamentInfo
             * @constructor
             * @param {hall.IOrnamentInfo=} [properties] Properties to set
             */
            function OrnamentInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OrnamentInfo id.
             * @member {number} id
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.id = 0;
    
            /**
             * OrnamentInfo name.
             * @member {string} name
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.name = "";
    
            /**
             * OrnamentInfo des.
             * @member {string} des
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.des = "";
    
            /**
             * OrnamentInfo price.
             * @member {number} price
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.price = 0;
    
            /**
             * OrnamentInfo num.
             * @member {number} num
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.num = 0;
    
            /**
             * OrnamentInfo time.
             * @member {string} time
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.time = "";
    
            /**
             * OrnamentInfo tag.
             * @member {number} tag
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.tag = 0;
    
            /**
             * OrnamentInfo payType.
             * @member {number} payType
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.payType = 0;
    
            /**
             * OrnamentInfo vipLimit.
             * @member {number} vipLimit
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.vipLimit = 0;
    
            /**
             * OrnamentInfo charmLimit.
             * @member {number} charmLimit
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.charmLimit = 0;
    
            /**
             * OrnamentInfo img.
             * @member {string} img
             * @memberof hall.OrnamentInfo
             * @instance
             */
            OrnamentInfo.prototype.img = "";
    
            /**
             * Creates a new OrnamentInfo instance using the specified properties.
             * @function create
             * @memberof hall.OrnamentInfo
             * @static
             * @param {hall.IOrnamentInfo=} [properties] Properties to set
             * @returns {hall.OrnamentInfo} OrnamentInfo instance
             */
            OrnamentInfo.create = function create(properties) {
                return new OrnamentInfo(properties);
            };
    
            /**
             * Encodes the specified OrnamentInfo message. Does not implicitly {@link hall.OrnamentInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.OrnamentInfo
             * @static
             * @param {hall.IOrnamentInfo} message OrnamentInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrnamentInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.des != null && message.hasOwnProperty("des"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.des);
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.price);
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.num);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.time);
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.tag);
                if (message.payType != null && message.hasOwnProperty("payType"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.payType);
                if (message.vipLimit != null && message.hasOwnProperty("vipLimit"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.vipLimit);
                if (message.charmLimit != null && message.hasOwnProperty("charmLimit"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.charmLimit);
                if (message.img != null && message.hasOwnProperty("img"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.img);
                return writer;
            };
    
            /**
             * Encodes the specified OrnamentInfo message, length delimited. Does not implicitly {@link hall.OrnamentInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.OrnamentInfo
             * @static
             * @param {hall.IOrnamentInfo} message OrnamentInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrnamentInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OrnamentInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.OrnamentInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.OrnamentInfo} OrnamentInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrnamentInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.OrnamentInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.des = reader.string();
                        break;
                    case 4:
                        message.price = reader.uint32();
                        break;
                    case 5:
                        message.num = reader.uint32();
                        break;
                    case 6:
                        message.time = reader.string();
                        break;
                    case 7:
                        message.tag = reader.uint32();
                        break;
                    case 8:
                        message.payType = reader.uint32();
                        break;
                    case 9:
                        message.vipLimit = reader.uint32();
                        break;
                    case 10:
                        message.charmLimit = reader.uint32();
                        break;
                    case 11:
                        message.img = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OrnamentInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.OrnamentInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.OrnamentInfo} OrnamentInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrnamentInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OrnamentInfo message.
             * @function verify
             * @memberof hall.OrnamentInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OrnamentInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.des != null && message.hasOwnProperty("des"))
                    if (!$util.isString(message.des))
                        return "des: string expected";
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price))
                        return "price: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isString(message.time))
                        return "time: string expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isInteger(message.tag))
                        return "tag: integer expected";
                if (message.payType != null && message.hasOwnProperty("payType"))
                    if (!$util.isInteger(message.payType))
                        return "payType: integer expected";
                if (message.vipLimit != null && message.hasOwnProperty("vipLimit"))
                    if (!$util.isInteger(message.vipLimit))
                        return "vipLimit: integer expected";
                if (message.charmLimit != null && message.hasOwnProperty("charmLimit"))
                    if (!$util.isInteger(message.charmLimit))
                        return "charmLimit: integer expected";
                if (message.img != null && message.hasOwnProperty("img"))
                    if (!$util.isString(message.img))
                        return "img: string expected";
                return null;
            };
    
            /**
             * Creates an OrnamentInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.OrnamentInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.OrnamentInfo} OrnamentInfo
             */
            OrnamentInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.OrnamentInfo)
                    return object;
                var message = new $root.hall.OrnamentInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.des != null)
                    message.des = String(object.des);
                if (object.price != null)
                    message.price = object.price >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.time != null)
                    message.time = String(object.time);
                if (object.tag != null)
                    message.tag = object.tag >>> 0;
                if (object.payType != null)
                    message.payType = object.payType >>> 0;
                if (object.vipLimit != null)
                    message.vipLimit = object.vipLimit >>> 0;
                if (object.charmLimit != null)
                    message.charmLimit = object.charmLimit >>> 0;
                if (object.img != null)
                    message.img = String(object.img);
                return message;
            };
    
            /**
             * Creates a plain object from an OrnamentInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.OrnamentInfo
             * @static
             * @param {hall.OrnamentInfo} message OrnamentInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OrnamentInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                    object.des = "";
                    object.price = 0;
                    object.num = 0;
                    object.time = "";
                    object.tag = 0;
                    object.payType = 0;
                    object.vipLimit = 0;
                    object.charmLimit = 0;
                    object.img = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.des != null && message.hasOwnProperty("des"))
                    object.des = message.des;
                if (message.price != null && message.hasOwnProperty("price"))
                    object.price = message.price;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.payType != null && message.hasOwnProperty("payType"))
                    object.payType = message.payType;
                if (message.vipLimit != null && message.hasOwnProperty("vipLimit"))
                    object.vipLimit = message.vipLimit;
                if (message.charmLimit != null && message.hasOwnProperty("charmLimit"))
                    object.charmLimit = message.charmLimit;
                if (message.img != null && message.hasOwnProperty("img"))
                    object.img = message.img;
                return object;
            };
    
            /**
             * Converts this OrnamentInfo to JSON.
             * @function toJSON
             * @memberof hall.OrnamentInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OrnamentInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OrnamentInfo;
        })();
    
        hall.MarketRsp = (function() {
    
            /**
             * Properties of a MarketRsp.
             * @memberof hall
             * @interface IMarketRsp
             * @property {common.IResult|null} [result] MarketRsp result
             * @property {number|null} [type] MarketRsp type
             * @property {Array.<hall.IDiamondInfo>|null} [diamondList] MarketRsp diamondList
             * @property {Array.<hall.IGoldInfo>|null} [goldList] MarketRsp goldList
             * @property {Array.<hall.IOrnamentInfo>|null} [ornamentList] MarketRsp ornamentList
             */
    
            /**
             * Constructs a new MarketRsp.
             * @memberof hall
             * @classdesc Represents a MarketRsp.
             * @implements IMarketRsp
             * @constructor
             * @param {hall.IMarketRsp=} [properties] Properties to set
             */
            function MarketRsp(properties) {
                this.diamondList = [];
                this.goldList = [];
                this.ornamentList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MarketRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.MarketRsp
             * @instance
             */
            MarketRsp.prototype.result = null;
    
            /**
             * MarketRsp type.
             * @member {number} type
             * @memberof hall.MarketRsp
             * @instance
             */
            MarketRsp.prototype.type = 0;
    
            /**
             * MarketRsp diamondList.
             * @member {Array.<hall.IDiamondInfo>} diamondList
             * @memberof hall.MarketRsp
             * @instance
             */
            MarketRsp.prototype.diamondList = $util.emptyArray;
    
            /**
             * MarketRsp goldList.
             * @member {Array.<hall.IGoldInfo>} goldList
             * @memberof hall.MarketRsp
             * @instance
             */
            MarketRsp.prototype.goldList = $util.emptyArray;
    
            /**
             * MarketRsp ornamentList.
             * @member {Array.<hall.IOrnamentInfo>} ornamentList
             * @memberof hall.MarketRsp
             * @instance
             */
            MarketRsp.prototype.ornamentList = $util.emptyArray;
    
            /**
             * Creates a new MarketRsp instance using the specified properties.
             * @function create
             * @memberof hall.MarketRsp
             * @static
             * @param {hall.IMarketRsp=} [properties] Properties to set
             * @returns {hall.MarketRsp} MarketRsp instance
             */
            MarketRsp.create = function create(properties) {
                return new MarketRsp(properties);
            };
    
            /**
             * Encodes the specified MarketRsp message. Does not implicitly {@link hall.MarketRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.MarketRsp
             * @static
             * @param {hall.IMarketRsp} message MarketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                if (message.diamondList != null && message.diamondList.length)
                    for (var i = 0; i < message.diamondList.length; ++i)
                        $root.hall.DiamondInfo.encode(message.diamondList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.goldList != null && message.goldList.length)
                    for (var i = 0; i < message.goldList.length; ++i)
                        $root.hall.GoldInfo.encode(message.goldList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.ornamentList != null && message.ornamentList.length)
                    for (var i = 0; i < message.ornamentList.length; ++i)
                        $root.hall.OrnamentInfo.encode(message.ornamentList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified MarketRsp message, length delimited. Does not implicitly {@link hall.MarketRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MarketRsp
             * @static
             * @param {hall.IMarketRsp} message MarketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MarketRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MarketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MarketRsp} MarketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MarketRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        if (!(message.diamondList && message.diamondList.length))
                            message.diamondList = [];
                        message.diamondList.push($root.hall.DiamondInfo.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.goldList && message.goldList.length))
                            message.goldList = [];
                        message.goldList.push($root.hall.GoldInfo.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.ornamentList && message.ornamentList.length))
                            message.ornamentList = [];
                        message.ornamentList.push($root.hall.OrnamentInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MarketRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MarketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MarketRsp} MarketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MarketRsp message.
             * @function verify
             * @memberof hall.MarketRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MarketRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.diamondList != null && message.hasOwnProperty("diamondList")) {
                    if (!Array.isArray(message.diamondList))
                        return "diamondList: array expected";
                    for (var i = 0; i < message.diamondList.length; ++i) {
                        var error = $root.hall.DiamondInfo.verify(message.diamondList[i]);
                        if (error)
                            return "diamondList." + error;
                    }
                }
                if (message.goldList != null && message.hasOwnProperty("goldList")) {
                    if (!Array.isArray(message.goldList))
                        return "goldList: array expected";
                    for (var i = 0; i < message.goldList.length; ++i) {
                        var error = $root.hall.GoldInfo.verify(message.goldList[i]);
                        if (error)
                            return "goldList." + error;
                    }
                }
                if (message.ornamentList != null && message.hasOwnProperty("ornamentList")) {
                    if (!Array.isArray(message.ornamentList))
                        return "ornamentList: array expected";
                    for (var i = 0; i < message.ornamentList.length; ++i) {
                        var error = $root.hall.OrnamentInfo.verify(message.ornamentList[i]);
                        if (error)
                            return "ornamentList." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a MarketRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MarketRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MarketRsp} MarketRsp
             */
            MarketRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MarketRsp)
                    return object;
                var message = new $root.hall.MarketRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.MarketRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.diamondList) {
                    if (!Array.isArray(object.diamondList))
                        throw TypeError(".hall.MarketRsp.diamondList: array expected");
                    message.diamondList = [];
                    for (var i = 0; i < object.diamondList.length; ++i) {
                        if (typeof object.diamondList[i] !== "object")
                            throw TypeError(".hall.MarketRsp.diamondList: object expected");
                        message.diamondList[i] = $root.hall.DiamondInfo.fromObject(object.diamondList[i]);
                    }
                }
                if (object.goldList) {
                    if (!Array.isArray(object.goldList))
                        throw TypeError(".hall.MarketRsp.goldList: array expected");
                    message.goldList = [];
                    for (var i = 0; i < object.goldList.length; ++i) {
                        if (typeof object.goldList[i] !== "object")
                            throw TypeError(".hall.MarketRsp.goldList: object expected");
                        message.goldList[i] = $root.hall.GoldInfo.fromObject(object.goldList[i]);
                    }
                }
                if (object.ornamentList) {
                    if (!Array.isArray(object.ornamentList))
                        throw TypeError(".hall.MarketRsp.ornamentList: array expected");
                    message.ornamentList = [];
                    for (var i = 0; i < object.ornamentList.length; ++i) {
                        if (typeof object.ornamentList[i] !== "object")
                            throw TypeError(".hall.MarketRsp.ornamentList: object expected");
                        message.ornamentList[i] = $root.hall.OrnamentInfo.fromObject(object.ornamentList[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MarketRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MarketRsp
             * @static
             * @param {hall.MarketRsp} message MarketRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MarketRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.diamondList = [];
                    object.goldList = [];
                    object.ornamentList = [];
                }
                if (options.defaults) {
                    object.result = null;
                    object.type = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.diamondList && message.diamondList.length) {
                    object.diamondList = [];
                    for (var j = 0; j < message.diamondList.length; ++j)
                        object.diamondList[j] = $root.hall.DiamondInfo.toObject(message.diamondList[j], options);
                }
                if (message.goldList && message.goldList.length) {
                    object.goldList = [];
                    for (var j = 0; j < message.goldList.length; ++j)
                        object.goldList[j] = $root.hall.GoldInfo.toObject(message.goldList[j], options);
                }
                if (message.ornamentList && message.ornamentList.length) {
                    object.ornamentList = [];
                    for (var j = 0; j < message.ornamentList.length; ++j)
                        object.ornamentList[j] = $root.hall.OrnamentInfo.toObject(message.ornamentList[j], options);
                }
                return object;
            };
    
            /**
             * Converts this MarketRsp to JSON.
             * @function toJSON
             * @memberof hall.MarketRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MarketRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MarketRsp;
        })();
    
        hall.OrderReq = (function() {
    
            /**
             * Properties of an OrderReq.
             * @memberof hall
             * @interface IOrderReq
             * @property {common.IRequest} request OrderReq request
             * @property {number|null} [gameType] OrderReq gameType
             * @property {number|null} [goodId] OrderReq goodId
             * @property {number|null} [payType] OrderReq payType
             * @property {string|null} [extraJson] OrderReq extraJson
             * @property {string|null} [game] OrderReq game
             * @property {string|null} [appId] OrderReq appId
             */
    
            /**
             * Constructs a new OrderReq.
             * @memberof hall
             * @classdesc Represents an OrderReq.
             * @implements IOrderReq
             * @constructor
             * @param {hall.IOrderReq=} [properties] Properties to set
             */
            function OrderReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OrderReq request.
             * @member {common.IRequest} request
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.request = null;
    
            /**
             * OrderReq gameType.
             * @member {number} gameType
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.gameType = 0;
    
            /**
             * OrderReq goodId.
             * @member {number} goodId
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.goodId = 0;
    
            /**
             * OrderReq payType.
             * @member {number} payType
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.payType = 0;
    
            /**
             * OrderReq extraJson.
             * @member {string} extraJson
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.extraJson = "";
    
            /**
             * OrderReq game.
             * @member {string} game
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.game = "";
    
            /**
             * OrderReq appId.
             * @member {string} appId
             * @memberof hall.OrderReq
             * @instance
             */
            OrderReq.prototype.appId = "";
    
            /**
             * Creates a new OrderReq instance using the specified properties.
             * @function create
             * @memberof hall.OrderReq
             * @static
             * @param {hall.IOrderReq=} [properties] Properties to set
             * @returns {hall.OrderReq} OrderReq instance
             */
            OrderReq.create = function create(properties) {
                return new OrderReq(properties);
            };
    
            /**
             * Encodes the specified OrderReq message. Does not implicitly {@link hall.OrderReq.verify|verify} messages.
             * @function encode
             * @memberof hall.OrderReq
             * @static
             * @param {hall.IOrderReq} message OrderReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameType);
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.goodId);
                if (message.payType != null && message.hasOwnProperty("payType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.payType);
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.extraJson);
                if (message.game != null && message.hasOwnProperty("game"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.game);
                if (message.appId != null && message.hasOwnProperty("appId"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.appId);
                return writer;
            };
    
            /**
             * Encodes the specified OrderReq message, length delimited. Does not implicitly {@link hall.OrderReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.OrderReq
             * @static
             * @param {hall.IOrderReq} message OrderReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OrderReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.OrderReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.OrderReq} OrderReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.OrderReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameType = reader.uint32();
                        break;
                    case 3:
                        message.goodId = reader.uint32();
                        break;
                    case 4:
                        message.payType = reader.uint32();
                        break;
                    case 5:
                        message.extraJson = reader.string();
                        break;
                    case 6:
                        message.game = reader.string();
                        break;
                    case 7:
                        message.appId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an OrderReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.OrderReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.OrderReq} OrderReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OrderReq message.
             * @function verify
             * @memberof hall.OrderReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OrderReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    if (!$util.isInteger(message.goodId))
                        return "goodId: integer expected";
                if (message.payType != null && message.hasOwnProperty("payType"))
                    if (!$util.isInteger(message.payType))
                        return "payType: integer expected";
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    if (!$util.isString(message.extraJson))
                        return "extraJson: string expected";
                if (message.game != null && message.hasOwnProperty("game"))
                    if (!$util.isString(message.game))
                        return "game: string expected";
                if (message.appId != null && message.hasOwnProperty("appId"))
                    if (!$util.isString(message.appId))
                        return "appId: string expected";
                return null;
            };
    
            /**
             * Creates an OrderReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.OrderReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.OrderReq} OrderReq
             */
            OrderReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.OrderReq)
                    return object;
                var message = new $root.hall.OrderReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.OrderReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.goodId != null)
                    message.goodId = object.goodId >>> 0;
                if (object.payType != null)
                    message.payType = object.payType >>> 0;
                if (object.extraJson != null)
                    message.extraJson = String(object.extraJson);
                if (object.game != null)
                    message.game = String(object.game);
                if (object.appId != null)
                    message.appId = String(object.appId);
                return message;
            };
    
            /**
             * Creates a plain object from an OrderReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.OrderReq
             * @static
             * @param {hall.OrderReq} message OrderReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OrderReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.gameType = 0;
                    object.goodId = 0;
                    object.payType = 0;
                    object.extraJson = "";
                    object.game = "";
                    object.appId = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    object.goodId = message.goodId;
                if (message.payType != null && message.hasOwnProperty("payType"))
                    object.payType = message.payType;
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    object.extraJson = message.extraJson;
                if (message.game != null && message.hasOwnProperty("game"))
                    object.game = message.game;
                if (message.appId != null && message.hasOwnProperty("appId"))
                    object.appId = message.appId;
                return object;
            };
    
            /**
             * Converts this OrderReq to JSON.
             * @function toJSON
             * @memberof hall.OrderReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OrderReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OrderReq;
        })();
    
        hall.OrderRsp = (function() {
    
            /**
             * Properties of an OrderRsp.
             * @memberof hall
             * @interface IOrderRsp
             * @property {common.IResult|null} [result] OrderRsp result
             * @property {string|null} [orderId] OrderRsp orderId
             * @property {number|null} [goodId] OrderRsp goodId
             * @property {number|null} [payType] OrderRsp payType
             * @property {string|null} [extraJson] OrderRsp extraJson
             */
    
            /**
             * Constructs a new OrderRsp.
             * @memberof hall
             * @classdesc Represents an OrderRsp.
             * @implements IOrderRsp
             * @constructor
             * @param {hall.IOrderRsp=} [properties] Properties to set
             */
            function OrderRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OrderRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.OrderRsp
             * @instance
             */
            OrderRsp.prototype.result = null;
    
            /**
             * OrderRsp orderId.
             * @member {string} orderId
             * @memberof hall.OrderRsp
             * @instance
             */
            OrderRsp.prototype.orderId = "";
    
            /**
             * OrderRsp goodId.
             * @member {number} goodId
             * @memberof hall.OrderRsp
             * @instance
             */
            OrderRsp.prototype.goodId = 0;
    
            /**
             * OrderRsp payType.
             * @member {number} payType
             * @memberof hall.OrderRsp
             * @instance
             */
            OrderRsp.prototype.payType = 0;
    
            /**
             * OrderRsp extraJson.
             * @member {string} extraJson
             * @memberof hall.OrderRsp
             * @instance
             */
            OrderRsp.prototype.extraJson = "";
    
            /**
             * Creates a new OrderRsp instance using the specified properties.
             * @function create
             * @memberof hall.OrderRsp
             * @static
             * @param {hall.IOrderRsp=} [properties] Properties to set
             * @returns {hall.OrderRsp} OrderRsp instance
             */
            OrderRsp.create = function create(properties) {
                return new OrderRsp(properties);
            };
    
            /**
             * Encodes the specified OrderRsp message. Does not implicitly {@link hall.OrderRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.OrderRsp
             * @static
             * @param {hall.IOrderRsp} message OrderRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.orderId != null && message.hasOwnProperty("orderId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.goodId);
                if (message.payType != null && message.hasOwnProperty("payType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.payType);
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.extraJson);
                return writer;
            };
    
            /**
             * Encodes the specified OrderRsp message, length delimited. Does not implicitly {@link hall.OrderRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.OrderRsp
             * @static
             * @param {hall.IOrderRsp} message OrderRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OrderRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.OrderRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.OrderRsp} OrderRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.OrderRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.orderId = reader.string();
                        break;
                    case 3:
                        message.goodId = reader.uint32();
                        break;
                    case 4:
                        message.payType = reader.uint32();
                        break;
                    case 5:
                        message.extraJson = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OrderRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.OrderRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.OrderRsp} OrderRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OrderRsp message.
             * @function verify
             * @memberof hall.OrderRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OrderRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.orderId != null && message.hasOwnProperty("orderId"))
                    if (!$util.isString(message.orderId))
                        return "orderId: string expected";
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    if (!$util.isInteger(message.goodId))
                        return "goodId: integer expected";
                if (message.payType != null && message.hasOwnProperty("payType"))
                    if (!$util.isInteger(message.payType))
                        return "payType: integer expected";
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    if (!$util.isString(message.extraJson))
                        return "extraJson: string expected";
                return null;
            };
    
            /**
             * Creates an OrderRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.OrderRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.OrderRsp} OrderRsp
             */
            OrderRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.OrderRsp)
                    return object;
                var message = new $root.hall.OrderRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.OrderRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.orderId != null)
                    message.orderId = String(object.orderId);
                if (object.goodId != null)
                    message.goodId = object.goodId >>> 0;
                if (object.payType != null)
                    message.payType = object.payType >>> 0;
                if (object.extraJson != null)
                    message.extraJson = String(object.extraJson);
                return message;
            };
    
            /**
             * Creates a plain object from an OrderRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.OrderRsp
             * @static
             * @param {hall.OrderRsp} message OrderRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OrderRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.orderId = "";
                    object.goodId = 0;
                    object.payType = 0;
                    object.extraJson = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.orderId != null && message.hasOwnProperty("orderId"))
                    object.orderId = message.orderId;
                if (message.goodId != null && message.hasOwnProperty("goodId"))
                    object.goodId = message.goodId;
                if (message.payType != null && message.hasOwnProperty("payType"))
                    object.payType = message.payType;
                if (message.extraJson != null && message.hasOwnProperty("extraJson"))
                    object.extraJson = message.extraJson;
                return object;
            };
    
            /**
             * Converts this OrderRsp to JSON.
             * @function toJSON
             * @memberof hall.OrderRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OrderRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OrderRsp;
        })();
    
        hall.ExchangeReq = (function() {
    
            /**
             * Properties of an ExchangeReq.
             * @memberof hall
             * @interface IExchangeReq
             * @property {common.IRequest} request ExchangeReq request
             * @property {number|null} [id] ExchangeReq id
             */
    
            /**
             * Constructs a new ExchangeReq.
             * @memberof hall
             * @classdesc Represents an ExchangeReq.
             * @implements IExchangeReq
             * @constructor
             * @param {hall.IExchangeReq=} [properties] Properties to set
             */
            function ExchangeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ExchangeReq request.
             * @member {common.IRequest} request
             * @memberof hall.ExchangeReq
             * @instance
             */
            ExchangeReq.prototype.request = null;
    
            /**
             * ExchangeReq id.
             * @member {number} id
             * @memberof hall.ExchangeReq
             * @instance
             */
            ExchangeReq.prototype.id = 0;
    
            /**
             * Creates a new ExchangeReq instance using the specified properties.
             * @function create
             * @memberof hall.ExchangeReq
             * @static
             * @param {hall.IExchangeReq=} [properties] Properties to set
             * @returns {hall.ExchangeReq} ExchangeReq instance
             */
            ExchangeReq.create = function create(properties) {
                return new ExchangeReq(properties);
            };
    
            /**
             * Encodes the specified ExchangeReq message. Does not implicitly {@link hall.ExchangeReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ExchangeReq
             * @static
             * @param {hall.IExchangeReq} message ExchangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified ExchangeReq message, length delimited. Does not implicitly {@link hall.ExchangeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ExchangeReq
             * @static
             * @param {hall.IExchangeReq} message ExchangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ExchangeReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ExchangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ExchangeReq} ExchangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ExchangeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an ExchangeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ExchangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ExchangeReq} ExchangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ExchangeReq message.
             * @function verify
             * @memberof hall.ExchangeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExchangeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates an ExchangeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ExchangeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ExchangeReq} ExchangeReq
             */
            ExchangeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ExchangeReq)
                    return object;
                var message = new $root.hall.ExchangeReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ExchangeReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an ExchangeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ExchangeReq
             * @static
             * @param {hall.ExchangeReq} message ExchangeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExchangeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this ExchangeReq to JSON.
             * @function toJSON
             * @memberof hall.ExchangeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExchangeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ExchangeReq;
        })();
    
        hall.ExchangeRsp = (function() {
    
            /**
             * Properties of an ExchangeRsp.
             * @memberof hall
             * @interface IExchangeRsp
             * @property {common.IResult|null} [result] ExchangeRsp result
             * @property {number|null} [id] ExchangeRsp id
             * @property {common.IWallet|null} [wallet] ExchangeRsp wallet
             * @property {Array.<common.IProp>|null} [prop] ExchangeRsp prop
             */
    
            /**
             * Constructs a new ExchangeRsp.
             * @memberof hall
             * @classdesc Represents an ExchangeRsp.
             * @implements IExchangeRsp
             * @constructor
             * @param {hall.IExchangeRsp=} [properties] Properties to set
             */
            function ExchangeRsp(properties) {
                this.prop = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ExchangeRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ExchangeRsp
             * @instance
             */
            ExchangeRsp.prototype.result = null;
    
            /**
             * ExchangeRsp id.
             * @member {number} id
             * @memberof hall.ExchangeRsp
             * @instance
             */
            ExchangeRsp.prototype.id = 0;
    
            /**
             * ExchangeRsp wallet.
             * @member {common.IWallet|null|undefined} wallet
             * @memberof hall.ExchangeRsp
             * @instance
             */
            ExchangeRsp.prototype.wallet = null;
    
            /**
             * ExchangeRsp prop.
             * @member {Array.<common.IProp>} prop
             * @memberof hall.ExchangeRsp
             * @instance
             */
            ExchangeRsp.prototype.prop = $util.emptyArray;
    
            /**
             * Creates a new ExchangeRsp instance using the specified properties.
             * @function create
             * @memberof hall.ExchangeRsp
             * @static
             * @param {hall.IExchangeRsp=} [properties] Properties to set
             * @returns {hall.ExchangeRsp} ExchangeRsp instance
             */
            ExchangeRsp.create = function create(properties) {
                return new ExchangeRsp(properties);
            };
    
            /**
             * Encodes the specified ExchangeRsp message. Does not implicitly {@link hall.ExchangeRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ExchangeRsp
             * @static
             * @param {hall.IExchangeRsp} message ExchangeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    $root.common.Wallet.encode(message.wallet, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.prop != null && message.prop.length)
                    for (var i = 0; i < message.prop.length; ++i)
                        $root.common.Prop.encode(message.prop[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ExchangeRsp message, length delimited. Does not implicitly {@link hall.ExchangeRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ExchangeRsp
             * @static
             * @param {hall.IExchangeRsp} message ExchangeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExchangeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ExchangeRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ExchangeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ExchangeRsp} ExchangeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ExchangeRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    case 3:
                        message.wallet = $root.common.Wallet.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.prop && message.prop.length))
                            message.prop = [];
                        message.prop.push($root.common.Prop.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ExchangeRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ExchangeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ExchangeRsp} ExchangeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExchangeRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ExchangeRsp message.
             * @function verify
             * @memberof hall.ExchangeRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExchangeRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.wallet != null && message.hasOwnProperty("wallet")) {
                    var error = $root.common.Wallet.verify(message.wallet);
                    if (error)
                        return "wallet." + error;
                }
                if (message.prop != null && message.hasOwnProperty("prop")) {
                    if (!Array.isArray(message.prop))
                        return "prop: array expected";
                    for (var i = 0; i < message.prop.length; ++i) {
                        var error = $root.common.Prop.verify(message.prop[i]);
                        if (error)
                            return "prop." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an ExchangeRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ExchangeRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ExchangeRsp} ExchangeRsp
             */
            ExchangeRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ExchangeRsp)
                    return object;
                var message = new $root.hall.ExchangeRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ExchangeRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.wallet != null) {
                    if (typeof object.wallet !== "object")
                        throw TypeError(".hall.ExchangeRsp.wallet: object expected");
                    message.wallet = $root.common.Wallet.fromObject(object.wallet);
                }
                if (object.prop) {
                    if (!Array.isArray(object.prop))
                        throw TypeError(".hall.ExchangeRsp.prop: array expected");
                    message.prop = [];
                    for (var i = 0; i < object.prop.length; ++i) {
                        if (typeof object.prop[i] !== "object")
                            throw TypeError(".hall.ExchangeRsp.prop: object expected");
                        message.prop[i] = $root.common.Prop.fromObject(object.prop[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from an ExchangeRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ExchangeRsp
             * @static
             * @param {hall.ExchangeRsp} message ExchangeRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExchangeRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.prop = [];
                if (options.defaults) {
                    object.result = null;
                    object.id = 0;
                    object.wallet = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    object.wallet = $root.common.Wallet.toObject(message.wallet, options);
                if (message.prop && message.prop.length) {
                    object.prop = [];
                    for (var j = 0; j < message.prop.length; ++j)
                        object.prop[j] = $root.common.Prop.toObject(message.prop[j], options);
                }
                return object;
            };
    
            /**
             * Converts this ExchangeRsp to JSON.
             * @function toJSON
             * @memberof hall.ExchangeRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExchangeRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ExchangeRsp;
        })();
    
        hall.DeliverGoodsRsp = (function() {
    
            /**
             * Properties of a DeliverGoodsRsp.
             * @memberof hall
             * @interface IDeliverGoodsRsp
             * @property {common.IResult|null} [result] DeliverGoodsRsp result
             * @property {number|null} [num] DeliverGoodsRsp num
             * @property {number|null} [total] DeliverGoodsRsp total
             * @property {string|null} [msg] DeliverGoodsRsp msg
             */
    
            /**
             * Constructs a new DeliverGoodsRsp.
             * @memberof hall
             * @classdesc Represents a DeliverGoodsRsp.
             * @implements IDeliverGoodsRsp
             * @constructor
             * @param {hall.IDeliverGoodsRsp=} [properties] Properties to set
             */
            function DeliverGoodsRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DeliverGoodsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.DeliverGoodsRsp
             * @instance
             */
            DeliverGoodsRsp.prototype.result = null;
    
            /**
             * DeliverGoodsRsp num.
             * @member {number} num
             * @memberof hall.DeliverGoodsRsp
             * @instance
             */
            DeliverGoodsRsp.prototype.num = 0;
    
            /**
             * DeliverGoodsRsp total.
             * @member {number} total
             * @memberof hall.DeliverGoodsRsp
             * @instance
             */
            DeliverGoodsRsp.prototype.total = 0;
    
            /**
             * DeliverGoodsRsp msg.
             * @member {string} msg
             * @memberof hall.DeliverGoodsRsp
             * @instance
             */
            DeliverGoodsRsp.prototype.msg = "";
    
            /**
             * Creates a new DeliverGoodsRsp instance using the specified properties.
             * @function create
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {hall.IDeliverGoodsRsp=} [properties] Properties to set
             * @returns {hall.DeliverGoodsRsp} DeliverGoodsRsp instance
             */
            DeliverGoodsRsp.create = function create(properties) {
                return new DeliverGoodsRsp(properties);
            };
    
            /**
             * Encodes the specified DeliverGoodsRsp message. Does not implicitly {@link hall.DeliverGoodsRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {hall.IDeliverGoodsRsp} message DeliverGoodsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeliverGoodsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
                if (message.total != null && message.hasOwnProperty("total"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.total);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.msg);
                return writer;
            };
    
            /**
             * Encodes the specified DeliverGoodsRsp message, length delimited. Does not implicitly {@link hall.DeliverGoodsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {hall.IDeliverGoodsRsp} message DeliverGoodsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeliverGoodsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DeliverGoodsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.DeliverGoodsRsp} DeliverGoodsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeliverGoodsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.DeliverGoodsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.num = reader.uint32();
                        break;
                    case 3:
                        message.total = reader.uint32();
                        break;
                    case 4:
                        message.msg = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DeliverGoodsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.DeliverGoodsRsp} DeliverGoodsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeliverGoodsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DeliverGoodsRsp message.
             * @function verify
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeliverGoodsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                return null;
            };
    
            /**
             * Creates a DeliverGoodsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.DeliverGoodsRsp} DeliverGoodsRsp
             */
            DeliverGoodsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.DeliverGoodsRsp)
                    return object;
                var message = new $root.hall.DeliverGoodsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.DeliverGoodsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.msg != null)
                    message.msg = String(object.msg);
                return message;
            };
    
            /**
             * Creates a plain object from a DeliverGoodsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.DeliverGoodsRsp
             * @static
             * @param {hall.DeliverGoodsRsp} message DeliverGoodsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeliverGoodsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.num = 0;
                    object.total = 0;
                    object.msg = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                return object;
            };
    
            /**
             * Converts this DeliverGoodsRsp to JSON.
             * @function toJSON
             * @memberof hall.DeliverGoodsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeliverGoodsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DeliverGoodsRsp;
        })();
    
        hall.UploadImageReq = (function() {
    
            /**
             * Properties of an UploadImageReq.
             * @memberof hall
             * @interface IUploadImageReq
             * @property {common.IRequest} request UploadImageReq request
             * @property {number|null} [count] UploadImageReq count
             * @property {number|null} [index] UploadImageReq index
             * @property {Uint8Array|null} [data] UploadImageReq data
             */
    
            /**
             * Constructs a new UploadImageReq.
             * @memberof hall
             * @classdesc Represents an UploadImageReq.
             * @implements IUploadImageReq
             * @constructor
             * @param {hall.IUploadImageReq=} [properties] Properties to set
             */
            function UploadImageReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * UploadImageReq request.
             * @member {common.IRequest} request
             * @memberof hall.UploadImageReq
             * @instance
             */
            UploadImageReq.prototype.request = null;
    
            /**
             * UploadImageReq count.
             * @member {number} count
             * @memberof hall.UploadImageReq
             * @instance
             */
            UploadImageReq.prototype.count = 0;
    
            /**
             * UploadImageReq index.
             * @member {number} index
             * @memberof hall.UploadImageReq
             * @instance
             */
            UploadImageReq.prototype.index = 0;
    
            /**
             * UploadImageReq data.
             * @member {Uint8Array} data
             * @memberof hall.UploadImageReq
             * @instance
             */
            UploadImageReq.prototype.data = $util.newBuffer([]);
    
            /**
             * Creates a new UploadImageReq instance using the specified properties.
             * @function create
             * @memberof hall.UploadImageReq
             * @static
             * @param {hall.IUploadImageReq=} [properties] Properties to set
             * @returns {hall.UploadImageReq} UploadImageReq instance
             */
            UploadImageReq.create = function create(properties) {
                return new UploadImageReq(properties);
            };
    
            /**
             * Encodes the specified UploadImageReq message. Does not implicitly {@link hall.UploadImageReq.verify|verify} messages.
             * @function encode
             * @memberof hall.UploadImageReq
             * @static
             * @param {hall.IUploadImageReq} message UploadImageReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UploadImageReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.count);
                if (message.index != null && message.hasOwnProperty("index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
                if (message.data != null && message.hasOwnProperty("data"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                return writer;
            };
    
            /**
             * Encodes the specified UploadImageReq message, length delimited. Does not implicitly {@link hall.UploadImageReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.UploadImageReq
             * @static
             * @param {hall.IUploadImageReq} message UploadImageReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UploadImageReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an UploadImageReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.UploadImageReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.UploadImageReq} UploadImageReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UploadImageReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.UploadImageReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.count = reader.uint32();
                        break;
                    case 3:
                        message.index = reader.uint32();
                        break;
                    case 4:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an UploadImageReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.UploadImageReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.UploadImageReq} UploadImageReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UploadImageReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an UploadImageReq message.
             * @function verify
             * @memberof hall.UploadImageReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UploadImageReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };
    
            /**
             * Creates an UploadImageReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.UploadImageReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.UploadImageReq} UploadImageReq
             */
            UploadImageReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.UploadImageReq)
                    return object;
                var message = new $root.hall.UploadImageReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.UploadImageReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.count != null)
                    message.count = object.count >>> 0;
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };
    
            /**
             * Creates a plain object from an UploadImageReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.UploadImageReq
             * @static
             * @param {hall.UploadImageReq} message UploadImageReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UploadImageReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.count = 0;
                    object.index = 0;
                    object.data = options.bytes === String ? "" : [];
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };
    
            /**
             * Converts this UploadImageReq to JSON.
             * @function toJSON
             * @memberof hall.UploadImageReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UploadImageReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return UploadImageReq;
        })();
    
        hall.UploadImageRsp = (function() {
    
            /**
             * Properties of an UploadImageRsp.
             * @memberof hall
             * @interface IUploadImageRsp
             * @property {common.IResult|null} [result] UploadImageRsp result
             * @property {string|null} [imgUrl] UploadImageRsp imgUrl
             * @property {string|null} [imgUrlSmall] UploadImageRsp imgUrlSmall
             */
    
            /**
             * Constructs a new UploadImageRsp.
             * @memberof hall
             * @classdesc Represents an UploadImageRsp.
             * @implements IUploadImageRsp
             * @constructor
             * @param {hall.IUploadImageRsp=} [properties] Properties to set
             */
            function UploadImageRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * UploadImageRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.UploadImageRsp
             * @instance
             */
            UploadImageRsp.prototype.result = null;
    
            /**
             * UploadImageRsp imgUrl.
             * @member {string} imgUrl
             * @memberof hall.UploadImageRsp
             * @instance
             */
            UploadImageRsp.prototype.imgUrl = "";
    
            /**
             * UploadImageRsp imgUrlSmall.
             * @member {string} imgUrlSmall
             * @memberof hall.UploadImageRsp
             * @instance
             */
            UploadImageRsp.prototype.imgUrlSmall = "";
    
            /**
             * Creates a new UploadImageRsp instance using the specified properties.
             * @function create
             * @memberof hall.UploadImageRsp
             * @static
             * @param {hall.IUploadImageRsp=} [properties] Properties to set
             * @returns {hall.UploadImageRsp} UploadImageRsp instance
             */
            UploadImageRsp.create = function create(properties) {
                return new UploadImageRsp(properties);
            };
    
            /**
             * Encodes the specified UploadImageRsp message. Does not implicitly {@link hall.UploadImageRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.UploadImageRsp
             * @static
             * @param {hall.IUploadImageRsp} message UploadImageRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UploadImageRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.imgUrl != null && message.hasOwnProperty("imgUrl"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.imgUrl);
                if (message.imgUrlSmall != null && message.hasOwnProperty("imgUrlSmall"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.imgUrlSmall);
                return writer;
            };
    
            /**
             * Encodes the specified UploadImageRsp message, length delimited. Does not implicitly {@link hall.UploadImageRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.UploadImageRsp
             * @static
             * @param {hall.IUploadImageRsp} message UploadImageRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UploadImageRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an UploadImageRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.UploadImageRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.UploadImageRsp} UploadImageRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UploadImageRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.UploadImageRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.imgUrl = reader.string();
                        break;
                    case 3:
                        message.imgUrlSmall = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an UploadImageRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.UploadImageRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.UploadImageRsp} UploadImageRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UploadImageRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an UploadImageRsp message.
             * @function verify
             * @memberof hall.UploadImageRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UploadImageRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.imgUrl != null && message.hasOwnProperty("imgUrl"))
                    if (!$util.isString(message.imgUrl))
                        return "imgUrl: string expected";
                if (message.imgUrlSmall != null && message.hasOwnProperty("imgUrlSmall"))
                    if (!$util.isString(message.imgUrlSmall))
                        return "imgUrlSmall: string expected";
                return null;
            };
    
            /**
             * Creates an UploadImageRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.UploadImageRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.UploadImageRsp} UploadImageRsp
             */
            UploadImageRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.UploadImageRsp)
                    return object;
                var message = new $root.hall.UploadImageRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.UploadImageRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.imgUrl != null)
                    message.imgUrl = String(object.imgUrl);
                if (object.imgUrlSmall != null)
                    message.imgUrlSmall = String(object.imgUrlSmall);
                return message;
            };
    
            /**
             * Creates a plain object from an UploadImageRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.UploadImageRsp
             * @static
             * @param {hall.UploadImageRsp} message UploadImageRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UploadImageRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.imgUrl = "";
                    object.imgUrlSmall = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.imgUrl != null && message.hasOwnProperty("imgUrl"))
                    object.imgUrl = message.imgUrl;
                if (message.imgUrlSmall != null && message.hasOwnProperty("imgUrlSmall"))
                    object.imgUrlSmall = message.imgUrlSmall;
                return object;
            };
    
            /**
             * Converts this UploadImageRsp to JSON.
             * @function toJSON
             * @memberof hall.UploadImageRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UploadImageRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return UploadImageRsp;
        })();
    
        hall.FeedbackReq = (function() {
    
            /**
             * Properties of a FeedbackReq.
             * @memberof hall
             * @interface IFeedbackReq
             * @property {common.IRequest} request FeedbackReq request
             */
    
            /**
             * Constructs a new FeedbackReq.
             * @memberof hall
             * @classdesc Represents a FeedbackReq.
             * @implements IFeedbackReq
             * @constructor
             * @param {hall.IFeedbackReq=} [properties] Properties to set
             */
            function FeedbackReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FeedbackReq request.
             * @member {common.IRequest} request
             * @memberof hall.FeedbackReq
             * @instance
             */
            FeedbackReq.prototype.request = null;
    
            /**
             * Creates a new FeedbackReq instance using the specified properties.
             * @function create
             * @memberof hall.FeedbackReq
             * @static
             * @param {hall.IFeedbackReq=} [properties] Properties to set
             * @returns {hall.FeedbackReq} FeedbackReq instance
             */
            FeedbackReq.create = function create(properties) {
                return new FeedbackReq(properties);
            };
    
            /**
             * Encodes the specified FeedbackReq message. Does not implicitly {@link hall.FeedbackReq.verify|verify} messages.
             * @function encode
             * @memberof hall.FeedbackReq
             * @static
             * @param {hall.IFeedbackReq} message FeedbackReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedbackReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FeedbackReq message, length delimited. Does not implicitly {@link hall.FeedbackReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FeedbackReq
             * @static
             * @param {hall.IFeedbackReq} message FeedbackReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedbackReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FeedbackReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FeedbackReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FeedbackReq} FeedbackReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedbackReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FeedbackReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a FeedbackReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FeedbackReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FeedbackReq} FeedbackReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedbackReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FeedbackReq message.
             * @function verify
             * @memberof hall.FeedbackReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeedbackReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a FeedbackReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FeedbackReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FeedbackReq} FeedbackReq
             */
            FeedbackReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FeedbackReq)
                    return object;
                var message = new $root.hall.FeedbackReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.FeedbackReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FeedbackReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FeedbackReq
             * @static
             * @param {hall.FeedbackReq} message FeedbackReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeedbackReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this FeedbackReq to JSON.
             * @function toJSON
             * @memberof hall.FeedbackReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeedbackReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FeedbackReq;
        })();
    
        hall.FeedRecord = (function() {
    
            /**
             * Properties of a FeedRecord.
             * @memberof hall
             * @interface IFeedRecord
             * @property {number|null} [type] FeedRecord type
             * @property {string|null} [msg] FeedRecord msg
             * @property {string|null} [nick] FeedRecord nick
             * @property {number|null} [time] FeedRecord time
             */
    
            /**
             * Constructs a new FeedRecord.
             * @memberof hall
             * @classdesc Represents a FeedRecord.
             * @implements IFeedRecord
             * @constructor
             * @param {hall.IFeedRecord=} [properties] Properties to set
             */
            function FeedRecord(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FeedRecord type.
             * @member {number} type
             * @memberof hall.FeedRecord
             * @instance
             */
            FeedRecord.prototype.type = 0;
    
            /**
             * FeedRecord msg.
             * @member {string} msg
             * @memberof hall.FeedRecord
             * @instance
             */
            FeedRecord.prototype.msg = "";
    
            /**
             * FeedRecord nick.
             * @member {string} nick
             * @memberof hall.FeedRecord
             * @instance
             */
            FeedRecord.prototype.nick = "";
    
            /**
             * FeedRecord time.
             * @member {number} time
             * @memberof hall.FeedRecord
             * @instance
             */
            FeedRecord.prototype.time = 0;
    
            /**
             * Creates a new FeedRecord instance using the specified properties.
             * @function create
             * @memberof hall.FeedRecord
             * @static
             * @param {hall.IFeedRecord=} [properties] Properties to set
             * @returns {hall.FeedRecord} FeedRecord instance
             */
            FeedRecord.create = function create(properties) {
                return new FeedRecord(properties);
            };
    
            /**
             * Encodes the specified FeedRecord message. Does not implicitly {@link hall.FeedRecord.verify|verify} messages.
             * @function encode
             * @memberof hall.FeedRecord
             * @static
             * @param {hall.IFeedRecord} message FeedRecord message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedRecord.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.nick);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time);
                return writer;
            };
    
            /**
             * Encodes the specified FeedRecord message, length delimited. Does not implicitly {@link hall.FeedRecord.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FeedRecord
             * @static
             * @param {hall.IFeedRecord} message FeedRecord message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedRecord.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FeedRecord message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FeedRecord
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FeedRecord} FeedRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedRecord.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FeedRecord();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.uint32();
                        break;
                    case 2:
                        message.msg = reader.string();
                        break;
                    case 3:
                        message.nick = reader.string();
                        break;
                    case 4:
                        message.time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FeedRecord message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FeedRecord
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FeedRecord} FeedRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedRecord.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FeedRecord message.
             * @function verify
             * @memberof hall.FeedRecord
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeedRecord.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                return null;
            };
    
            /**
             * Creates a FeedRecord message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FeedRecord
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FeedRecord} FeedRecord
             */
            FeedRecord.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FeedRecord)
                    return object;
                var message = new $root.hall.FeedRecord();
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.msg != null)
                    message.msg = String(object.msg);
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.time != null)
                    message.time = object.time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FeedRecord message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FeedRecord
             * @static
             * @param {hall.FeedRecord} message FeedRecord
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeedRecord.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.msg = "";
                    object.nick = "";
                    object.time = 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                return object;
            };
    
            /**
             * Converts this FeedRecord to JSON.
             * @function toJSON
             * @memberof hall.FeedRecord
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeedRecord.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FeedRecord;
        })();
    
        hall.FeedbackRsp = (function() {
    
            /**
             * Properties of a FeedbackRsp.
             * @memberof hall
             * @interface IFeedbackRsp
             * @property {common.IResult|null} [result] FeedbackRsp result
             * @property {Array.<hall.IFeedRecord>|null} [records] FeedbackRsp records
             */
    
            /**
             * Constructs a new FeedbackRsp.
             * @memberof hall
             * @classdesc Represents a FeedbackRsp.
             * @implements IFeedbackRsp
             * @constructor
             * @param {hall.IFeedbackRsp=} [properties] Properties to set
             */
            function FeedbackRsp(properties) {
                this.records = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FeedbackRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.FeedbackRsp
             * @instance
             */
            FeedbackRsp.prototype.result = null;
    
            /**
             * FeedbackRsp records.
             * @member {Array.<hall.IFeedRecord>} records
             * @memberof hall.FeedbackRsp
             * @instance
             */
            FeedbackRsp.prototype.records = $util.emptyArray;
    
            /**
             * Creates a new FeedbackRsp instance using the specified properties.
             * @function create
             * @memberof hall.FeedbackRsp
             * @static
             * @param {hall.IFeedbackRsp=} [properties] Properties to set
             * @returns {hall.FeedbackRsp} FeedbackRsp instance
             */
            FeedbackRsp.create = function create(properties) {
                return new FeedbackRsp(properties);
            };
    
            /**
             * Encodes the specified FeedbackRsp message. Does not implicitly {@link hall.FeedbackRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.FeedbackRsp
             * @static
             * @param {hall.IFeedbackRsp} message FeedbackRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedbackRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.records != null && message.records.length)
                    for (var i = 0; i < message.records.length; ++i)
                        $root.hall.FeedRecord.encode(message.records[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FeedbackRsp message, length delimited. Does not implicitly {@link hall.FeedbackRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FeedbackRsp
             * @static
             * @param {hall.IFeedbackRsp} message FeedbackRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeedbackRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FeedbackRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FeedbackRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FeedbackRsp} FeedbackRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedbackRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FeedbackRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.records && message.records.length))
                            message.records = [];
                        message.records.push($root.hall.FeedRecord.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FeedbackRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FeedbackRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FeedbackRsp} FeedbackRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeedbackRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FeedbackRsp message.
             * @function verify
             * @memberof hall.FeedbackRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeedbackRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.records != null && message.hasOwnProperty("records")) {
                    if (!Array.isArray(message.records))
                        return "records: array expected";
                    for (var i = 0; i < message.records.length; ++i) {
                        var error = $root.hall.FeedRecord.verify(message.records[i]);
                        if (error)
                            return "records." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a FeedbackRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FeedbackRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FeedbackRsp} FeedbackRsp
             */
            FeedbackRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FeedbackRsp)
                    return object;
                var message = new $root.hall.FeedbackRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.FeedbackRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.records) {
                    if (!Array.isArray(object.records))
                        throw TypeError(".hall.FeedbackRsp.records: array expected");
                    message.records = [];
                    for (var i = 0; i < object.records.length; ++i) {
                        if (typeof object.records[i] !== "object")
                            throw TypeError(".hall.FeedbackRsp.records: object expected");
                        message.records[i] = $root.hall.FeedRecord.fromObject(object.records[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FeedbackRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FeedbackRsp
             * @static
             * @param {hall.FeedbackRsp} message FeedbackRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeedbackRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.records = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.records && message.records.length) {
                    object.records = [];
                    for (var j = 0; j < message.records.length; ++j)
                        object.records[j] = $root.hall.FeedRecord.toObject(message.records[j], options);
                }
                return object;
            };
    
            /**
             * Converts this FeedbackRsp to JSON.
             * @function toJSON
             * @memberof hall.FeedbackRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeedbackRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FeedbackRsp;
        })();
    
        hall.MailDelReq = (function() {
    
            /**
             * Properties of a MailDelReq.
             * @memberof hall
             * @interface IMailDelReq
             * @property {common.IRequest} request MailDelReq request
             * @property {number|null} [id] MailDelReq id
             */
    
            /**
             * Constructs a new MailDelReq.
             * @memberof hall
             * @classdesc Represents a MailDelReq.
             * @implements IMailDelReq
             * @constructor
             * @param {hall.IMailDelReq=} [properties] Properties to set
             */
            function MailDelReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailDelReq request.
             * @member {common.IRequest} request
             * @memberof hall.MailDelReq
             * @instance
             */
            MailDelReq.prototype.request = null;
    
            /**
             * MailDelReq id.
             * @member {number} id
             * @memberof hall.MailDelReq
             * @instance
             */
            MailDelReq.prototype.id = 0;
    
            /**
             * Creates a new MailDelReq instance using the specified properties.
             * @function create
             * @memberof hall.MailDelReq
             * @static
             * @param {hall.IMailDelReq=} [properties] Properties to set
             * @returns {hall.MailDelReq} MailDelReq instance
             */
            MailDelReq.create = function create(properties) {
                return new MailDelReq(properties);
            };
    
            /**
             * Encodes the specified MailDelReq message. Does not implicitly {@link hall.MailDelReq.verify|verify} messages.
             * @function encode
             * @memberof hall.MailDelReq
             * @static
             * @param {hall.IMailDelReq} message MailDelReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailDelReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified MailDelReq message, length delimited. Does not implicitly {@link hall.MailDelReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailDelReq
             * @static
             * @param {hall.IMailDelReq} message MailDelReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailDelReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailDelReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailDelReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailDelReq} MailDelReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailDelReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailDelReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MailDelReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailDelReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailDelReq} MailDelReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailDelReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailDelReq message.
             * @function verify
             * @memberof hall.MailDelReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailDelReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a MailDelReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailDelReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailDelReq} MailDelReq
             */
            MailDelReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailDelReq)
                    return object;
                var message = new $root.hall.MailDelReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.MailDelReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailDelReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailDelReq
             * @static
             * @param {hall.MailDelReq} message MailDelReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailDelReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this MailDelReq to JSON.
             * @function toJSON
             * @memberof hall.MailDelReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailDelReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailDelReq;
        })();
    
        hall.MailDelRsp = (function() {
    
            /**
             * Properties of a MailDelRsp.
             * @memberof hall
             * @interface IMailDelRsp
             * @property {common.IResult|null} [result] MailDelRsp result
             * @property {number|null} [id] MailDelRsp id
             */
    
            /**
             * Constructs a new MailDelRsp.
             * @memberof hall
             * @classdesc Represents a MailDelRsp.
             * @implements IMailDelRsp
             * @constructor
             * @param {hall.IMailDelRsp=} [properties] Properties to set
             */
            function MailDelRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailDelRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.MailDelRsp
             * @instance
             */
            MailDelRsp.prototype.result = null;
    
            /**
             * MailDelRsp id.
             * @member {number} id
             * @memberof hall.MailDelRsp
             * @instance
             */
            MailDelRsp.prototype.id = 0;
    
            /**
             * Creates a new MailDelRsp instance using the specified properties.
             * @function create
             * @memberof hall.MailDelRsp
             * @static
             * @param {hall.IMailDelRsp=} [properties] Properties to set
             * @returns {hall.MailDelRsp} MailDelRsp instance
             */
            MailDelRsp.create = function create(properties) {
                return new MailDelRsp(properties);
            };
    
            /**
             * Encodes the specified MailDelRsp message. Does not implicitly {@link hall.MailDelRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.MailDelRsp
             * @static
             * @param {hall.IMailDelRsp} message MailDelRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailDelRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified MailDelRsp message, length delimited. Does not implicitly {@link hall.MailDelRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailDelRsp
             * @static
             * @param {hall.IMailDelRsp} message MailDelRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailDelRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailDelRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailDelRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailDelRsp} MailDelRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailDelRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailDelRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MailDelRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailDelRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailDelRsp} MailDelRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailDelRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailDelRsp message.
             * @function verify
             * @memberof hall.MailDelRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailDelRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a MailDelRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailDelRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailDelRsp} MailDelRsp
             */
            MailDelRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailDelRsp)
                    return object;
                var message = new $root.hall.MailDelRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.MailDelRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailDelRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailDelRsp
             * @static
             * @param {hall.MailDelRsp} message MailDelRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailDelRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.id = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this MailDelRsp to JSON.
             * @function toJSON
             * @memberof hall.MailDelRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailDelRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailDelRsp;
        })();
    
        hall.MailboxReq = (function() {
    
            /**
             * Properties of a MailboxReq.
             * @memberof hall
             * @interface IMailboxReq
             * @property {common.IRequest} request MailboxReq request
             * @property {number|null} [id] MailboxReq id
             */
    
            /**
             * Constructs a new MailboxReq.
             * @memberof hall
             * @classdesc Represents a MailboxReq.
             * @implements IMailboxReq
             * @constructor
             * @param {hall.IMailboxReq=} [properties] Properties to set
             */
            function MailboxReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxReq request.
             * @member {common.IRequest} request
             * @memberof hall.MailboxReq
             * @instance
             */
            MailboxReq.prototype.request = null;
    
            /**
             * MailboxReq id.
             * @member {number} id
             * @memberof hall.MailboxReq
             * @instance
             */
            MailboxReq.prototype.id = 0;
    
            /**
             * Creates a new MailboxReq instance using the specified properties.
             * @function create
             * @memberof hall.MailboxReq
             * @static
             * @param {hall.IMailboxReq=} [properties] Properties to set
             * @returns {hall.MailboxReq} MailboxReq instance
             */
            MailboxReq.create = function create(properties) {
                return new MailboxReq(properties);
            };
    
            /**
             * Encodes the specified MailboxReq message. Does not implicitly {@link hall.MailboxReq.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxReq
             * @static
             * @param {hall.IMailboxReq} message MailboxReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified MailboxReq message, length delimited. Does not implicitly {@link hall.MailboxReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxReq
             * @static
             * @param {hall.IMailboxReq} message MailboxReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxReq} MailboxReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MailboxReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxReq} MailboxReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxReq message.
             * @function verify
             * @memberof hall.MailboxReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a MailboxReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxReq} MailboxReq
             */
            MailboxReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxReq)
                    return object;
                var message = new $root.hall.MailboxReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.MailboxReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxReq
             * @static
             * @param {hall.MailboxReq} message MailboxReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this MailboxReq to JSON.
             * @function toJSON
             * @memberof hall.MailboxReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxReq;
        })();
    
        hall.MailInfo = (function() {
    
            /**
             * Properties of a MailInfo.
             * @memberof hall
             * @interface IMailInfo
             * @property {number|null} [id] MailInfo id
             * @property {number|null} [type] MailInfo type
             * @property {string|null} [title] MailInfo title
             * @property {string|null} [content] MailInfo content
             * @property {number|null} [time] MailInfo time
             * @property {number|null} [senderId] MailInfo senderId
             * @property {string|null} [senderName] MailInfo senderName
             * @property {number|null} [link] MailInfo link
             */
    
            /**
             * Constructs a new MailInfo.
             * @memberof hall
             * @classdesc Represents a MailInfo.
             * @implements IMailInfo
             * @constructor
             * @param {hall.IMailInfo=} [properties] Properties to set
             */
            function MailInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailInfo id.
             * @member {number} id
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.id = 0;
    
            /**
             * MailInfo type.
             * @member {number} type
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.type = 0;
    
            /**
             * MailInfo title.
             * @member {string} title
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.title = "";
    
            /**
             * MailInfo content.
             * @member {string} content
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.content = "";
    
            /**
             * MailInfo time.
             * @member {number} time
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.time = 0;
    
            /**
             * MailInfo senderId.
             * @member {number} senderId
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.senderId = 0;
    
            /**
             * MailInfo senderName.
             * @member {string} senderName
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.senderName = "";
    
            /**
             * MailInfo link.
             * @member {number} link
             * @memberof hall.MailInfo
             * @instance
             */
            MailInfo.prototype.link = 0;
    
            /**
             * Creates a new MailInfo instance using the specified properties.
             * @function create
             * @memberof hall.MailInfo
             * @static
             * @param {hall.IMailInfo=} [properties] Properties to set
             * @returns {hall.MailInfo} MailInfo instance
             */
            MailInfo.create = function create(properties) {
                return new MailInfo(properties);
            };
    
            /**
             * Encodes the specified MailInfo message. Does not implicitly {@link hall.MailInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.MailInfo
             * @static
             * @param {hall.IMailInfo} message MailInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.time);
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.senderId);
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.senderName);
                if (message.link != null && message.hasOwnProperty("link"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.link);
                return writer;
            };
    
            /**
             * Encodes the specified MailInfo message, length delimited. Does not implicitly {@link hall.MailInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailInfo
             * @static
             * @param {hall.IMailInfo} message MailInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailInfo} MailInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        message.title = reader.string();
                        break;
                    case 4:
                        message.content = reader.string();
                        break;
                    case 5:
                        message.time = reader.uint32();
                        break;
                    case 6:
                        message.senderId = reader.uint32();
                        break;
                    case 7:
                        message.senderName = reader.string();
                        break;
                    case 8:
                        message.link = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MailInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailInfo} MailInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailInfo message.
             * @function verify
             * @memberof hall.MailInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    if (!$util.isInteger(message.senderId))
                        return "senderId: integer expected";
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    if (!$util.isString(message.senderName))
                        return "senderName: string expected";
                if (message.link != null && message.hasOwnProperty("link"))
                    if (!$util.isInteger(message.link))
                        return "link: integer expected";
                return null;
            };
    
            /**
             * Creates a MailInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailInfo} MailInfo
             */
            MailInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailInfo)
                    return object;
                var message = new $root.hall.MailInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.content != null)
                    message.content = String(object.content);
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.senderId != null)
                    message.senderId = object.senderId >>> 0;
                if (object.senderName != null)
                    message.senderName = String(object.senderName);
                if (object.link != null)
                    message.link = object.link >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailInfo
             * @static
             * @param {hall.MailInfo} message MailInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.type = 0;
                    object.title = "";
                    object.content = "";
                    object.time = 0;
                    object.senderId = 0;
                    object.senderName = "";
                    object.link = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    object.senderId = message.senderId;
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    object.senderName = message.senderName;
                if (message.link != null && message.hasOwnProperty("link"))
                    object.link = message.link;
                return object;
            };
    
            /**
             * Converts this MailInfo to JSON.
             * @function toJSON
             * @memberof hall.MailInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailInfo;
        })();
    
        hall.MailboxRsp = (function() {
    
            /**
             * Properties of a MailboxRsp.
             * @memberof hall
             * @interface IMailboxRsp
             * @property {common.IResult|null} [result] MailboxRsp result
             * @property {Array.<hall.IMailInfo>|null} [mails] MailboxRsp mails
             */
    
            /**
             * Constructs a new MailboxRsp.
             * @memberof hall
             * @classdesc Represents a MailboxRsp.
             * @implements IMailboxRsp
             * @constructor
             * @param {hall.IMailboxRsp=} [properties] Properties to set
             */
            function MailboxRsp(properties) {
                this.mails = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.MailboxRsp
             * @instance
             */
            MailboxRsp.prototype.result = null;
    
            /**
             * MailboxRsp mails.
             * @member {Array.<hall.IMailInfo>} mails
             * @memberof hall.MailboxRsp
             * @instance
             */
            MailboxRsp.prototype.mails = $util.emptyArray;
    
            /**
             * Creates a new MailboxRsp instance using the specified properties.
             * @function create
             * @memberof hall.MailboxRsp
             * @static
             * @param {hall.IMailboxRsp=} [properties] Properties to set
             * @returns {hall.MailboxRsp} MailboxRsp instance
             */
            MailboxRsp.create = function create(properties) {
                return new MailboxRsp(properties);
            };
    
            /**
             * Encodes the specified MailboxRsp message. Does not implicitly {@link hall.MailboxRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxRsp
             * @static
             * @param {hall.IMailboxRsp} message MailboxRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.mails != null && message.mails.length)
                    for (var i = 0; i < message.mails.length; ++i)
                        $root.hall.MailInfo.encode(message.mails[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified MailboxRsp message, length delimited. Does not implicitly {@link hall.MailboxRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxRsp
             * @static
             * @param {hall.IMailboxRsp} message MailboxRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxRsp} MailboxRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.mails && message.mails.length))
                            message.mails = [];
                        message.mails.push($root.hall.MailInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MailboxRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxRsp} MailboxRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxRsp message.
             * @function verify
             * @memberof hall.MailboxRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.mails != null && message.hasOwnProperty("mails")) {
                    if (!Array.isArray(message.mails))
                        return "mails: array expected";
                    for (var i = 0; i < message.mails.length; ++i) {
                        var error = $root.hall.MailInfo.verify(message.mails[i]);
                        if (error)
                            return "mails." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a MailboxRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxRsp} MailboxRsp
             */
            MailboxRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxRsp)
                    return object;
                var message = new $root.hall.MailboxRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.MailboxRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.mails) {
                    if (!Array.isArray(object.mails))
                        throw TypeError(".hall.MailboxRsp.mails: array expected");
                    message.mails = [];
                    for (var i = 0; i < object.mails.length; ++i) {
                        if (typeof object.mails[i] !== "object")
                            throw TypeError(".hall.MailboxRsp.mails: object expected");
                        message.mails[i] = $root.hall.MailInfo.fromObject(object.mails[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxRsp
             * @static
             * @param {hall.MailboxRsp} message MailboxRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.mails = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.mails && message.mails.length) {
                    object.mails = [];
                    for (var j = 0; j < message.mails.length; ++j)
                        object.mails[j] = $root.hall.MailInfo.toObject(message.mails[j], options);
                }
                return object;
            };
    
            /**
             * Converts this MailboxRsp to JSON.
             * @function toJSON
             * @memberof hall.MailboxRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxRsp;
        })();
    
        hall.MailboxAwardReq = (function() {
    
            /**
             * Properties of a MailboxAwardReq.
             * @memberof hall
             * @interface IMailboxAwardReq
             * @property {common.IRequest} request MailboxAwardReq request
             * @property {number|null} [id] MailboxAwardReq id
             */
    
            /**
             * Constructs a new MailboxAwardReq.
             * @memberof hall
             * @classdesc Represents a MailboxAwardReq.
             * @implements IMailboxAwardReq
             * @constructor
             * @param {hall.IMailboxAwardReq=} [properties] Properties to set
             */
            function MailboxAwardReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxAwardReq request.
             * @member {common.IRequest} request
             * @memberof hall.MailboxAwardReq
             * @instance
             */
            MailboxAwardReq.prototype.request = null;
    
            /**
             * MailboxAwardReq id.
             * @member {number} id
             * @memberof hall.MailboxAwardReq
             * @instance
             */
            MailboxAwardReq.prototype.id = 0;
    
            /**
             * Creates a new MailboxAwardReq instance using the specified properties.
             * @function create
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {hall.IMailboxAwardReq=} [properties] Properties to set
             * @returns {hall.MailboxAwardReq} MailboxAwardReq instance
             */
            MailboxAwardReq.create = function create(properties) {
                return new MailboxAwardReq(properties);
            };
    
            /**
             * Encodes the specified MailboxAwardReq message. Does not implicitly {@link hall.MailboxAwardReq.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {hall.IMailboxAwardReq} message MailboxAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxAwardReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified MailboxAwardReq message, length delimited. Does not implicitly {@link hall.MailboxAwardReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {hall.IMailboxAwardReq} message MailboxAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxAwardReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxAwardReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxAwardReq} MailboxAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxAwardReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxAwardReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MailboxAwardReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxAwardReq} MailboxAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxAwardReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxAwardReq message.
             * @function verify
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxAwardReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a MailboxAwardReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxAwardReq} MailboxAwardReq
             */
            MailboxAwardReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxAwardReq)
                    return object;
                var message = new $root.hall.MailboxAwardReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.MailboxAwardReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxAwardReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxAwardReq
             * @static
             * @param {hall.MailboxAwardReq} message MailboxAwardReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxAwardReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this MailboxAwardReq to JSON.
             * @function toJSON
             * @memberof hall.MailboxAwardReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxAwardReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxAwardReq;
        })();
    
        hall.MailboxAwardRsp = (function() {
    
            /**
             * Properties of a MailboxAwardRsp.
             * @memberof hall
             * @interface IMailboxAwardRsp
             * @property {common.IResult|null} [result] MailboxAwardRsp result
             * @property {number|null} [id] MailboxAwardRsp id
             * @property {common.IWallet|null} [wallet] MailboxAwardRsp wallet
             * @property {Array.<common.IProp>|null} [props] MailboxAwardRsp props
             */
    
            /**
             * Constructs a new MailboxAwardRsp.
             * @memberof hall
             * @classdesc Represents a MailboxAwardRsp.
             * @implements IMailboxAwardRsp
             * @constructor
             * @param {hall.IMailboxAwardRsp=} [properties] Properties to set
             */
            function MailboxAwardRsp(properties) {
                this.props = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxAwardRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.MailboxAwardRsp
             * @instance
             */
            MailboxAwardRsp.prototype.result = null;
    
            /**
             * MailboxAwardRsp id.
             * @member {number} id
             * @memberof hall.MailboxAwardRsp
             * @instance
             */
            MailboxAwardRsp.prototype.id = 0;
    
            /**
             * MailboxAwardRsp wallet.
             * @member {common.IWallet|null|undefined} wallet
             * @memberof hall.MailboxAwardRsp
             * @instance
             */
            MailboxAwardRsp.prototype.wallet = null;
    
            /**
             * MailboxAwardRsp props.
             * @member {Array.<common.IProp>} props
             * @memberof hall.MailboxAwardRsp
             * @instance
             */
            MailboxAwardRsp.prototype.props = $util.emptyArray;
    
            /**
             * Creates a new MailboxAwardRsp instance using the specified properties.
             * @function create
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {hall.IMailboxAwardRsp=} [properties] Properties to set
             * @returns {hall.MailboxAwardRsp} MailboxAwardRsp instance
             */
            MailboxAwardRsp.create = function create(properties) {
                return new MailboxAwardRsp(properties);
            };
    
            /**
             * Encodes the specified MailboxAwardRsp message. Does not implicitly {@link hall.MailboxAwardRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {hall.IMailboxAwardRsp} message MailboxAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxAwardRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    $root.common.Wallet.encode(message.wallet, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.props != null && message.props.length)
                    for (var i = 0; i < message.props.length; ++i)
                        $root.common.Prop.encode(message.props[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified MailboxAwardRsp message, length delimited. Does not implicitly {@link hall.MailboxAwardRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {hall.IMailboxAwardRsp} message MailboxAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxAwardRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxAwardRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxAwardRsp} MailboxAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxAwardRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxAwardRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    case 3:
                        message.wallet = $root.common.Wallet.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.props && message.props.length))
                            message.props = [];
                        message.props.push($root.common.Prop.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MailboxAwardRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxAwardRsp} MailboxAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxAwardRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxAwardRsp message.
             * @function verify
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxAwardRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.wallet != null && message.hasOwnProperty("wallet")) {
                    var error = $root.common.Wallet.verify(message.wallet);
                    if (error)
                        return "wallet." + error;
                }
                if (message.props != null && message.hasOwnProperty("props")) {
                    if (!Array.isArray(message.props))
                        return "props: array expected";
                    for (var i = 0; i < message.props.length; ++i) {
                        var error = $root.common.Prop.verify(message.props[i]);
                        if (error)
                            return "props." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a MailboxAwardRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxAwardRsp} MailboxAwardRsp
             */
            MailboxAwardRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxAwardRsp)
                    return object;
                var message = new $root.hall.MailboxAwardRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.MailboxAwardRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.wallet != null) {
                    if (typeof object.wallet !== "object")
                        throw TypeError(".hall.MailboxAwardRsp.wallet: object expected");
                    message.wallet = $root.common.Wallet.fromObject(object.wallet);
                }
                if (object.props) {
                    if (!Array.isArray(object.props))
                        throw TypeError(".hall.MailboxAwardRsp.props: array expected");
                    message.props = [];
                    for (var i = 0; i < object.props.length; ++i) {
                        if (typeof object.props[i] !== "object")
                            throw TypeError(".hall.MailboxAwardRsp.props: object expected");
                        message.props[i] = $root.common.Prop.fromObject(object.props[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxAwardRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxAwardRsp
             * @static
             * @param {hall.MailboxAwardRsp} message MailboxAwardRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxAwardRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.props = [];
                if (options.defaults) {
                    object.result = null;
                    object.id = 0;
                    object.wallet = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    object.wallet = $root.common.Wallet.toObject(message.wallet, options);
                if (message.props && message.props.length) {
                    object.props = [];
                    for (var j = 0; j < message.props.length; ++j)
                        object.props[j] = $root.common.Prop.toObject(message.props[j], options);
                }
                return object;
            };
    
            /**
             * Converts this MailboxAwardRsp to JSON.
             * @function toJSON
             * @memberof hall.MailboxAwardRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxAwardRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxAwardRsp;
        })();
    
        hall.MailboxInviteReq = (function() {
    
            /**
             * Properties of a MailboxInviteReq.
             * @memberof hall
             * @interface IMailboxInviteReq
             * @property {common.IRequest} request MailboxInviteReq request
             * @property {number|null} [id] MailboxInviteReq id
             * @property {number|null} [userId] MailboxInviteReq userId
             * @property {number|null} [clubId] MailboxInviteReq clubId
             * @property {boolean|null} [accept] MailboxInviteReq accept
             */
    
            /**
             * Constructs a new MailboxInviteReq.
             * @memberof hall
             * @classdesc Represents a MailboxInviteReq.
             * @implements IMailboxInviteReq
             * @constructor
             * @param {hall.IMailboxInviteReq=} [properties] Properties to set
             */
            function MailboxInviteReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxInviteReq request.
             * @member {common.IRequest} request
             * @memberof hall.MailboxInviteReq
             * @instance
             */
            MailboxInviteReq.prototype.request = null;
    
            /**
             * MailboxInviteReq id.
             * @member {number} id
             * @memberof hall.MailboxInviteReq
             * @instance
             */
            MailboxInviteReq.prototype.id = 0;
    
            /**
             * MailboxInviteReq userId.
             * @member {number} userId
             * @memberof hall.MailboxInviteReq
             * @instance
             */
            MailboxInviteReq.prototype.userId = 0;
    
            /**
             * MailboxInviteReq clubId.
             * @member {number} clubId
             * @memberof hall.MailboxInviteReq
             * @instance
             */
            MailboxInviteReq.prototype.clubId = 0;
    
            /**
             * MailboxInviteReq accept.
             * @member {boolean} accept
             * @memberof hall.MailboxInviteReq
             * @instance
             */
            MailboxInviteReq.prototype.accept = false;
    
            /**
             * Creates a new MailboxInviteReq instance using the specified properties.
             * @function create
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {hall.IMailboxInviteReq=} [properties] Properties to set
             * @returns {hall.MailboxInviteReq} MailboxInviteReq instance
             */
            MailboxInviteReq.create = function create(properties) {
                return new MailboxInviteReq(properties);
            };
    
            /**
             * Encodes the specified MailboxInviteReq message. Does not implicitly {@link hall.MailboxInviteReq.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {hall.IMailboxInviteReq} message MailboxInviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxInviteReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.clubId);
                if (message.accept != null && message.hasOwnProperty("accept"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.accept);
                return writer;
            };
    
            /**
             * Encodes the specified MailboxInviteReq message, length delimited. Does not implicitly {@link hall.MailboxInviteReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {hall.IMailboxInviteReq} message MailboxInviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxInviteReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxInviteReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxInviteReq} MailboxInviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxInviteReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxInviteReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    case 4:
                        message.clubId = reader.uint32();
                        break;
                    case 5:
                        message.accept = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MailboxInviteReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxInviteReq} MailboxInviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxInviteReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxInviteReq message.
             * @function verify
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxInviteReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                if (message.accept != null && message.hasOwnProperty("accept"))
                    if (typeof message.accept !== "boolean")
                        return "accept: boolean expected";
                return null;
            };
    
            /**
             * Creates a MailboxInviteReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxInviteReq} MailboxInviteReq
             */
            MailboxInviteReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxInviteReq)
                    return object;
                var message = new $root.hall.MailboxInviteReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.MailboxInviteReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.clubId != null)
                    message.clubId = object.clubId >>> 0;
                if (object.accept != null)
                    message.accept = Boolean(object.accept);
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxInviteReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxInviteReq
             * @static
             * @param {hall.MailboxInviteReq} message MailboxInviteReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxInviteReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = 0;
                    object.userId = 0;
                    object.clubId = 0;
                    object.accept = false;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                if (message.accept != null && message.hasOwnProperty("accept"))
                    object.accept = message.accept;
                return object;
            };
    
            /**
             * Converts this MailboxInviteReq to JSON.
             * @function toJSON
             * @memberof hall.MailboxInviteReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxInviteReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxInviteReq;
        })();
    
        hall.MailboxInviteRsp = (function() {
    
            /**
             * Properties of a MailboxInviteRsp.
             * @memberof hall
             * @interface IMailboxInviteRsp
             * @property {common.IResult|null} [result] MailboxInviteRsp result
             * @property {number|null} [id] MailboxInviteRsp id
             */
    
            /**
             * Constructs a new MailboxInviteRsp.
             * @memberof hall
             * @classdesc Represents a MailboxInviteRsp.
             * @implements IMailboxInviteRsp
             * @constructor
             * @param {hall.IMailboxInviteRsp=} [properties] Properties to set
             */
            function MailboxInviteRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MailboxInviteRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.MailboxInviteRsp
             * @instance
             */
            MailboxInviteRsp.prototype.result = null;
    
            /**
             * MailboxInviteRsp id.
             * @member {number} id
             * @memberof hall.MailboxInviteRsp
             * @instance
             */
            MailboxInviteRsp.prototype.id = 0;
    
            /**
             * Creates a new MailboxInviteRsp instance using the specified properties.
             * @function create
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {hall.IMailboxInviteRsp=} [properties] Properties to set
             * @returns {hall.MailboxInviteRsp} MailboxInviteRsp instance
             */
            MailboxInviteRsp.create = function create(properties) {
                return new MailboxInviteRsp(properties);
            };
    
            /**
             * Encodes the specified MailboxInviteRsp message. Does not implicitly {@link hall.MailboxInviteRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {hall.IMailboxInviteRsp} message MailboxInviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxInviteRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified MailboxInviteRsp message, length delimited. Does not implicitly {@link hall.MailboxInviteRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {hall.IMailboxInviteRsp} message MailboxInviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MailboxInviteRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MailboxInviteRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.MailboxInviteRsp} MailboxInviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxInviteRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.MailboxInviteRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MailboxInviteRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.MailboxInviteRsp} MailboxInviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MailboxInviteRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MailboxInviteRsp message.
             * @function verify
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MailboxInviteRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                return null;
            };
    
            /**
             * Creates a MailboxInviteRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.MailboxInviteRsp} MailboxInviteRsp
             */
            MailboxInviteRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.MailboxInviteRsp)
                    return object;
                var message = new $root.hall.MailboxInviteRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.MailboxInviteRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.id != null)
                    message.id = object.id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MailboxInviteRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.MailboxInviteRsp
             * @static
             * @param {hall.MailboxInviteRsp} message MailboxInviteRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MailboxInviteRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.id = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this MailboxInviteRsp to JSON.
             * @function toJSON
             * @memberof hall.MailboxInviteRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MailboxInviteRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MailboxInviteRsp;
        })();
    
        hall.LikeReq = (function() {
    
            /**
             * Properties of a LikeReq.
             * @memberof hall
             * @interface ILikeReq
             * @property {common.IRequest} request LikeReq request
             * @property {number|null} [likeId] LikeReq likeId
             * @property {number|null} [like] LikeReq like
             */
    
            /**
             * Constructs a new LikeReq.
             * @memberof hall
             * @classdesc Represents a LikeReq.
             * @implements ILikeReq
             * @constructor
             * @param {hall.ILikeReq=} [properties] Properties to set
             */
            function LikeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LikeReq request.
             * @member {common.IRequest} request
             * @memberof hall.LikeReq
             * @instance
             */
            LikeReq.prototype.request = null;
    
            /**
             * LikeReq likeId.
             * @member {number} likeId
             * @memberof hall.LikeReq
             * @instance
             */
            LikeReq.prototype.likeId = 0;
    
            /**
             * LikeReq like.
             * @member {number} like
             * @memberof hall.LikeReq
             * @instance
             */
            LikeReq.prototype.like = 0;
    
            /**
             * Creates a new LikeReq instance using the specified properties.
             * @function create
             * @memberof hall.LikeReq
             * @static
             * @param {hall.ILikeReq=} [properties] Properties to set
             * @returns {hall.LikeReq} LikeReq instance
             */
            LikeReq.create = function create(properties) {
                return new LikeReq(properties);
            };
    
            /**
             * Encodes the specified LikeReq message. Does not implicitly {@link hall.LikeReq.verify|verify} messages.
             * @function encode
             * @memberof hall.LikeReq
             * @static
             * @param {hall.ILikeReq} message LikeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LikeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.likeId);
                if (message.like != null && message.hasOwnProperty("like"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.like);
                return writer;
            };
    
            /**
             * Encodes the specified LikeReq message, length delimited. Does not implicitly {@link hall.LikeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.LikeReq
             * @static
             * @param {hall.ILikeReq} message LikeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LikeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LikeReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.LikeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.LikeReq} LikeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LikeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.LikeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.likeId = reader.uint32();
                        break;
                    case 3:
                        message.like = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a LikeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.LikeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.LikeReq} LikeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LikeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LikeReq message.
             * @function verify
             * @memberof hall.LikeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LikeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    if (!$util.isInteger(message.likeId))
                        return "likeId: integer expected";
                if (message.like != null && message.hasOwnProperty("like"))
                    if (!$util.isInteger(message.like))
                        return "like: integer expected";
                return null;
            };
    
            /**
             * Creates a LikeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.LikeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.LikeReq} LikeReq
             */
            LikeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.LikeReq)
                    return object;
                var message = new $root.hall.LikeReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.LikeReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.likeId != null)
                    message.likeId = object.likeId >>> 0;
                if (object.like != null)
                    message.like = object.like | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LikeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.LikeReq
             * @static
             * @param {hall.LikeReq} message LikeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LikeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.likeId = 0;
                    object.like = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    object.likeId = message.likeId;
                if (message.like != null && message.hasOwnProperty("like"))
                    object.like = message.like;
                return object;
            };
    
            /**
             * Converts this LikeReq to JSON.
             * @function toJSON
             * @memberof hall.LikeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LikeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LikeReq;
        })();
    
        hall.LikeRsp = (function() {
    
            /**
             * Properties of a LikeRsp.
             * @memberof hall
             * @interface ILikeRsp
             * @property {common.IResult|null} [result] LikeRsp result
             * @property {number|null} [likeId] LikeRsp likeId
             * @property {number|null} [like] LikeRsp like
             * @property {number|null} [charm] LikeRsp charm
             */
    
            /**
             * Constructs a new LikeRsp.
             * @memberof hall
             * @classdesc Represents a LikeRsp.
             * @implements ILikeRsp
             * @constructor
             * @param {hall.ILikeRsp=} [properties] Properties to set
             */
            function LikeRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LikeRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.LikeRsp
             * @instance
             */
            LikeRsp.prototype.result = null;
    
            /**
             * LikeRsp likeId.
             * @member {number} likeId
             * @memberof hall.LikeRsp
             * @instance
             */
            LikeRsp.prototype.likeId = 0;
    
            /**
             * LikeRsp like.
             * @member {number} like
             * @memberof hall.LikeRsp
             * @instance
             */
            LikeRsp.prototype.like = 0;
    
            /**
             * LikeRsp charm.
             * @member {number} charm
             * @memberof hall.LikeRsp
             * @instance
             */
            LikeRsp.prototype.charm = 0;
    
            /**
             * Creates a new LikeRsp instance using the specified properties.
             * @function create
             * @memberof hall.LikeRsp
             * @static
             * @param {hall.ILikeRsp=} [properties] Properties to set
             * @returns {hall.LikeRsp} LikeRsp instance
             */
            LikeRsp.create = function create(properties) {
                return new LikeRsp(properties);
            };
    
            /**
             * Encodes the specified LikeRsp message. Does not implicitly {@link hall.LikeRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.LikeRsp
             * @static
             * @param {hall.ILikeRsp} message LikeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LikeRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.likeId);
                if (message.like != null && message.hasOwnProperty("like"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.like);
                if (message.charm != null && message.hasOwnProperty("charm"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.charm);
                return writer;
            };
    
            /**
             * Encodes the specified LikeRsp message, length delimited. Does not implicitly {@link hall.LikeRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.LikeRsp
             * @static
             * @param {hall.ILikeRsp} message LikeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LikeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LikeRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.LikeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.LikeRsp} LikeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LikeRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.LikeRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.likeId = reader.uint32();
                        break;
                    case 3:
                        message.like = reader.int32();
                        break;
                    case 4:
                        message.charm = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LikeRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.LikeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.LikeRsp} LikeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LikeRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LikeRsp message.
             * @function verify
             * @memberof hall.LikeRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LikeRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    if (!$util.isInteger(message.likeId))
                        return "likeId: integer expected";
                if (message.like != null && message.hasOwnProperty("like"))
                    if (!$util.isInteger(message.like))
                        return "like: integer expected";
                if (message.charm != null && message.hasOwnProperty("charm"))
                    if (!$util.isInteger(message.charm))
                        return "charm: integer expected";
                return null;
            };
    
            /**
             * Creates a LikeRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.LikeRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.LikeRsp} LikeRsp
             */
            LikeRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.LikeRsp)
                    return object;
                var message = new $root.hall.LikeRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.LikeRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.likeId != null)
                    message.likeId = object.likeId >>> 0;
                if (object.like != null)
                    message.like = object.like | 0;
                if (object.charm != null)
                    message.charm = object.charm | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LikeRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.LikeRsp
             * @static
             * @param {hall.LikeRsp} message LikeRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LikeRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.likeId = 0;
                    object.like = 0;
                    object.charm = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.likeId != null && message.hasOwnProperty("likeId"))
                    object.likeId = message.likeId;
                if (message.like != null && message.hasOwnProperty("like"))
                    object.like = message.like;
                if (message.charm != null && message.hasOwnProperty("charm"))
                    object.charm = message.charm;
                return object;
            };
    
            /**
             * Converts this LikeRsp to JSON.
             * @function toJSON
             * @memberof hall.LikeRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LikeRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LikeRsp;
        })();
    
        hall.PropReq = (function() {
    
            /**
             * Properties of a PropReq.
             * @memberof hall
             * @interface IPropReq
             * @property {common.IRequest} request PropReq request
             */
    
            /**
             * Constructs a new PropReq.
             * @memberof hall
             * @classdesc Represents a PropReq.
             * @implements IPropReq
             * @constructor
             * @param {hall.IPropReq=} [properties] Properties to set
             */
            function PropReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PropReq request.
             * @member {common.IRequest} request
             * @memberof hall.PropReq
             * @instance
             */
            PropReq.prototype.request = null;
    
            /**
             * Creates a new PropReq instance using the specified properties.
             * @function create
             * @memberof hall.PropReq
             * @static
             * @param {hall.IPropReq=} [properties] Properties to set
             * @returns {hall.PropReq} PropReq instance
             */
            PropReq.create = function create(properties) {
                return new PropReq(properties);
            };
    
            /**
             * Encodes the specified PropReq message. Does not implicitly {@link hall.PropReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PropReq
             * @static
             * @param {hall.IPropReq} message PropReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PropReq message, length delimited. Does not implicitly {@link hall.PropReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PropReq
             * @static
             * @param {hall.IPropReq} message PropReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PropReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PropReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PropReq} PropReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PropReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a PropReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PropReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PropReq} PropReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PropReq message.
             * @function verify
             * @memberof hall.PropReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PropReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a PropReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PropReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PropReq} PropReq
             */
            PropReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PropReq)
                    return object;
                var message = new $root.hall.PropReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PropReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PropReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PropReq
             * @static
             * @param {hall.PropReq} message PropReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PropReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this PropReq to JSON.
             * @function toJSON
             * @memberof hall.PropReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PropReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PropReq;
        })();
    
        hall.PropRsp = (function() {
    
            /**
             * Properties of a PropRsp.
             * @memberof hall
             * @interface IPropRsp
             * @property {common.IResult|null} [result] PropRsp result
             * @property {Array.<common.IProp>|null} [props] PropRsp props
             */
    
            /**
             * Constructs a new PropRsp.
             * @memberof hall
             * @classdesc Represents a PropRsp.
             * @implements IPropRsp
             * @constructor
             * @param {hall.IPropRsp=} [properties] Properties to set
             */
            function PropRsp(properties) {
                this.props = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PropRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PropRsp
             * @instance
             */
            PropRsp.prototype.result = null;
    
            /**
             * PropRsp props.
             * @member {Array.<common.IProp>} props
             * @memberof hall.PropRsp
             * @instance
             */
            PropRsp.prototype.props = $util.emptyArray;
    
            /**
             * Creates a new PropRsp instance using the specified properties.
             * @function create
             * @memberof hall.PropRsp
             * @static
             * @param {hall.IPropRsp=} [properties] Properties to set
             * @returns {hall.PropRsp} PropRsp instance
             */
            PropRsp.create = function create(properties) {
                return new PropRsp(properties);
            };
    
            /**
             * Encodes the specified PropRsp message. Does not implicitly {@link hall.PropRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PropRsp
             * @static
             * @param {hall.IPropRsp} message PropRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.props != null && message.props.length)
                    for (var i = 0; i < message.props.length; ++i)
                        $root.common.Prop.encode(message.props[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PropRsp message, length delimited. Does not implicitly {@link hall.PropRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PropRsp
             * @static
             * @param {hall.IPropRsp} message PropRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PropRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PropRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PropRsp} PropRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PropRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.props && message.props.length))
                            message.props = [];
                        message.props.push($root.common.Prop.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PropRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PropRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PropRsp} PropRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PropRsp message.
             * @function verify
             * @memberof hall.PropRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PropRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.props != null && message.hasOwnProperty("props")) {
                    if (!Array.isArray(message.props))
                        return "props: array expected";
                    for (var i = 0; i < message.props.length; ++i) {
                        var error = $root.common.Prop.verify(message.props[i]);
                        if (error)
                            return "props." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PropRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PropRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PropRsp} PropRsp
             */
            PropRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PropRsp)
                    return object;
                var message = new $root.hall.PropRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PropRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.props) {
                    if (!Array.isArray(object.props))
                        throw TypeError(".hall.PropRsp.props: array expected");
                    message.props = [];
                    for (var i = 0; i < object.props.length; ++i) {
                        if (typeof object.props[i] !== "object")
                            throw TypeError(".hall.PropRsp.props: object expected");
                        message.props[i] = $root.common.Prop.fromObject(object.props[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PropRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PropRsp
             * @static
             * @param {hall.PropRsp} message PropRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PropRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.props = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.props && message.props.length) {
                    object.props = [];
                    for (var j = 0; j < message.props.length; ++j)
                        object.props[j] = $root.common.Prop.toObject(message.props[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PropRsp to JSON.
             * @function toJSON
             * @memberof hall.PropRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PropRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PropRsp;
        })();
    
        hall.WalletReq = (function() {
    
            /**
             * Properties of a WalletReq.
             * @memberof hall
             * @interface IWalletReq
             * @property {common.IRequest} request WalletReq request
             * @property {common.IWallet|null} [wallet] WalletReq wallet
             */
    
            /**
             * Constructs a new WalletReq.
             * @memberof hall
             * @classdesc Represents a WalletReq.
             * @implements IWalletReq
             * @constructor
             * @param {hall.IWalletReq=} [properties] Properties to set
             */
            function WalletReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WalletReq request.
             * @member {common.IRequest} request
             * @memberof hall.WalletReq
             * @instance
             */
            WalletReq.prototype.request = null;
    
            /**
             * WalletReq wallet.
             * @member {common.IWallet|null|undefined} wallet
             * @memberof hall.WalletReq
             * @instance
             */
            WalletReq.prototype.wallet = null;
    
            /**
             * Creates a new WalletReq instance using the specified properties.
             * @function create
             * @memberof hall.WalletReq
             * @static
             * @param {hall.IWalletReq=} [properties] Properties to set
             * @returns {hall.WalletReq} WalletReq instance
             */
            WalletReq.create = function create(properties) {
                return new WalletReq(properties);
            };
    
            /**
             * Encodes the specified WalletReq message. Does not implicitly {@link hall.WalletReq.verify|verify} messages.
             * @function encode
             * @memberof hall.WalletReq
             * @static
             * @param {hall.IWalletReq} message WalletReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WalletReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    $root.common.Wallet.encode(message.wallet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified WalletReq message, length delimited. Does not implicitly {@link hall.WalletReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WalletReq
             * @static
             * @param {hall.IWalletReq} message WalletReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WalletReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WalletReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WalletReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WalletReq} WalletReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WalletReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WalletReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.wallet = $root.common.Wallet.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a WalletReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WalletReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WalletReq} WalletReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WalletReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WalletReq message.
             * @function verify
             * @memberof hall.WalletReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WalletReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.wallet != null && message.hasOwnProperty("wallet")) {
                    var error = $root.common.Wallet.verify(message.wallet);
                    if (error)
                        return "wallet." + error;
                }
                return null;
            };
    
            /**
             * Creates a WalletReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WalletReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WalletReq} WalletReq
             */
            WalletReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WalletReq)
                    return object;
                var message = new $root.hall.WalletReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.WalletReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.wallet != null) {
                    if (typeof object.wallet !== "object")
                        throw TypeError(".hall.WalletReq.wallet: object expected");
                    message.wallet = $root.common.Wallet.fromObject(object.wallet);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a WalletReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WalletReq
             * @static
             * @param {hall.WalletReq} message WalletReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WalletReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.wallet = null;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    object.wallet = $root.common.Wallet.toObject(message.wallet, options);
                return object;
            };
    
            /**
             * Converts this WalletReq to JSON.
             * @function toJSON
             * @memberof hall.WalletReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WalletReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WalletReq;
        })();
    
        hall.WalletRsp = (function() {
    
            /**
             * Properties of a WalletRsp.
             * @memberof hall
             * @interface IWalletRsp
             * @property {common.IResult|null} [result] WalletRsp result
             * @property {common.IWallet|null} [wallet] WalletRsp wallet
             */
    
            /**
             * Constructs a new WalletRsp.
             * @memberof hall
             * @classdesc Represents a WalletRsp.
             * @implements IWalletRsp
             * @constructor
             * @param {hall.IWalletRsp=} [properties] Properties to set
             */
            function WalletRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WalletRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.WalletRsp
             * @instance
             */
            WalletRsp.prototype.result = null;
    
            /**
             * WalletRsp wallet.
             * @member {common.IWallet|null|undefined} wallet
             * @memberof hall.WalletRsp
             * @instance
             */
            WalletRsp.prototype.wallet = null;
    
            /**
             * Creates a new WalletRsp instance using the specified properties.
             * @function create
             * @memberof hall.WalletRsp
             * @static
             * @param {hall.IWalletRsp=} [properties] Properties to set
             * @returns {hall.WalletRsp} WalletRsp instance
             */
            WalletRsp.create = function create(properties) {
                return new WalletRsp(properties);
            };
    
            /**
             * Encodes the specified WalletRsp message. Does not implicitly {@link hall.WalletRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.WalletRsp
             * @static
             * @param {hall.IWalletRsp} message WalletRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WalletRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    $root.common.Wallet.encode(message.wallet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified WalletRsp message, length delimited. Does not implicitly {@link hall.WalletRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WalletRsp
             * @static
             * @param {hall.IWalletRsp} message WalletRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WalletRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WalletRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WalletRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WalletRsp} WalletRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WalletRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WalletRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.wallet = $root.common.Wallet.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WalletRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WalletRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WalletRsp} WalletRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WalletRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WalletRsp message.
             * @function verify
             * @memberof hall.WalletRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WalletRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.wallet != null && message.hasOwnProperty("wallet")) {
                    var error = $root.common.Wallet.verify(message.wallet);
                    if (error)
                        return "wallet." + error;
                }
                return null;
            };
    
            /**
             * Creates a WalletRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WalletRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WalletRsp} WalletRsp
             */
            WalletRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WalletRsp)
                    return object;
                var message = new $root.hall.WalletRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.WalletRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.wallet != null) {
                    if (typeof object.wallet !== "object")
                        throw TypeError(".hall.WalletRsp.wallet: object expected");
                    message.wallet = $root.common.Wallet.fromObject(object.wallet);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a WalletRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WalletRsp
             * @static
             * @param {hall.WalletRsp} message WalletRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WalletRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.wallet = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    object.wallet = $root.common.Wallet.toObject(message.wallet, options);
                return object;
            };
    
            /**
             * Converts this WalletRsp to JSON.
             * @function toJSON
             * @memberof hall.WalletRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WalletRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WalletRsp;
        })();
    
        hall.NickGenderReq = (function() {
    
            /**
             * Properties of a NickGenderReq.
             * @memberof hall
             * @interface INickGenderReq
             * @property {common.IRequest} request NickGenderReq request
             * @property {string|null} [nick] NickGenderReq nick
             * @property {number|null} [gender] NickGenderReq gender
             */
    
            /**
             * Constructs a new NickGenderReq.
             * @memberof hall
             * @classdesc Represents a NickGenderReq.
             * @implements INickGenderReq
             * @constructor
             * @param {hall.INickGenderReq=} [properties] Properties to set
             */
            function NickGenderReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * NickGenderReq request.
             * @member {common.IRequest} request
             * @memberof hall.NickGenderReq
             * @instance
             */
            NickGenderReq.prototype.request = null;
    
            /**
             * NickGenderReq nick.
             * @member {string} nick
             * @memberof hall.NickGenderReq
             * @instance
             */
            NickGenderReq.prototype.nick = "";
    
            /**
             * NickGenderReq gender.
             * @member {number} gender
             * @memberof hall.NickGenderReq
             * @instance
             */
            NickGenderReq.prototype.gender = 0;
    
            /**
             * Creates a new NickGenderReq instance using the specified properties.
             * @function create
             * @memberof hall.NickGenderReq
             * @static
             * @param {hall.INickGenderReq=} [properties] Properties to set
             * @returns {hall.NickGenderReq} NickGenderReq instance
             */
            NickGenderReq.create = function create(properties) {
                return new NickGenderReq(properties);
            };
    
            /**
             * Encodes the specified NickGenderReq message. Does not implicitly {@link hall.NickGenderReq.verify|verify} messages.
             * @function encode
             * @memberof hall.NickGenderReq
             * @static
             * @param {hall.INickGenderReq} message NickGenderReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NickGenderReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
                if (message.gender != null && message.hasOwnProperty("gender"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gender);
                return writer;
            };
    
            /**
             * Encodes the specified NickGenderReq message, length delimited. Does not implicitly {@link hall.NickGenderReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.NickGenderReq
             * @static
             * @param {hall.INickGenderReq} message NickGenderReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NickGenderReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a NickGenderReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.NickGenderReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.NickGenderReq} NickGenderReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NickGenderReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.NickGenderReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.gender = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a NickGenderReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.NickGenderReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.NickGenderReq} NickGenderReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NickGenderReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a NickGenderReq message.
             * @function verify
             * @memberof hall.NickGenderReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NickGenderReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.gender != null && message.hasOwnProperty("gender"))
                    if (!$util.isInteger(message.gender))
                        return "gender: integer expected";
                return null;
            };
    
            /**
             * Creates a NickGenderReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.NickGenderReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.NickGenderReq} NickGenderReq
             */
            NickGenderReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.NickGenderReq)
                    return object;
                var message = new $root.hall.NickGenderReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.NickGenderReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.gender != null)
                    message.gender = object.gender >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a NickGenderReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.NickGenderReq
             * @static
             * @param {hall.NickGenderReq} message NickGenderReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NickGenderReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.nick = "";
                    object.gender = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.gender != null && message.hasOwnProperty("gender"))
                    object.gender = message.gender;
                return object;
            };
    
            /**
             * Converts this NickGenderReq to JSON.
             * @function toJSON
             * @memberof hall.NickGenderReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NickGenderReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NickGenderReq;
        })();
    
        hall.NickGenderRsp = (function() {
    
            /**
             * Properties of a NickGenderRsp.
             * @memberof hall
             * @interface INickGenderRsp
             * @property {common.IResult|null} [result] NickGenderRsp result
             * @property {string|null} [nick] NickGenderRsp nick
             * @property {number|null} [gender] NickGenderRsp gender
             */
    
            /**
             * Constructs a new NickGenderRsp.
             * @memberof hall
             * @classdesc Represents a NickGenderRsp.
             * @implements INickGenderRsp
             * @constructor
             * @param {hall.INickGenderRsp=} [properties] Properties to set
             */
            function NickGenderRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * NickGenderRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.NickGenderRsp
             * @instance
             */
            NickGenderRsp.prototype.result = null;
    
            /**
             * NickGenderRsp nick.
             * @member {string} nick
             * @memberof hall.NickGenderRsp
             * @instance
             */
            NickGenderRsp.prototype.nick = "";
    
            /**
             * NickGenderRsp gender.
             * @member {number} gender
             * @memberof hall.NickGenderRsp
             * @instance
             */
            NickGenderRsp.prototype.gender = 0;
    
            /**
             * Creates a new NickGenderRsp instance using the specified properties.
             * @function create
             * @memberof hall.NickGenderRsp
             * @static
             * @param {hall.INickGenderRsp=} [properties] Properties to set
             * @returns {hall.NickGenderRsp} NickGenderRsp instance
             */
            NickGenderRsp.create = function create(properties) {
                return new NickGenderRsp(properties);
            };
    
            /**
             * Encodes the specified NickGenderRsp message. Does not implicitly {@link hall.NickGenderRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.NickGenderRsp
             * @static
             * @param {hall.INickGenderRsp} message NickGenderRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NickGenderRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
                if (message.gender != null && message.hasOwnProperty("gender"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gender);
                return writer;
            };
    
            /**
             * Encodes the specified NickGenderRsp message, length delimited. Does not implicitly {@link hall.NickGenderRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.NickGenderRsp
             * @static
             * @param {hall.INickGenderRsp} message NickGenderRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NickGenderRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a NickGenderRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.NickGenderRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.NickGenderRsp} NickGenderRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NickGenderRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.NickGenderRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.gender = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a NickGenderRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.NickGenderRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.NickGenderRsp} NickGenderRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NickGenderRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a NickGenderRsp message.
             * @function verify
             * @memberof hall.NickGenderRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NickGenderRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.gender != null && message.hasOwnProperty("gender"))
                    if (!$util.isInteger(message.gender))
                        return "gender: integer expected";
                return null;
            };
    
            /**
             * Creates a NickGenderRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.NickGenderRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.NickGenderRsp} NickGenderRsp
             */
            NickGenderRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.NickGenderRsp)
                    return object;
                var message = new $root.hall.NickGenderRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.NickGenderRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.gender != null)
                    message.gender = object.gender >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a NickGenderRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.NickGenderRsp
             * @static
             * @param {hall.NickGenderRsp} message NickGenderRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NickGenderRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.nick = "";
                    object.gender = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.gender != null && message.hasOwnProperty("gender"))
                    object.gender = message.gender;
                return object;
            };
    
            /**
             * Converts this NickGenderRsp to JSON.
             * @function toJSON
             * @memberof hall.NickGenderRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NickGenderRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NickGenderRsp;
        })();
    
        hall.SelfInfoReq = (function() {
    
            /**
             * Properties of a SelfInfoReq.
             * @memberof hall
             * @interface ISelfInfoReq
             * @property {common.IRequest} request SelfInfoReq request
             */
    
            /**
             * Constructs a new SelfInfoReq.
             * @memberof hall
             * @classdesc Represents a SelfInfoReq.
             * @implements ISelfInfoReq
             * @constructor
             * @param {hall.ISelfInfoReq=} [properties] Properties to set
             */
            function SelfInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SelfInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.SelfInfoReq
             * @instance
             */
            SelfInfoReq.prototype.request = null;
    
            /**
             * Creates a new SelfInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.SelfInfoReq
             * @static
             * @param {hall.ISelfInfoReq=} [properties] Properties to set
             * @returns {hall.SelfInfoReq} SelfInfoReq instance
             */
            SelfInfoReq.create = function create(properties) {
                return new SelfInfoReq(properties);
            };
    
            /**
             * Encodes the specified SelfInfoReq message. Does not implicitly {@link hall.SelfInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.SelfInfoReq
             * @static
             * @param {hall.ISelfInfoReq} message SelfInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelfInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SelfInfoReq message, length delimited. Does not implicitly {@link hall.SelfInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SelfInfoReq
             * @static
             * @param {hall.ISelfInfoReq} message SelfInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelfInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SelfInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SelfInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SelfInfoReq} SelfInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelfInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SelfInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SelfInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SelfInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SelfInfoReq} SelfInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelfInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SelfInfoReq message.
             * @function verify
             * @memberof hall.SelfInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SelfInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a SelfInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SelfInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SelfInfoReq} SelfInfoReq
             */
            SelfInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SelfInfoReq)
                    return object;
                var message = new $root.hall.SelfInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.SelfInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SelfInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SelfInfoReq
             * @static
             * @param {hall.SelfInfoReq} message SelfInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SelfInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this SelfInfoReq to JSON.
             * @function toJSON
             * @memberof hall.SelfInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SelfInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SelfInfoReq;
        })();
    
        hall.SelfInfoRsp = (function() {
    
            /**
             * Properties of a SelfInfoRsp.
             * @memberof hall
             * @interface ISelfInfoRsp
             * @property {common.IResult|null} [result] SelfInfoRsp result
             * @property {common.IPlayerInfo} baseInfo SelfInfoRsp baseInfo
             * @property {number|Long|null} [maxMoney] SelfInfoRsp maxMoney
             * @property {Array.<common.IProp>|null} [props] SelfInfoRsp props
             * @property {number|null} [charm] SelfInfoRsp charm
             * @property {number|null} [ip] SelfInfoRsp ip
             */
    
            /**
             * Constructs a new SelfInfoRsp.
             * @memberof hall
             * @classdesc Represents a SelfInfoRsp.
             * @implements ISelfInfoRsp
             * @constructor
             * @param {hall.ISelfInfoRsp=} [properties] Properties to set
             */
            function SelfInfoRsp(properties) {
                this.props = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SelfInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.result = null;
    
            /**
             * SelfInfoRsp baseInfo.
             * @member {common.IPlayerInfo} baseInfo
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.baseInfo = null;
    
            /**
             * SelfInfoRsp maxMoney.
             * @member {number|Long} maxMoney
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.maxMoney = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * SelfInfoRsp props.
             * @member {Array.<common.IProp>} props
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.props = $util.emptyArray;
    
            /**
             * SelfInfoRsp charm.
             * @member {number} charm
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.charm = 0;
    
            /**
             * SelfInfoRsp ip.
             * @member {number} ip
             * @memberof hall.SelfInfoRsp
             * @instance
             */
            SelfInfoRsp.prototype.ip = 0;
    
            /**
             * Creates a new SelfInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {hall.ISelfInfoRsp=} [properties] Properties to set
             * @returns {hall.SelfInfoRsp} SelfInfoRsp instance
             */
            SelfInfoRsp.create = function create(properties) {
                return new SelfInfoRsp(properties);
            };
    
            /**
             * Encodes the specified SelfInfoRsp message. Does not implicitly {@link hall.SelfInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {hall.ISelfInfoRsp} message SelfInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelfInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                $root.common.PlayerInfo.encode(message.baseInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.maxMoney != null && message.hasOwnProperty("maxMoney"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.maxMoney);
                if (message.props != null && message.props.length)
                    for (var i = 0; i < message.props.length; ++i)
                        $root.common.Prop.encode(message.props[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.charm != null && message.hasOwnProperty("charm"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.charm);
                if (message.ip != null && message.hasOwnProperty("ip"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ip);
                return writer;
            };
    
            /**
             * Encodes the specified SelfInfoRsp message, length delimited. Does not implicitly {@link hall.SelfInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {hall.ISelfInfoRsp} message SelfInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelfInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SelfInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SelfInfoRsp} SelfInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelfInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SelfInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.baseInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.maxMoney = reader.uint64();
                        break;
                    case 4:
                        if (!(message.props && message.props.length))
                            message.props = [];
                        message.props.push($root.common.Prop.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.charm = reader.int32();
                        break;
                    case 6:
                        message.ip = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("baseInfo"))
                    throw $util.ProtocolError("missing required 'baseInfo'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SelfInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SelfInfoRsp} SelfInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelfInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SelfInfoRsp message.
             * @function verify
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SelfInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                {
                    var error = $root.common.PlayerInfo.verify(message.baseInfo);
                    if (error)
                        return "baseInfo." + error;
                }
                if (message.maxMoney != null && message.hasOwnProperty("maxMoney"))
                    if (!$util.isInteger(message.maxMoney) && !(message.maxMoney && $util.isInteger(message.maxMoney.low) && $util.isInteger(message.maxMoney.high)))
                        return "maxMoney: integer|Long expected";
                if (message.props != null && message.hasOwnProperty("props")) {
                    if (!Array.isArray(message.props))
                        return "props: array expected";
                    for (var i = 0; i < message.props.length; ++i) {
                        var error = $root.common.Prop.verify(message.props[i]);
                        if (error)
                            return "props." + error;
                    }
                }
                if (message.charm != null && message.hasOwnProperty("charm"))
                    if (!$util.isInteger(message.charm))
                        return "charm: integer expected";
                if (message.ip != null && message.hasOwnProperty("ip"))
                    if (!$util.isInteger(message.ip))
                        return "ip: integer expected";
                return null;
            };
    
            /**
             * Creates a SelfInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SelfInfoRsp} SelfInfoRsp
             */
            SelfInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SelfInfoRsp)
                    return object;
                var message = new $root.hall.SelfInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.SelfInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.baseInfo != null) {
                    if (typeof object.baseInfo !== "object")
                        throw TypeError(".hall.SelfInfoRsp.baseInfo: object expected");
                    message.baseInfo = $root.common.PlayerInfo.fromObject(object.baseInfo);
                }
                if (object.maxMoney != null)
                    if ($util.Long)
                        (message.maxMoney = $util.Long.fromValue(object.maxMoney)).unsigned = true;
                    else if (typeof object.maxMoney === "string")
                        message.maxMoney = parseInt(object.maxMoney, 10);
                    else if (typeof object.maxMoney === "number")
                        message.maxMoney = object.maxMoney;
                    else if (typeof object.maxMoney === "object")
                        message.maxMoney = new $util.LongBits(object.maxMoney.low >>> 0, object.maxMoney.high >>> 0).toNumber(true);
                if (object.props) {
                    if (!Array.isArray(object.props))
                        throw TypeError(".hall.SelfInfoRsp.props: array expected");
                    message.props = [];
                    for (var i = 0; i < object.props.length; ++i) {
                        if (typeof object.props[i] !== "object")
                            throw TypeError(".hall.SelfInfoRsp.props: object expected");
                        message.props[i] = $root.common.Prop.fromObject(object.props[i]);
                    }
                }
                if (object.charm != null)
                    message.charm = object.charm | 0;
                if (object.ip != null)
                    message.ip = object.ip >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SelfInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SelfInfoRsp
             * @static
             * @param {hall.SelfInfoRsp} message SelfInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SelfInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.props = [];
                if (options.defaults) {
                    object.result = null;
                    object.baseInfo = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maxMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maxMoney = options.longs === String ? "0" : 0;
                    object.charm = 0;
                    object.ip = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.baseInfo != null && message.hasOwnProperty("baseInfo"))
                    object.baseInfo = $root.common.PlayerInfo.toObject(message.baseInfo, options);
                if (message.maxMoney != null && message.hasOwnProperty("maxMoney"))
                    if (typeof message.maxMoney === "number")
                        object.maxMoney = options.longs === String ? String(message.maxMoney) : message.maxMoney;
                    else
                        object.maxMoney = options.longs === String ? $util.Long.prototype.toString.call(message.maxMoney) : options.longs === Number ? new $util.LongBits(message.maxMoney.low >>> 0, message.maxMoney.high >>> 0).toNumber(true) : message.maxMoney;
                if (message.props && message.props.length) {
                    object.props = [];
                    for (var j = 0; j < message.props.length; ++j)
                        object.props[j] = $root.common.Prop.toObject(message.props[j], options);
                }
                if (message.charm != null && message.hasOwnProperty("charm"))
                    object.charm = message.charm;
                if (message.ip != null && message.hasOwnProperty("ip"))
                    object.ip = message.ip;
                return object;
            };
    
            /**
             * Converts this SelfInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.SelfInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SelfInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SelfInfoRsp;
        })();
    
        hall.UserInfoReq = (function() {
    
            /**
             * Properties of a UserInfoReq.
             * @memberof hall
             * @interface IUserInfoReq
             * @property {common.IRequest} request UserInfoReq request
             * @property {number|null} [uid] UserInfoReq uid
             */
    
            /**
             * Constructs a new UserInfoReq.
             * @memberof hall
             * @classdesc Represents a UserInfoReq.
             * @implements IUserInfoReq
             * @constructor
             * @param {hall.IUserInfoReq=} [properties] Properties to set
             */
            function UserInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * UserInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.UserInfoReq
             * @instance
             */
            UserInfoReq.prototype.request = null;
    
            /**
             * UserInfoReq uid.
             * @member {number} uid
             * @memberof hall.UserInfoReq
             * @instance
             */
            UserInfoReq.prototype.uid = 0;
    
            /**
             * Creates a new UserInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.UserInfoReq
             * @static
             * @param {hall.IUserInfoReq=} [properties] Properties to set
             * @returns {hall.UserInfoReq} UserInfoReq instance
             */
            UserInfoReq.create = function create(properties) {
                return new UserInfoReq(properties);
            };
    
            /**
             * Encodes the specified UserInfoReq message. Does not implicitly {@link hall.UserInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.UserInfoReq
             * @static
             * @param {hall.IUserInfoReq} message UserInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified UserInfoReq message, length delimited. Does not implicitly {@link hall.UserInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.UserInfoReq
             * @static
             * @param {hall.IUserInfoReq} message UserInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a UserInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.UserInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.UserInfoReq} UserInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.UserInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a UserInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.UserInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.UserInfoReq} UserInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a UserInfoReq message.
             * @function verify
             * @memberof hall.UserInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a UserInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.UserInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.UserInfoReq} UserInfoReq
             */
            UserInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.UserInfoReq)
                    return object;
                var message = new $root.hall.UserInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.UserInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a UserInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.UserInfoReq
             * @static
             * @param {hall.UserInfoReq} message UserInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.uid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this UserInfoReq to JSON.
             * @function toJSON
             * @memberof hall.UserInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return UserInfoReq;
        })();
    
        hall.UserInfoRsp = (function() {
    
            /**
             * Properties of a UserInfoRsp.
             * @memberof hall
             * @interface IUserInfoRsp
             * @property {common.IResult|null} [result] UserInfoRsp result
             * @property {common.IPlayerInfo} baseInfo UserInfoRsp baseInfo
             * @property {number|null} [ip] UserInfoRsp ip
             * @property {boolean|null} [isAgent] UserInfoRsp isAgent
             */
    
            /**
             * Constructs a new UserInfoRsp.
             * @memberof hall
             * @classdesc Represents a UserInfoRsp.
             * @implements IUserInfoRsp
             * @constructor
             * @param {hall.IUserInfoRsp=} [properties] Properties to set
             */
            function UserInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * UserInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.UserInfoRsp
             * @instance
             */
            UserInfoRsp.prototype.result = null;
    
            /**
             * UserInfoRsp baseInfo.
             * @member {common.IPlayerInfo} baseInfo
             * @memberof hall.UserInfoRsp
             * @instance
             */
            UserInfoRsp.prototype.baseInfo = null;
    
            /**
             * UserInfoRsp ip.
             * @member {number} ip
             * @memberof hall.UserInfoRsp
             * @instance
             */
            UserInfoRsp.prototype.ip = 0;
    
            /**
             * UserInfoRsp isAgent.
             * @member {boolean} isAgent
             * @memberof hall.UserInfoRsp
             * @instance
             */
            UserInfoRsp.prototype.isAgent = false;
    
            /**
             * Creates a new UserInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.UserInfoRsp
             * @static
             * @param {hall.IUserInfoRsp=} [properties] Properties to set
             * @returns {hall.UserInfoRsp} UserInfoRsp instance
             */
            UserInfoRsp.create = function create(properties) {
                return new UserInfoRsp(properties);
            };
    
            /**
             * Encodes the specified UserInfoRsp message. Does not implicitly {@link hall.UserInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.UserInfoRsp
             * @static
             * @param {hall.IUserInfoRsp} message UserInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                $root.common.PlayerInfo.encode(message.baseInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.ip != null && message.hasOwnProperty("ip"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ip);
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAgent);
                return writer;
            };
    
            /**
             * Encodes the specified UserInfoRsp message, length delimited. Does not implicitly {@link hall.UserInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.UserInfoRsp
             * @static
             * @param {hall.IUserInfoRsp} message UserInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a UserInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.UserInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.UserInfoRsp} UserInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.UserInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.baseInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.ip = reader.uint32();
                        break;
                    case 4:
                        message.isAgent = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("baseInfo"))
                    throw $util.ProtocolError("missing required 'baseInfo'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a UserInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.UserInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.UserInfoRsp} UserInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a UserInfoRsp message.
             * @function verify
             * @memberof hall.UserInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                {
                    var error = $root.common.PlayerInfo.verify(message.baseInfo);
                    if (error)
                        return "baseInfo." + error;
                }
                if (message.ip != null && message.hasOwnProperty("ip"))
                    if (!$util.isInteger(message.ip))
                        return "ip: integer expected";
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    if (typeof message.isAgent !== "boolean")
                        return "isAgent: boolean expected";
                return null;
            };
    
            /**
             * Creates a UserInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.UserInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.UserInfoRsp} UserInfoRsp
             */
            UserInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.UserInfoRsp)
                    return object;
                var message = new $root.hall.UserInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.UserInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.baseInfo != null) {
                    if (typeof object.baseInfo !== "object")
                        throw TypeError(".hall.UserInfoRsp.baseInfo: object expected");
                    message.baseInfo = $root.common.PlayerInfo.fromObject(object.baseInfo);
                }
                if (object.ip != null)
                    message.ip = object.ip >>> 0;
                if (object.isAgent != null)
                    message.isAgent = Boolean(object.isAgent);
                return message;
            };
    
            /**
             * Creates a plain object from a UserInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.UserInfoRsp
             * @static
             * @param {hall.UserInfoRsp} message UserInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.baseInfo = null;
                    object.ip = 0;
                    object.isAgent = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.baseInfo != null && message.hasOwnProperty("baseInfo"))
                    object.baseInfo = $root.common.PlayerInfo.toObject(message.baseInfo, options);
                if (message.ip != null && message.hasOwnProperty("ip"))
                    object.ip = message.ip;
                if (message.isAgent != null && message.hasOwnProperty("isAgent"))
                    object.isAgent = message.isAgent;
                return object;
            };
    
            /**
             * Converts this UserInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.UserInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return UserInfoRsp;
        })();
    
        hall.BankruptInfoReq = (function() {
    
            /**
             * Properties of a BankruptInfoReq.
             * @memberof hall
             * @interface IBankruptInfoReq
             * @property {common.IRequest} request BankruptInfoReq request
             * @property {number|null} [type] BankruptInfoReq type
             */
    
            /**
             * Constructs a new BankruptInfoReq.
             * @memberof hall
             * @classdesc Represents a BankruptInfoReq.
             * @implements IBankruptInfoReq
             * @constructor
             * @param {hall.IBankruptInfoReq=} [properties] Properties to set
             */
            function BankruptInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BankruptInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.BankruptInfoReq
             * @instance
             */
            BankruptInfoReq.prototype.request = null;
    
            /**
             * BankruptInfoReq type.
             * @member {number} type
             * @memberof hall.BankruptInfoReq
             * @instance
             */
            BankruptInfoReq.prototype.type = 0;
    
            /**
             * Creates a new BankruptInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {hall.IBankruptInfoReq=} [properties] Properties to set
             * @returns {hall.BankruptInfoReq} BankruptInfoReq instance
             */
            BankruptInfoReq.create = function create(properties) {
                return new BankruptInfoReq(properties);
            };
    
            /**
             * Encodes the specified BankruptInfoReq message. Does not implicitly {@link hall.BankruptInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {hall.IBankruptInfoReq} message BankruptInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                return writer;
            };
    
            /**
             * Encodes the specified BankruptInfoReq message, length delimited. Does not implicitly {@link hall.BankruptInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {hall.IBankruptInfoReq} message BankruptInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BankruptInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BankruptInfoReq} BankruptInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BankruptInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a BankruptInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BankruptInfoReq} BankruptInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BankruptInfoReq message.
             * @function verify
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BankruptInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                return null;
            };
    
            /**
             * Creates a BankruptInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BankruptInfoReq} BankruptInfoReq
             */
            BankruptInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BankruptInfoReq)
                    return object;
                var message = new $root.hall.BankruptInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.BankruptInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.type != null)
                    message.type = object.type | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BankruptInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BankruptInfoReq
             * @static
             * @param {hall.BankruptInfoReq} message BankruptInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BankruptInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.type = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                return object;
            };
    
            /**
             * Converts this BankruptInfoReq to JSON.
             * @function toJSON
             * @memberof hall.BankruptInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BankruptInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BankruptInfoReq;
        })();
    
        hall.BankruptInfoRsp = (function() {
    
            /**
             * Properties of a BankruptInfoRsp.
             * @memberof hall
             * @interface IBankruptInfoRsp
             * @property {common.IResult|null} [result] BankruptInfoRsp result
             * @property {number|null} [type] BankruptInfoRsp type
             * @property {number|null} [awardMoney] BankruptInfoRsp awardMoney
             * @property {number|null} [leftNum] BankruptInfoRsp leftNum
             * @property {number|null} [totalNum] BankruptInfoRsp totalNum
             * @property {number|Long|null} [money] BankruptInfoRsp money
             */
    
            /**
             * Constructs a new BankruptInfoRsp.
             * @memberof hall
             * @classdesc Represents a BankruptInfoRsp.
             * @implements IBankruptInfoRsp
             * @constructor
             * @param {hall.IBankruptInfoRsp=} [properties] Properties to set
             */
            function BankruptInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BankruptInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.result = null;
    
            /**
             * BankruptInfoRsp type.
             * @member {number} type
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.type = 0;
    
            /**
             * BankruptInfoRsp awardMoney.
             * @member {number} awardMoney
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.awardMoney = 0;
    
            /**
             * BankruptInfoRsp leftNum.
             * @member {number} leftNum
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.leftNum = 0;
    
            /**
             * BankruptInfoRsp totalNum.
             * @member {number} totalNum
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.totalNum = 0;
    
            /**
             * BankruptInfoRsp money.
             * @member {number|Long} money
             * @memberof hall.BankruptInfoRsp
             * @instance
             */
            BankruptInfoRsp.prototype.money = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new BankruptInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {hall.IBankruptInfoRsp=} [properties] Properties to set
             * @returns {hall.BankruptInfoRsp} BankruptInfoRsp instance
             */
            BankruptInfoRsp.create = function create(properties) {
                return new BankruptInfoRsp(properties);
            };
    
            /**
             * Encodes the specified BankruptInfoRsp message. Does not implicitly {@link hall.BankruptInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {hall.IBankruptInfoRsp} message BankruptInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.awardMoney);
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.leftNum);
                if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.totalNum);
                if (message.money != null && message.hasOwnProperty("money"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.money);
                return writer;
            };
    
            /**
             * Encodes the specified BankruptInfoRsp message, length delimited. Does not implicitly {@link hall.BankruptInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {hall.IBankruptInfoRsp} message BankruptInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BankruptInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BankruptInfoRsp} BankruptInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BankruptInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.awardMoney = reader.int32();
                        break;
                    case 4:
                        message.leftNum = reader.int32();
                        break;
                    case 5:
                        message.totalNum = reader.int32();
                        break;
                    case 6:
                        message.money = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BankruptInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BankruptInfoRsp} BankruptInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BankruptInfoRsp message.
             * @function verify
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BankruptInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (!$util.isInteger(message.awardMoney))
                        return "awardMoney: integer expected";
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    if (!$util.isInteger(message.leftNum))
                        return "leftNum: integer expected";
                if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                    if (!$util.isInteger(message.totalNum))
                        return "totalNum: integer expected";
                if (message.money != null && message.hasOwnProperty("money"))
                    if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
                        return "money: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a BankruptInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BankruptInfoRsp} BankruptInfoRsp
             */
            BankruptInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BankruptInfoRsp)
                    return object;
                var message = new $root.hall.BankruptInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.BankruptInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.awardMoney != null)
                    message.awardMoney = object.awardMoney | 0;
                if (object.leftNum != null)
                    message.leftNum = object.leftNum | 0;
                if (object.totalNum != null)
                    message.totalNum = object.totalNum | 0;
                if (object.money != null)
                    if ($util.Long)
                        (message.money = $util.Long.fromValue(object.money)).unsigned = true;
                    else if (typeof object.money === "string")
                        message.money = parseInt(object.money, 10);
                    else if (typeof object.money === "number")
                        message.money = object.money;
                    else if (typeof object.money === "object")
                        message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a BankruptInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BankruptInfoRsp
             * @static
             * @param {hall.BankruptInfoRsp} message BankruptInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BankruptInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.type = 0;
                    object.awardMoney = 0;
                    object.leftNum = 0;
                    object.totalNum = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.money = options.longs === String ? "0" : 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    object.awardMoney = message.awardMoney;
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    object.leftNum = message.leftNum;
                if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                    object.totalNum = message.totalNum;
                if (message.money != null && message.hasOwnProperty("money"))
                    if (typeof message.money === "number")
                        object.money = options.longs === String ? String(message.money) : message.money;
                    else
                        object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber(true) : message.money;
                return object;
            };
    
            /**
             * Converts this BankruptInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.BankruptInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BankruptInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BankruptInfoRsp;
        })();
    
        hall.SignInReq = (function() {
    
            /**
             * Properties of a SignInReq.
             * @memberof hall
             * @interface ISignInReq
             * @property {common.IRequest} request SignInReq request
             */
    
            /**
             * Constructs a new SignInReq.
             * @memberof hall
             * @classdesc Represents a SignInReq.
             * @implements ISignInReq
             * @constructor
             * @param {hall.ISignInReq=} [properties] Properties to set
             */
            function SignInReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SignInReq request.
             * @member {common.IRequest} request
             * @memberof hall.SignInReq
             * @instance
             */
            SignInReq.prototype.request = null;
    
            /**
             * Creates a new SignInReq instance using the specified properties.
             * @function create
             * @memberof hall.SignInReq
             * @static
             * @param {hall.ISignInReq=} [properties] Properties to set
             * @returns {hall.SignInReq} SignInReq instance
             */
            SignInReq.create = function create(properties) {
                return new SignInReq(properties);
            };
    
            /**
             * Encodes the specified SignInReq message. Does not implicitly {@link hall.SignInReq.verify|verify} messages.
             * @function encode
             * @memberof hall.SignInReq
             * @static
             * @param {hall.ISignInReq} message SignInReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SignInReq message, length delimited. Does not implicitly {@link hall.SignInReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SignInReq
             * @static
             * @param {hall.ISignInReq} message SignInReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SignInReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SignInReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SignInReq} SignInReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SignInReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SignInReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SignInReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SignInReq} SignInReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SignInReq message.
             * @function verify
             * @memberof hall.SignInReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignInReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a SignInReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SignInReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SignInReq} SignInReq
             */
            SignInReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SignInReq)
                    return object;
                var message = new $root.hall.SignInReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.SignInReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SignInReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SignInReq
             * @static
             * @param {hall.SignInReq} message SignInReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignInReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this SignInReq to JSON.
             * @function toJSON
             * @memberof hall.SignInReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignInReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SignInReq;
        })();
    
        hall.SignInAward = (function() {
    
            /**
             * Properties of a SignInAward.
             * @memberof hall
             * @interface ISignInAward
             * @property {number|null} [id] SignInAward id
             * @property {string|null} [name] SignInAward name
             * @property {Array.<common.IProp>|null} [prop] SignInAward prop
             */
    
            /**
             * Constructs a new SignInAward.
             * @memberof hall
             * @classdesc Represents a SignInAward.
             * @implements ISignInAward
             * @constructor
             * @param {hall.ISignInAward=} [properties] Properties to set
             */
            function SignInAward(properties) {
                this.prop = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SignInAward id.
             * @member {number} id
             * @memberof hall.SignInAward
             * @instance
             */
            SignInAward.prototype.id = 0;
    
            /**
             * SignInAward name.
             * @member {string} name
             * @memberof hall.SignInAward
             * @instance
             */
            SignInAward.prototype.name = "";
    
            /**
             * SignInAward prop.
             * @member {Array.<common.IProp>} prop
             * @memberof hall.SignInAward
             * @instance
             */
            SignInAward.prototype.prop = $util.emptyArray;
    
            /**
             * Creates a new SignInAward instance using the specified properties.
             * @function create
             * @memberof hall.SignInAward
             * @static
             * @param {hall.ISignInAward=} [properties] Properties to set
             * @returns {hall.SignInAward} SignInAward instance
             */
            SignInAward.create = function create(properties) {
                return new SignInAward(properties);
            };
    
            /**
             * Encodes the specified SignInAward message. Does not implicitly {@link hall.SignInAward.verify|verify} messages.
             * @function encode
             * @memberof hall.SignInAward
             * @static
             * @param {hall.ISignInAward} message SignInAward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInAward.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.prop != null && message.prop.length)
                    for (var i = 0; i < message.prop.length; ++i)
                        $root.common.Prop.encode(message.prop[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SignInAward message, length delimited. Does not implicitly {@link hall.SignInAward.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SignInAward
             * @static
             * @param {hall.ISignInAward} message SignInAward message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInAward.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SignInAward message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SignInAward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SignInAward} SignInAward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInAward.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SignInAward();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        if (!(message.prop && message.prop.length))
                            message.prop = [];
                        message.prop.push($root.common.Prop.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SignInAward message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SignInAward
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SignInAward} SignInAward
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInAward.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SignInAward message.
             * @function verify
             * @memberof hall.SignInAward
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignInAward.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.prop != null && message.hasOwnProperty("prop")) {
                    if (!Array.isArray(message.prop))
                        return "prop: array expected";
                    for (var i = 0; i < message.prop.length; ++i) {
                        var error = $root.common.Prop.verify(message.prop[i]);
                        if (error)
                            return "prop." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a SignInAward message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SignInAward
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SignInAward} SignInAward
             */
            SignInAward.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SignInAward)
                    return object;
                var message = new $root.hall.SignInAward();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.prop) {
                    if (!Array.isArray(object.prop))
                        throw TypeError(".hall.SignInAward.prop: array expected");
                    message.prop = [];
                    for (var i = 0; i < object.prop.length; ++i) {
                        if (typeof object.prop[i] !== "object")
                            throw TypeError(".hall.SignInAward.prop: object expected");
                        message.prop[i] = $root.common.Prop.fromObject(object.prop[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SignInAward message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SignInAward
             * @static
             * @param {hall.SignInAward} message SignInAward
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignInAward.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.prop = [];
                if (options.defaults) {
                    object.id = 0;
                    object.name = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.prop && message.prop.length) {
                    object.prop = [];
                    for (var j = 0; j < message.prop.length; ++j)
                        object.prop[j] = $root.common.Prop.toObject(message.prop[j], options);
                }
                return object;
            };
    
            /**
             * Converts this SignInAward to JSON.
             * @function toJSON
             * @memberof hall.SignInAward
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignInAward.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SignInAward;
        })();
    
        hall.SignInInfo = (function() {
    
            /**
             * Properties of a SignInInfo.
             * @memberof hall
             * @interface ISignInInfo
             * @property {Array.<hall.ISignInAward>|null} [award] SignInInfo award
             * @property {number|null} [continueDays] SignInInfo continueDays
             * @property {number|null} [state] SignInInfo state
             */
    
            /**
             * Constructs a new SignInInfo.
             * @memberof hall
             * @classdesc Represents a SignInInfo.
             * @implements ISignInInfo
             * @constructor
             * @param {hall.ISignInInfo=} [properties] Properties to set
             */
            function SignInInfo(properties) {
                this.award = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SignInInfo award.
             * @member {Array.<hall.ISignInAward>} award
             * @memberof hall.SignInInfo
             * @instance
             */
            SignInInfo.prototype.award = $util.emptyArray;
    
            /**
             * SignInInfo continueDays.
             * @member {number} continueDays
             * @memberof hall.SignInInfo
             * @instance
             */
            SignInInfo.prototype.continueDays = 0;
    
            /**
             * SignInInfo state.
             * @member {number} state
             * @memberof hall.SignInInfo
             * @instance
             */
            SignInInfo.prototype.state = 0;
    
            /**
             * Creates a new SignInInfo instance using the specified properties.
             * @function create
             * @memberof hall.SignInInfo
             * @static
             * @param {hall.ISignInInfo=} [properties] Properties to set
             * @returns {hall.SignInInfo} SignInInfo instance
             */
            SignInInfo.create = function create(properties) {
                return new SignInInfo(properties);
            };
    
            /**
             * Encodes the specified SignInInfo message. Does not implicitly {@link hall.SignInInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.SignInInfo
             * @static
             * @param {hall.ISignInInfo} message SignInInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.award != null && message.award.length)
                    for (var i = 0; i < message.award.length; ++i)
                        $root.hall.SignInAward.encode(message.award[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.continueDays != null && message.hasOwnProperty("continueDays"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.continueDays);
                if (message.state != null && message.hasOwnProperty("state"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.state);
                return writer;
            };
    
            /**
             * Encodes the specified SignInInfo message, length delimited. Does not implicitly {@link hall.SignInInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SignInInfo
             * @static
             * @param {hall.ISignInInfo} message SignInInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SignInInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SignInInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SignInInfo} SignInInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SignInInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.award && message.award.length))
                            message.award = [];
                        message.award.push($root.hall.SignInAward.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.continueDays = reader.uint32();
                        break;
                    case 3:
                        message.state = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SignInInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SignInInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SignInInfo} SignInInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SignInInfo message.
             * @function verify
             * @memberof hall.SignInInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignInInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.award != null && message.hasOwnProperty("award")) {
                    if (!Array.isArray(message.award))
                        return "award: array expected";
                    for (var i = 0; i < message.award.length; ++i) {
                        var error = $root.hall.SignInAward.verify(message.award[i]);
                        if (error)
                            return "award." + error;
                    }
                }
                if (message.continueDays != null && message.hasOwnProperty("continueDays"))
                    if (!$util.isInteger(message.continueDays))
                        return "continueDays: integer expected";
                if (message.state != null && message.hasOwnProperty("state"))
                    if (!$util.isInteger(message.state))
                        return "state: integer expected";
                return null;
            };
    
            /**
             * Creates a SignInInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SignInInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SignInInfo} SignInInfo
             */
            SignInInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SignInInfo)
                    return object;
                var message = new $root.hall.SignInInfo();
                if (object.award) {
                    if (!Array.isArray(object.award))
                        throw TypeError(".hall.SignInInfo.award: array expected");
                    message.award = [];
                    for (var i = 0; i < object.award.length; ++i) {
                        if (typeof object.award[i] !== "object")
                            throw TypeError(".hall.SignInInfo.award: object expected");
                        message.award[i] = $root.hall.SignInAward.fromObject(object.award[i]);
                    }
                }
                if (object.continueDays != null)
                    message.continueDays = object.continueDays >>> 0;
                if (object.state != null)
                    message.state = object.state >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SignInInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SignInInfo
             * @static
             * @param {hall.SignInInfo} message SignInInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignInInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.award = [];
                if (options.defaults) {
                    object.continueDays = 0;
                    object.state = 0;
                }
                if (message.award && message.award.length) {
                    object.award = [];
                    for (var j = 0; j < message.award.length; ++j)
                        object.award[j] = $root.hall.SignInAward.toObject(message.award[j], options);
                }
                if (message.continueDays != null && message.hasOwnProperty("continueDays"))
                    object.continueDays = message.continueDays;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = message.state;
                return object;
            };
    
            /**
             * Converts this SignInInfo to JSON.
             * @function toJSON
             * @memberof hall.SignInInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignInInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SignInInfo;
        })();
    
        hall.DialInfo = (function() {
    
            /**
             * Properties of a DialInfo.
             * @memberof hall
             * @interface IDialInfo
             * @property {Array.<hall.ISignInAward>|null} [award] DialInfo award
             * @property {common.IProp|null} [pay] DialInfo pay
             */
    
            /**
             * Constructs a new DialInfo.
             * @memberof hall
             * @classdesc Represents a DialInfo.
             * @implements IDialInfo
             * @constructor
             * @param {hall.IDialInfo=} [properties] Properties to set
             */
            function DialInfo(properties) {
                this.award = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DialInfo award.
             * @member {Array.<hall.ISignInAward>} award
             * @memberof hall.DialInfo
             * @instance
             */
            DialInfo.prototype.award = $util.emptyArray;
    
            /**
             * DialInfo pay.
             * @member {common.IProp|null|undefined} pay
             * @memberof hall.DialInfo
             * @instance
             */
            DialInfo.prototype.pay = null;
    
            /**
             * Creates a new DialInfo instance using the specified properties.
             * @function create
             * @memberof hall.DialInfo
             * @static
             * @param {hall.IDialInfo=} [properties] Properties to set
             * @returns {hall.DialInfo} DialInfo instance
             */
            DialInfo.create = function create(properties) {
                return new DialInfo(properties);
            };
    
            /**
             * Encodes the specified DialInfo message. Does not implicitly {@link hall.DialInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.DialInfo
             * @static
             * @param {hall.IDialInfo} message DialInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DialInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.award != null && message.award.length)
                    for (var i = 0; i < message.award.length; ++i)
                        $root.hall.SignInAward.encode(message.award[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pay != null && message.hasOwnProperty("pay"))
                    $root.common.Prop.encode(message.pay, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DialInfo message, length delimited. Does not implicitly {@link hall.DialInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.DialInfo
             * @static
             * @param {hall.IDialInfo} message DialInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DialInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DialInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.DialInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.DialInfo} DialInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DialInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.DialInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.award && message.award.length))
                            message.award = [];
                        message.award.push($root.hall.SignInAward.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.pay = $root.common.Prop.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DialInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.DialInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.DialInfo} DialInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DialInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DialInfo message.
             * @function verify
             * @memberof hall.DialInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DialInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.award != null && message.hasOwnProperty("award")) {
                    if (!Array.isArray(message.award))
                        return "award: array expected";
                    for (var i = 0; i < message.award.length; ++i) {
                        var error = $root.hall.SignInAward.verify(message.award[i]);
                        if (error)
                            return "award." + error;
                    }
                }
                if (message.pay != null && message.hasOwnProperty("pay")) {
                    var error = $root.common.Prop.verify(message.pay);
                    if (error)
                        return "pay." + error;
                }
                return null;
            };
    
            /**
             * Creates a DialInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.DialInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.DialInfo} DialInfo
             */
            DialInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.DialInfo)
                    return object;
                var message = new $root.hall.DialInfo();
                if (object.award) {
                    if (!Array.isArray(object.award))
                        throw TypeError(".hall.DialInfo.award: array expected");
                    message.award = [];
                    for (var i = 0; i < object.award.length; ++i) {
                        if (typeof object.award[i] !== "object")
                            throw TypeError(".hall.DialInfo.award: object expected");
                        message.award[i] = $root.hall.SignInAward.fromObject(object.award[i]);
                    }
                }
                if (object.pay != null) {
                    if (typeof object.pay !== "object")
                        throw TypeError(".hall.DialInfo.pay: object expected");
                    message.pay = $root.common.Prop.fromObject(object.pay);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DialInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.DialInfo
             * @static
             * @param {hall.DialInfo} message DialInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DialInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.award = [];
                if (options.defaults)
                    object.pay = null;
                if (message.award && message.award.length) {
                    object.award = [];
                    for (var j = 0; j < message.award.length; ++j)
                        object.award[j] = $root.hall.SignInAward.toObject(message.award[j], options);
                }
                if (message.pay != null && message.hasOwnProperty("pay"))
                    object.pay = $root.common.Prop.toObject(message.pay, options);
                return object;
            };
    
            /**
             * Converts this DialInfo to JSON.
             * @function toJSON
             * @memberof hall.DialInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DialInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DialInfo;
        })();
    
        hall.SignInRsp = (function() {
    
            /**
             * Properties of a SignInRsp.
             * @memberof hall
             * @interface ISignInRsp
             * @property {common.IResult|null} [result] SignInRsp result
             * @property {hall.ISignInInfo|null} [signInInfo] SignInRsp signInInfo
             * @property {hall.IDialInfo|null} [dialInfo1] SignInRsp dialInfo1
             * @property {hall.IDialInfo|null} [dialInfo2] SignInRsp dialInfo2
             */
    
            /**
             * Constructs a new SignInRsp.
             * @memberof hall
             * @classdesc Represents a SignInRsp.
             * @implements ISignInRsp
             * @constructor
             * @param {hall.ISignInRsp=} [properties] Properties to set
             */
            function SignInRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SignInRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.SignInRsp
             * @instance
             */
            SignInRsp.prototype.result = null;
    
            /**
             * SignInRsp signInInfo.
             * @member {hall.ISignInInfo|null|undefined} signInInfo
             * @memberof hall.SignInRsp
             * @instance
             */
            SignInRsp.prototype.signInInfo = null;
    
            /**
             * SignInRsp dialInfo1.
             * @member {hall.IDialInfo|null|undefined} dialInfo1
             * @memberof hall.SignInRsp
             * @instance
             */
            SignInRsp.prototype.dialInfo1 = null;
    
            /**
             * SignInRsp dialInfo2.
             * @member {hall.IDialInfo|null|undefined} dialInfo2
             * @memberof hall.SignInRsp
             * @instance
             */
            SignInRsp.prototype.dialInfo2 = null;
    
            /**
             * Creates a new SignInRsp instance using the specified properties.
             * @function create
             * @memberof hall.SignInRsp
             * @static
             * @param {hall.ISignInRsp=} [properties] Properties to set
             * @returns {hall.SignInRsp} SignInRsp instance
             */
            SignInRsp.create = function create(properties) {
                return new SignInRsp(properties);
            };
    
            /**
             * Encodes the specified SignInRsp message. Does not implicitly {@link hall.SignInRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.SignInRsp
             * @static
             * @param {hall.ISignInRsp} message SignInRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.signInInfo != null && message.hasOwnProperty("signInInfo"))
                    $root.hall.SignInInfo.encode(message.signInInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.dialInfo1 != null && message.hasOwnProperty("dialInfo1"))
                    $root.hall.DialInfo.encode(message.dialInfo1, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.dialInfo2 != null && message.hasOwnProperty("dialInfo2"))
                    $root.hall.DialInfo.encode(message.dialInfo2, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SignInRsp message, length delimited. Does not implicitly {@link hall.SignInRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SignInRsp
             * @static
             * @param {hall.ISignInRsp} message SignInRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignInRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SignInRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SignInRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SignInRsp} SignInRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SignInRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.signInInfo = $root.hall.SignInInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.dialInfo1 = $root.hall.DialInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.dialInfo2 = $root.hall.DialInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SignInRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SignInRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SignInRsp} SignInRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignInRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SignInRsp message.
             * @function verify
             * @memberof hall.SignInRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignInRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.signInInfo != null && message.hasOwnProperty("signInInfo")) {
                    var error = $root.hall.SignInInfo.verify(message.signInInfo);
                    if (error)
                        return "signInInfo." + error;
                }
                if (message.dialInfo1 != null && message.hasOwnProperty("dialInfo1")) {
                    var error = $root.hall.DialInfo.verify(message.dialInfo1);
                    if (error)
                        return "dialInfo1." + error;
                }
                if (message.dialInfo2 != null && message.hasOwnProperty("dialInfo2")) {
                    var error = $root.hall.DialInfo.verify(message.dialInfo2);
                    if (error)
                        return "dialInfo2." + error;
                }
                return null;
            };
    
            /**
             * Creates a SignInRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SignInRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SignInRsp} SignInRsp
             */
            SignInRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SignInRsp)
                    return object;
                var message = new $root.hall.SignInRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.SignInRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.signInInfo != null) {
                    if (typeof object.signInInfo !== "object")
                        throw TypeError(".hall.SignInRsp.signInInfo: object expected");
                    message.signInInfo = $root.hall.SignInInfo.fromObject(object.signInInfo);
                }
                if (object.dialInfo1 != null) {
                    if (typeof object.dialInfo1 !== "object")
                        throw TypeError(".hall.SignInRsp.dialInfo1: object expected");
                    message.dialInfo1 = $root.hall.DialInfo.fromObject(object.dialInfo1);
                }
                if (object.dialInfo2 != null) {
                    if (typeof object.dialInfo2 !== "object")
                        throw TypeError(".hall.SignInRsp.dialInfo2: object expected");
                    message.dialInfo2 = $root.hall.DialInfo.fromObject(object.dialInfo2);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SignInRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SignInRsp
             * @static
             * @param {hall.SignInRsp} message SignInRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignInRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.signInInfo = null;
                    object.dialInfo1 = null;
                    object.dialInfo2 = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.signInInfo != null && message.hasOwnProperty("signInInfo"))
                    object.signInInfo = $root.hall.SignInInfo.toObject(message.signInInfo, options);
                if (message.dialInfo1 != null && message.hasOwnProperty("dialInfo1"))
                    object.dialInfo1 = $root.hall.DialInfo.toObject(message.dialInfo1, options);
                if (message.dialInfo2 != null && message.hasOwnProperty("dialInfo2"))
                    object.dialInfo2 = $root.hall.DialInfo.toObject(message.dialInfo2, options);
                return object;
            };
    
            /**
             * Converts this SignInRsp to JSON.
             * @function toJSON
             * @memberof hall.SignInRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignInRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SignInRsp;
        })();
    
        hall.WorldChatReq = (function() {
    
            /**
             * Properties of a WorldChatReq.
             * @memberof hall
             * @interface IWorldChatReq
             * @property {common.IRequest} request WorldChatReq request
             * @property {string|null} [nick] WorldChatReq nick
             * @property {string} content WorldChatReq content
             * @property {number|null} [type] WorldChatReq type
             * @property {string|null} [extra] WorldChatReq extra
             */
    
            /**
             * Constructs a new WorldChatReq.
             * @memberof hall
             * @classdesc Represents a WorldChatReq.
             * @implements IWorldChatReq
             * @constructor
             * @param {hall.IWorldChatReq=} [properties] Properties to set
             */
            function WorldChatReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WorldChatReq request.
             * @member {common.IRequest} request
             * @memberof hall.WorldChatReq
             * @instance
             */
            WorldChatReq.prototype.request = null;
    
            /**
             * WorldChatReq nick.
             * @member {string} nick
             * @memberof hall.WorldChatReq
             * @instance
             */
            WorldChatReq.prototype.nick = "";
    
            /**
             * WorldChatReq content.
             * @member {string} content
             * @memberof hall.WorldChatReq
             * @instance
             */
            WorldChatReq.prototype.content = "";
    
            /**
             * WorldChatReq type.
             * @member {number} type
             * @memberof hall.WorldChatReq
             * @instance
             */
            WorldChatReq.prototype.type = 0;
    
            /**
             * WorldChatReq extra.
             * @member {string} extra
             * @memberof hall.WorldChatReq
             * @instance
             */
            WorldChatReq.prototype.extra = "";
    
            /**
             * Creates a new WorldChatReq instance using the specified properties.
             * @function create
             * @memberof hall.WorldChatReq
             * @static
             * @param {hall.IWorldChatReq=} [properties] Properties to set
             * @returns {hall.WorldChatReq} WorldChatReq instance
             */
            WorldChatReq.create = function create(properties) {
                return new WorldChatReq(properties);
            };
    
            /**
             * Encodes the specified WorldChatReq message. Does not implicitly {@link hall.WorldChatReq.verify|verify} messages.
             * @function encode
             * @memberof hall.WorldChatReq
             * @static
             * @param {hall.IWorldChatReq} message WorldChatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.type);
                if (message.extra != null && message.hasOwnProperty("extra"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.extra);
                return writer;
            };
    
            /**
             * Encodes the specified WorldChatReq message, length delimited. Does not implicitly {@link hall.WorldChatReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WorldChatReq
             * @static
             * @param {hall.IWorldChatReq} message WorldChatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WorldChatReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WorldChatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WorldChatReq} WorldChatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WorldChatReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.content = reader.string();
                        break;
                    case 4:
                        message.type = reader.uint32();
                        break;
                    case 5:
                        message.extra = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                if (!message.hasOwnProperty("content"))
                    throw $util.ProtocolError("missing required 'content'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a WorldChatReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WorldChatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WorldChatReq} WorldChatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WorldChatReq message.
             * @function verify
             * @memberof hall.WorldChatReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WorldChatReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (!$util.isString(message.content))
                    return "content: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.extra != null && message.hasOwnProperty("extra"))
                    if (!$util.isString(message.extra))
                        return "extra: string expected";
                return null;
            };
    
            /**
             * Creates a WorldChatReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WorldChatReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WorldChatReq} WorldChatReq
             */
            WorldChatReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WorldChatReq)
                    return object;
                var message = new $root.hall.WorldChatReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.WorldChatReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.content != null)
                    message.content = String(object.content);
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.extra != null)
                    message.extra = String(object.extra);
                return message;
            };
    
            /**
             * Creates a plain object from a WorldChatReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WorldChatReq
             * @static
             * @param {hall.WorldChatReq} message WorldChatReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WorldChatReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.nick = "";
                    object.content = "";
                    object.type = 0;
                    object.extra = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.extra != null && message.hasOwnProperty("extra"))
                    object.extra = message.extra;
                return object;
            };
    
            /**
             * Converts this WorldChatReq to JSON.
             * @function toJSON
             * @memberof hall.WorldChatReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WorldChatReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WorldChatReq;
        })();
    
        hall.WorldChatRsp = (function() {
    
            /**
             * Properties of a WorldChatRsp.
             * @memberof hall
             * @interface IWorldChatRsp
             * @property {common.IResult|null} [result] WorldChatRsp result
             * @property {number|null} [labaNum] WorldChatRsp labaNum
             * @property {number|Long|null} [money] WorldChatRsp money
             * @property {number|Long|null} [diamond] WorldChatRsp diamond
             */
    
            /**
             * Constructs a new WorldChatRsp.
             * @memberof hall
             * @classdesc Represents a WorldChatRsp.
             * @implements IWorldChatRsp
             * @constructor
             * @param {hall.IWorldChatRsp=} [properties] Properties to set
             */
            function WorldChatRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WorldChatRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.WorldChatRsp
             * @instance
             */
            WorldChatRsp.prototype.result = null;
    
            /**
             * WorldChatRsp labaNum.
             * @member {number} labaNum
             * @memberof hall.WorldChatRsp
             * @instance
             */
            WorldChatRsp.prototype.labaNum = 0;
    
            /**
             * WorldChatRsp money.
             * @member {number|Long} money
             * @memberof hall.WorldChatRsp
             * @instance
             */
            WorldChatRsp.prototype.money = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * WorldChatRsp diamond.
             * @member {number|Long} diamond
             * @memberof hall.WorldChatRsp
             * @instance
             */
            WorldChatRsp.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new WorldChatRsp instance using the specified properties.
             * @function create
             * @memberof hall.WorldChatRsp
             * @static
             * @param {hall.IWorldChatRsp=} [properties] Properties to set
             * @returns {hall.WorldChatRsp} WorldChatRsp instance
             */
            WorldChatRsp.create = function create(properties) {
                return new WorldChatRsp(properties);
            };
    
            /**
             * Encodes the specified WorldChatRsp message. Does not implicitly {@link hall.WorldChatRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.WorldChatRsp
             * @static
             * @param {hall.IWorldChatRsp} message WorldChatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.labaNum != null && message.hasOwnProperty("labaNum"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.labaNum);
                if (message.money != null && message.hasOwnProperty("money"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.money);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.diamond);
                return writer;
            };
    
            /**
             * Encodes the specified WorldChatRsp message, length delimited. Does not implicitly {@link hall.WorldChatRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WorldChatRsp
             * @static
             * @param {hall.IWorldChatRsp} message WorldChatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WorldChatRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WorldChatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WorldChatRsp} WorldChatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WorldChatRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.labaNum = reader.uint32();
                        break;
                    case 3:
                        message.money = reader.uint64();
                        break;
                    case 4:
                        message.diamond = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WorldChatRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WorldChatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WorldChatRsp} WorldChatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WorldChatRsp message.
             * @function verify
             * @memberof hall.WorldChatRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WorldChatRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.labaNum != null && message.hasOwnProperty("labaNum"))
                    if (!$util.isInteger(message.labaNum))
                        return "labaNum: integer expected";
                if (message.money != null && message.hasOwnProperty("money"))
                    if (!$util.isInteger(message.money) && !(message.money && $util.isInteger(message.money.low) && $util.isInteger(message.money.high)))
                        return "money: integer|Long expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a WorldChatRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WorldChatRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WorldChatRsp} WorldChatRsp
             */
            WorldChatRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WorldChatRsp)
                    return object;
                var message = new $root.hall.WorldChatRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.WorldChatRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.labaNum != null)
                    message.labaNum = object.labaNum >>> 0;
                if (object.money != null)
                    if ($util.Long)
                        (message.money = $util.Long.fromValue(object.money)).unsigned = true;
                    else if (typeof object.money === "string")
                        message.money = parseInt(object.money, 10);
                    else if (typeof object.money === "number")
                        message.money = object.money;
                    else if (typeof object.money === "object")
                        message.money = new $util.LongBits(object.money.low >>> 0, object.money.high >>> 0).toNumber(true);
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a WorldChatRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WorldChatRsp
             * @static
             * @param {hall.WorldChatRsp} message WorldChatRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WorldChatRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.labaNum = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.money = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.money = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.labaNum != null && message.hasOwnProperty("labaNum"))
                    object.labaNum = message.labaNum;
                if (message.money != null && message.hasOwnProperty("money"))
                    if (typeof message.money === "number")
                        object.money = options.longs === String ? String(message.money) : message.money;
                    else
                        object.money = options.longs === String ? $util.Long.prototype.toString.call(message.money) : options.longs === Number ? new $util.LongBits(message.money.low >>> 0, message.money.high >>> 0).toNumber(true) : message.money;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                return object;
            };
    
            /**
             * Converts this WorldChatRsp to JSON.
             * @function toJSON
             * @memberof hall.WorldChatRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WorldChatRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WorldChatRsp;
        })();
    
        hall.WorldChatBct = (function() {
    
            /**
             * Properties of a WorldChatBct.
             * @memberof hall
             * @interface IWorldChatBct
             * @property {common.IResult|null} [result] WorldChatBct result
             * @property {number|null} [uid] WorldChatBct uid
             * @property {string|null} [content] WorldChatBct content
             * @property {string|null} [nick] WorldChatBct nick
             * @property {number|null} [type] WorldChatBct type
             * @property {number|null} [vip] WorldChatBct vip
             * @property {string|null} [extra] WorldChatBct extra
             * @property {number|null} [count] WorldChatBct count
             */
    
            /**
             * Constructs a new WorldChatBct.
             * @memberof hall
             * @classdesc Represents a WorldChatBct.
             * @implements IWorldChatBct
             * @constructor
             * @param {hall.IWorldChatBct=} [properties] Properties to set
             */
            function WorldChatBct(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WorldChatBct result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.result = null;
    
            /**
             * WorldChatBct uid.
             * @member {number} uid
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.uid = 0;
    
            /**
             * WorldChatBct content.
             * @member {string} content
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.content = "";
    
            /**
             * WorldChatBct nick.
             * @member {string} nick
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.nick = "";
    
            /**
             * WorldChatBct type.
             * @member {number} type
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.type = 0;
    
            /**
             * WorldChatBct vip.
             * @member {number} vip
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.vip = 0;
    
            /**
             * WorldChatBct extra.
             * @member {string} extra
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.extra = "";
    
            /**
             * WorldChatBct count.
             * @member {number} count
             * @memberof hall.WorldChatBct
             * @instance
             */
            WorldChatBct.prototype.count = 0;
    
            /**
             * Creates a new WorldChatBct instance using the specified properties.
             * @function create
             * @memberof hall.WorldChatBct
             * @static
             * @param {hall.IWorldChatBct=} [properties] Properties to set
             * @returns {hall.WorldChatBct} WorldChatBct instance
             */
            WorldChatBct.create = function create(properties) {
                return new WorldChatBct(properties);
            };
    
            /**
             * Encodes the specified WorldChatBct message. Does not implicitly {@link hall.WorldChatBct.verify|verify} messages.
             * @function encode
             * @memberof hall.WorldChatBct
             * @static
             * @param {hall.IWorldChatBct} message WorldChatBct message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatBct.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nick);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.type);
                if (message.vip != null && message.hasOwnProperty("vip"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.vip);
                if (message.extra != null && message.hasOwnProperty("extra"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.extra);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.count);
                return writer;
            };
    
            /**
             * Encodes the specified WorldChatBct message, length delimited. Does not implicitly {@link hall.WorldChatBct.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WorldChatBct
             * @static
             * @param {hall.IWorldChatBct} message WorldChatBct message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WorldChatBct.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WorldChatBct message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WorldChatBct
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WorldChatBct} WorldChatBct
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatBct.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WorldChatBct();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.content = reader.string();
                        break;
                    case 4:
                        message.nick = reader.string();
                        break;
                    case 5:
                        message.type = reader.uint32();
                        break;
                    case 6:
                        message.vip = reader.uint32();
                        break;
                    case 7:
                        message.extra = reader.string();
                        break;
                    case 8:
                        message.count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WorldChatBct message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WorldChatBct
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WorldChatBct} WorldChatBct
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WorldChatBct.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WorldChatBct message.
             * @function verify
             * @memberof hall.WorldChatBct
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WorldChatBct.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.vip != null && message.hasOwnProperty("vip"))
                    if (!$util.isInteger(message.vip))
                        return "vip: integer expected";
                if (message.extra != null && message.hasOwnProperty("extra"))
                    if (!$util.isString(message.extra))
                        return "extra: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };
    
            /**
             * Creates a WorldChatBct message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WorldChatBct
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WorldChatBct} WorldChatBct
             */
            WorldChatBct.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WorldChatBct)
                    return object;
                var message = new $root.hall.WorldChatBct();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.WorldChatBct.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.content != null)
                    message.content = String(object.content);
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.vip != null)
                    message.vip = object.vip >>> 0;
                if (object.extra != null)
                    message.extra = String(object.extra);
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a WorldChatBct message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WorldChatBct
             * @static
             * @param {hall.WorldChatBct} message WorldChatBct
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WorldChatBct.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.content = "";
                    object.nick = "";
                    object.type = 0;
                    object.vip = 0;
                    object.extra = "";
                    object.count = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.vip != null && message.hasOwnProperty("vip"))
                    object.vip = message.vip;
                if (message.extra != null && message.hasOwnProperty("extra"))
                    object.extra = message.extra;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };
    
            /**
             * Converts this WorldChatBct to JSON.
             * @function toJSON
             * @memberof hall.WorldChatBct
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WorldChatBct.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WorldChatBct;
        })();
    
        hall.AwardBox = (function() {
    
            /**
             * Properties of an AwardBox.
             * @memberof hall
             * @interface IAwardBox
             * @property {number|null} [type] AwardBox type
             * @property {number|null} [id] AwardBox id
             * @property {number|null} [createTime] AwardBox createTime
             * @property {number|null} [openTime] AwardBox openTime
             * @property {number|null} [curTime] AwardBox curTime
             * @property {number|Long|null} [awardMoney] AwardBox awardMoney
             * @property {number|Long|null} [awardDiamond] AwardBox awardDiamond
             * @property {number|Long|null} [costDiamonds] AwardBox costDiamonds
             */
    
            /**
             * Constructs a new AwardBox.
             * @memberof hall
             * @classdesc Represents an AwardBox.
             * @implements IAwardBox
             * @constructor
             * @param {hall.IAwardBox=} [properties] Properties to set
             */
            function AwardBox(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AwardBox type.
             * @member {number} type
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.type = 0;
    
            /**
             * AwardBox id.
             * @member {number} id
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.id = 0;
    
            /**
             * AwardBox createTime.
             * @member {number} createTime
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.createTime = 0;
    
            /**
             * AwardBox openTime.
             * @member {number} openTime
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.openTime = 0;
    
            /**
             * AwardBox curTime.
             * @member {number} curTime
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.curTime = 0;
    
            /**
             * AwardBox awardMoney.
             * @member {number|Long} awardMoney
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.awardMoney = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * AwardBox awardDiamond.
             * @member {number|Long} awardDiamond
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.awardDiamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * AwardBox costDiamonds.
             * @member {number|Long} costDiamonds
             * @memberof hall.AwardBox
             * @instance
             */
            AwardBox.prototype.costDiamonds = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new AwardBox instance using the specified properties.
             * @function create
             * @memberof hall.AwardBox
             * @static
             * @param {hall.IAwardBox=} [properties] Properties to set
             * @returns {hall.AwardBox} AwardBox instance
             */
            AwardBox.create = function create(properties) {
                return new AwardBox(properties);
            };
    
            /**
             * Encodes the specified AwardBox message. Does not implicitly {@link hall.AwardBox.verify|verify} messages.
             * @function encode
             * @memberof hall.AwardBox
             * @static
             * @param {hall.IAwardBox} message AwardBox message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBox.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.createTime);
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.openTime);
                if (message.curTime != null && message.hasOwnProperty("curTime"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.curTime);
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.awardMoney);
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.awardDiamond);
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.costDiamonds);
                return writer;
            };
    
            /**
             * Encodes the specified AwardBox message, length delimited. Does not implicitly {@link hall.AwardBox.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AwardBox
             * @static
             * @param {hall.IAwardBox} message AwardBox message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBox.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AwardBox message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AwardBox
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AwardBox} AwardBox
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBox.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AwardBox();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.uint32();
                        break;
                    case 2:
                        message.id = reader.uint32();
                        break;
                    case 3:
                        message.createTime = reader.uint32();
                        break;
                    case 4:
                        message.openTime = reader.uint32();
                        break;
                    case 5:
                        message.curTime = reader.uint32();
                        break;
                    case 6:
                        message.awardMoney = reader.uint64();
                        break;
                    case 7:
                        message.awardDiamond = reader.uint64();
                        break;
                    case 8:
                        message.costDiamonds = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AwardBox message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AwardBox
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AwardBox} AwardBox
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBox.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AwardBox message.
             * @function verify
             * @memberof hall.AwardBox
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AwardBox.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    if (!$util.isInteger(message.createTime))
                        return "createTime: integer expected";
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    if (!$util.isInteger(message.openTime))
                        return "openTime: integer expected";
                if (message.curTime != null && message.hasOwnProperty("curTime"))
                    if (!$util.isInteger(message.curTime))
                        return "curTime: integer expected";
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (!$util.isInteger(message.awardMoney) && !(message.awardMoney && $util.isInteger(message.awardMoney.low) && $util.isInteger(message.awardMoney.high)))
                        return "awardMoney: integer|Long expected";
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    if (!$util.isInteger(message.awardDiamond) && !(message.awardDiamond && $util.isInteger(message.awardDiamond.low) && $util.isInteger(message.awardDiamond.high)))
                        return "awardDiamond: integer|Long expected";
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    if (!$util.isInteger(message.costDiamonds) && !(message.costDiamonds && $util.isInteger(message.costDiamonds.low) && $util.isInteger(message.costDiamonds.high)))
                        return "costDiamonds: integer|Long expected";
                return null;
            };
    
            /**
             * Creates an AwardBox message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AwardBox
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AwardBox} AwardBox
             */
            AwardBox.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AwardBox)
                    return object;
                var message = new $root.hall.AwardBox();
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.createTime != null)
                    message.createTime = object.createTime >>> 0;
                if (object.openTime != null)
                    message.openTime = object.openTime >>> 0;
                if (object.curTime != null)
                    message.curTime = object.curTime >>> 0;
                if (object.awardMoney != null)
                    if ($util.Long)
                        (message.awardMoney = $util.Long.fromValue(object.awardMoney)).unsigned = true;
                    else if (typeof object.awardMoney === "string")
                        message.awardMoney = parseInt(object.awardMoney, 10);
                    else if (typeof object.awardMoney === "number")
                        message.awardMoney = object.awardMoney;
                    else if (typeof object.awardMoney === "object")
                        message.awardMoney = new $util.LongBits(object.awardMoney.low >>> 0, object.awardMoney.high >>> 0).toNumber(true);
                if (object.awardDiamond != null)
                    if ($util.Long)
                        (message.awardDiamond = $util.Long.fromValue(object.awardDiamond)).unsigned = true;
                    else if (typeof object.awardDiamond === "string")
                        message.awardDiamond = parseInt(object.awardDiamond, 10);
                    else if (typeof object.awardDiamond === "number")
                        message.awardDiamond = object.awardDiamond;
                    else if (typeof object.awardDiamond === "object")
                        message.awardDiamond = new $util.LongBits(object.awardDiamond.low >>> 0, object.awardDiamond.high >>> 0).toNumber(true);
                if (object.costDiamonds != null)
                    if ($util.Long)
                        (message.costDiamonds = $util.Long.fromValue(object.costDiamonds)).unsigned = true;
                    else if (typeof object.costDiamonds === "string")
                        message.costDiamonds = parseInt(object.costDiamonds, 10);
                    else if (typeof object.costDiamonds === "number")
                        message.costDiamonds = object.costDiamonds;
                    else if (typeof object.costDiamonds === "object")
                        message.costDiamonds = new $util.LongBits(object.costDiamonds.low >>> 0, object.costDiamonds.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from an AwardBox message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AwardBox
             * @static
             * @param {hall.AwardBox} message AwardBox
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AwardBox.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.id = 0;
                    object.createTime = 0;
                    object.openTime = 0;
                    object.curTime = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.awardMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.awardMoney = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.awardDiamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.awardDiamond = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.costDiamonds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.costDiamonds = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    object.createTime = message.createTime;
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    object.openTime = message.openTime;
                if (message.curTime != null && message.hasOwnProperty("curTime"))
                    object.curTime = message.curTime;
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (typeof message.awardMoney === "number")
                        object.awardMoney = options.longs === String ? String(message.awardMoney) : message.awardMoney;
                    else
                        object.awardMoney = options.longs === String ? $util.Long.prototype.toString.call(message.awardMoney) : options.longs === Number ? new $util.LongBits(message.awardMoney.low >>> 0, message.awardMoney.high >>> 0).toNumber(true) : message.awardMoney;
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    if (typeof message.awardDiamond === "number")
                        object.awardDiamond = options.longs === String ? String(message.awardDiamond) : message.awardDiamond;
                    else
                        object.awardDiamond = options.longs === String ? $util.Long.prototype.toString.call(message.awardDiamond) : options.longs === Number ? new $util.LongBits(message.awardDiamond.low >>> 0, message.awardDiamond.high >>> 0).toNumber(true) : message.awardDiamond;
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    if (typeof message.costDiamonds === "number")
                        object.costDiamonds = options.longs === String ? String(message.costDiamonds) : message.costDiamonds;
                    else
                        object.costDiamonds = options.longs === String ? $util.Long.prototype.toString.call(message.costDiamonds) : options.longs === Number ? new $util.LongBits(message.costDiamonds.low >>> 0, message.costDiamonds.high >>> 0).toNumber(true) : message.costDiamonds;
                return object;
            };
    
            /**
             * Converts this AwardBox to JSON.
             * @function toJSON
             * @memberof hall.AwardBox
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AwardBox.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AwardBox;
        })();
    
        hall.AwardBoxReq = (function() {
    
            /**
             * Properties of an AwardBoxReq.
             * @memberof hall
             * @interface IAwardBoxReq
             * @property {common.IRequest} request AwardBoxReq request
             */
    
            /**
             * Constructs a new AwardBoxReq.
             * @memberof hall
             * @classdesc Represents an AwardBoxReq.
             * @implements IAwardBoxReq
             * @constructor
             * @param {hall.IAwardBoxReq=} [properties] Properties to set
             */
            function AwardBoxReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AwardBoxReq request.
             * @member {common.IRequest} request
             * @memberof hall.AwardBoxReq
             * @instance
             */
            AwardBoxReq.prototype.request = null;
    
            /**
             * Creates a new AwardBoxReq instance using the specified properties.
             * @function create
             * @memberof hall.AwardBoxReq
             * @static
             * @param {hall.IAwardBoxReq=} [properties] Properties to set
             * @returns {hall.AwardBoxReq} AwardBoxReq instance
             */
            AwardBoxReq.create = function create(properties) {
                return new AwardBoxReq(properties);
            };
    
            /**
             * Encodes the specified AwardBoxReq message. Does not implicitly {@link hall.AwardBoxReq.verify|verify} messages.
             * @function encode
             * @memberof hall.AwardBoxReq
             * @static
             * @param {hall.IAwardBoxReq} message AwardBoxReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AwardBoxReq message, length delimited. Does not implicitly {@link hall.AwardBoxReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AwardBoxReq
             * @static
             * @param {hall.IAwardBoxReq} message AwardBoxReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AwardBoxReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AwardBoxReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AwardBoxReq} AwardBoxReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AwardBoxReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an AwardBoxReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AwardBoxReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AwardBoxReq} AwardBoxReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AwardBoxReq message.
             * @function verify
             * @memberof hall.AwardBoxReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AwardBoxReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates an AwardBoxReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AwardBoxReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AwardBoxReq} AwardBoxReq
             */
            AwardBoxReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AwardBoxReq)
                    return object;
                var message = new $root.hall.AwardBoxReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.AwardBoxReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AwardBoxReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AwardBoxReq
             * @static
             * @param {hall.AwardBoxReq} message AwardBoxReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AwardBoxReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this AwardBoxReq to JSON.
             * @function toJSON
             * @memberof hall.AwardBoxReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AwardBoxReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AwardBoxReq;
        })();
    
        hall.AwardBoxRsp = (function() {
    
            /**
             * Properties of an AwardBoxRsp.
             * @memberof hall
             * @interface IAwardBoxRsp
             * @property {common.IResult|null} [result] AwardBoxRsp result
             * @property {Array.<hall.IAwardBox>|null} [awardBoxes] AwardBoxRsp awardBoxes
             */
    
            /**
             * Constructs a new AwardBoxRsp.
             * @memberof hall
             * @classdesc Represents an AwardBoxRsp.
             * @implements IAwardBoxRsp
             * @constructor
             * @param {hall.IAwardBoxRsp=} [properties] Properties to set
             */
            function AwardBoxRsp(properties) {
                this.awardBoxes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AwardBoxRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.AwardBoxRsp
             * @instance
             */
            AwardBoxRsp.prototype.result = null;
    
            /**
             * AwardBoxRsp awardBoxes.
             * @member {Array.<hall.IAwardBox>} awardBoxes
             * @memberof hall.AwardBoxRsp
             * @instance
             */
            AwardBoxRsp.prototype.awardBoxes = $util.emptyArray;
    
            /**
             * Creates a new AwardBoxRsp instance using the specified properties.
             * @function create
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {hall.IAwardBoxRsp=} [properties] Properties to set
             * @returns {hall.AwardBoxRsp} AwardBoxRsp instance
             */
            AwardBoxRsp.create = function create(properties) {
                return new AwardBoxRsp(properties);
            };
    
            /**
             * Encodes the specified AwardBoxRsp message. Does not implicitly {@link hall.AwardBoxRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {hall.IAwardBoxRsp} message AwardBoxRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.awardBoxes != null && message.awardBoxes.length)
                    for (var i = 0; i < message.awardBoxes.length; ++i)
                        $root.hall.AwardBox.encode(message.awardBoxes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AwardBoxRsp message, length delimited. Does not implicitly {@link hall.AwardBoxRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {hall.IAwardBoxRsp} message AwardBoxRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AwardBoxRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AwardBoxRsp} AwardBoxRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AwardBoxRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.awardBoxes && message.awardBoxes.length))
                            message.awardBoxes = [];
                        message.awardBoxes.push($root.hall.AwardBox.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AwardBoxRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AwardBoxRsp} AwardBoxRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AwardBoxRsp message.
             * @function verify
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AwardBoxRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.awardBoxes != null && message.hasOwnProperty("awardBoxes")) {
                    if (!Array.isArray(message.awardBoxes))
                        return "awardBoxes: array expected";
                    for (var i = 0; i < message.awardBoxes.length; ++i) {
                        var error = $root.hall.AwardBox.verify(message.awardBoxes[i]);
                        if (error)
                            return "awardBoxes." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an AwardBoxRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AwardBoxRsp} AwardBoxRsp
             */
            AwardBoxRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AwardBoxRsp)
                    return object;
                var message = new $root.hall.AwardBoxRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.AwardBoxRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.awardBoxes) {
                    if (!Array.isArray(object.awardBoxes))
                        throw TypeError(".hall.AwardBoxRsp.awardBoxes: array expected");
                    message.awardBoxes = [];
                    for (var i = 0; i < object.awardBoxes.length; ++i) {
                        if (typeof object.awardBoxes[i] !== "object")
                            throw TypeError(".hall.AwardBoxRsp.awardBoxes: object expected");
                        message.awardBoxes[i] = $root.hall.AwardBox.fromObject(object.awardBoxes[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AwardBoxRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AwardBoxRsp
             * @static
             * @param {hall.AwardBoxRsp} message AwardBoxRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AwardBoxRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.awardBoxes = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.awardBoxes && message.awardBoxes.length) {
                    object.awardBoxes = [];
                    for (var j = 0; j < message.awardBoxes.length; ++j)
                        object.awardBoxes[j] = $root.hall.AwardBox.toObject(message.awardBoxes[j], options);
                }
                return object;
            };
    
            /**
             * Converts this AwardBoxRsp to JSON.
             * @function toJSON
             * @memberof hall.AwardBoxRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AwardBoxRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AwardBoxRsp;
        })();
    
        hall.AwardBoxOpenReq = (function() {
    
            /**
             * Properties of an AwardBoxOpenReq.
             * @memberof hall
             * @interface IAwardBoxOpenReq
             * @property {common.IRequest} request AwardBoxOpenReq request
             * @property {number|null} [type] AwardBoxOpenReq type
             * @property {number|null} [id] AwardBoxOpenReq id
             * @property {number|null} [costDiamonds] AwardBoxOpenReq costDiamonds
             */
    
            /**
             * Constructs a new AwardBoxOpenReq.
             * @memberof hall
             * @classdesc Represents an AwardBoxOpenReq.
             * @implements IAwardBoxOpenReq
             * @constructor
             * @param {hall.IAwardBoxOpenReq=} [properties] Properties to set
             */
            function AwardBoxOpenReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AwardBoxOpenReq request.
             * @member {common.IRequest} request
             * @memberof hall.AwardBoxOpenReq
             * @instance
             */
            AwardBoxOpenReq.prototype.request = null;
    
            /**
             * AwardBoxOpenReq type.
             * @member {number} type
             * @memberof hall.AwardBoxOpenReq
             * @instance
             */
            AwardBoxOpenReq.prototype.type = 0;
    
            /**
             * AwardBoxOpenReq id.
             * @member {number} id
             * @memberof hall.AwardBoxOpenReq
             * @instance
             */
            AwardBoxOpenReq.prototype.id = 0;
    
            /**
             * AwardBoxOpenReq costDiamonds.
             * @member {number} costDiamonds
             * @memberof hall.AwardBoxOpenReq
             * @instance
             */
            AwardBoxOpenReq.prototype.costDiamonds = 0;
    
            /**
             * Creates a new AwardBoxOpenReq instance using the specified properties.
             * @function create
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {hall.IAwardBoxOpenReq=} [properties] Properties to set
             * @returns {hall.AwardBoxOpenReq} AwardBoxOpenReq instance
             */
            AwardBoxOpenReq.create = function create(properties) {
                return new AwardBoxOpenReq(properties);
            };
    
            /**
             * Encodes the specified AwardBoxOpenReq message. Does not implicitly {@link hall.AwardBoxOpenReq.verify|verify} messages.
             * @function encode
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {hall.IAwardBoxOpenReq} message AwardBoxOpenReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxOpenReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.costDiamonds);
                return writer;
            };
    
            /**
             * Encodes the specified AwardBoxOpenReq message, length delimited. Does not implicitly {@link hall.AwardBoxOpenReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {hall.IAwardBoxOpenReq} message AwardBoxOpenReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxOpenReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AwardBoxOpenReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AwardBoxOpenReq} AwardBoxOpenReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxOpenReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AwardBoxOpenReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        message.id = reader.uint32();
                        break;
                    case 4:
                        message.costDiamonds = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an AwardBoxOpenReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AwardBoxOpenReq} AwardBoxOpenReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxOpenReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AwardBoxOpenReq message.
             * @function verify
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AwardBoxOpenReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    if (!$util.isInteger(message.costDiamonds))
                        return "costDiamonds: integer expected";
                return null;
            };
    
            /**
             * Creates an AwardBoxOpenReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AwardBoxOpenReq} AwardBoxOpenReq
             */
            AwardBoxOpenReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AwardBoxOpenReq)
                    return object;
                var message = new $root.hall.AwardBoxOpenReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.AwardBoxOpenReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.costDiamonds != null)
                    message.costDiamonds = object.costDiamonds >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AwardBoxOpenReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AwardBoxOpenReq
             * @static
             * @param {hall.AwardBoxOpenReq} message AwardBoxOpenReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AwardBoxOpenReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.type = 0;
                    object.id = 0;
                    object.costDiamonds = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.costDiamonds != null && message.hasOwnProperty("costDiamonds"))
                    object.costDiamonds = message.costDiamonds;
                return object;
            };
    
            /**
             * Converts this AwardBoxOpenReq to JSON.
             * @function toJSON
             * @memberof hall.AwardBoxOpenReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AwardBoxOpenReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AwardBoxOpenReq;
        })();
    
        hall.AwardBoxOpenRsp = (function() {
    
            /**
             * Properties of an AwardBoxOpenRsp.
             * @memberof hall
             * @interface IAwardBoxOpenRsp
             * @property {common.IResult|null} [result] AwardBoxOpenRsp result
             * @property {number|null} [type] AwardBoxOpenRsp type
             * @property {number|null} [id] AwardBoxOpenRsp id
             * @property {number|Long|null} [awardMoney] AwardBoxOpenRsp awardMoney
             * @property {number|Long|null} [awardDiamond] AwardBoxOpenRsp awardDiamond
             * @property {common.IWallet|null} [wallet] AwardBoxOpenRsp wallet
             */
    
            /**
             * Constructs a new AwardBoxOpenRsp.
             * @memberof hall
             * @classdesc Represents an AwardBoxOpenRsp.
             * @implements IAwardBoxOpenRsp
             * @constructor
             * @param {hall.IAwardBoxOpenRsp=} [properties] Properties to set
             */
            function AwardBoxOpenRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AwardBoxOpenRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.result = null;
    
            /**
             * AwardBoxOpenRsp type.
             * @member {number} type
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.type = 0;
    
            /**
             * AwardBoxOpenRsp id.
             * @member {number} id
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.id = 0;
    
            /**
             * AwardBoxOpenRsp awardMoney.
             * @member {number|Long} awardMoney
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.awardMoney = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * AwardBoxOpenRsp awardDiamond.
             * @member {number|Long} awardDiamond
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.awardDiamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * AwardBoxOpenRsp wallet.
             * @member {common.IWallet|null|undefined} wallet
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             */
            AwardBoxOpenRsp.prototype.wallet = null;
    
            /**
             * Creates a new AwardBoxOpenRsp instance using the specified properties.
             * @function create
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {hall.IAwardBoxOpenRsp=} [properties] Properties to set
             * @returns {hall.AwardBoxOpenRsp} AwardBoxOpenRsp instance
             */
            AwardBoxOpenRsp.create = function create(properties) {
                return new AwardBoxOpenRsp(properties);
            };
    
            /**
             * Encodes the specified AwardBoxOpenRsp message. Does not implicitly {@link hall.AwardBoxOpenRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {hall.IAwardBoxOpenRsp} message AwardBoxOpenRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxOpenRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.awardMoney);
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.awardDiamond);
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    $root.common.Wallet.encode(message.wallet, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AwardBoxOpenRsp message, length delimited. Does not implicitly {@link hall.AwardBoxOpenRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {hall.IAwardBoxOpenRsp} message AwardBoxOpenRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AwardBoxOpenRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AwardBoxOpenRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AwardBoxOpenRsp} AwardBoxOpenRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxOpenRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AwardBoxOpenRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        message.id = reader.uint32();
                        break;
                    case 4:
                        message.awardMoney = reader.uint64();
                        break;
                    case 5:
                        message.awardDiamond = reader.uint64();
                        break;
                    case 6:
                        message.wallet = $root.common.Wallet.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AwardBoxOpenRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AwardBoxOpenRsp} AwardBoxOpenRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AwardBoxOpenRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AwardBoxOpenRsp message.
             * @function verify
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AwardBoxOpenRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (!$util.isInteger(message.awardMoney) && !(message.awardMoney && $util.isInteger(message.awardMoney.low) && $util.isInteger(message.awardMoney.high)))
                        return "awardMoney: integer|Long expected";
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    if (!$util.isInteger(message.awardDiamond) && !(message.awardDiamond && $util.isInteger(message.awardDiamond.low) && $util.isInteger(message.awardDiamond.high)))
                        return "awardDiamond: integer|Long expected";
                if (message.wallet != null && message.hasOwnProperty("wallet")) {
                    var error = $root.common.Wallet.verify(message.wallet);
                    if (error)
                        return "wallet." + error;
                }
                return null;
            };
    
            /**
             * Creates an AwardBoxOpenRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AwardBoxOpenRsp} AwardBoxOpenRsp
             */
            AwardBoxOpenRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AwardBoxOpenRsp)
                    return object;
                var message = new $root.hall.AwardBoxOpenRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.AwardBoxOpenRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.awardMoney != null)
                    if ($util.Long)
                        (message.awardMoney = $util.Long.fromValue(object.awardMoney)).unsigned = true;
                    else if (typeof object.awardMoney === "string")
                        message.awardMoney = parseInt(object.awardMoney, 10);
                    else if (typeof object.awardMoney === "number")
                        message.awardMoney = object.awardMoney;
                    else if (typeof object.awardMoney === "object")
                        message.awardMoney = new $util.LongBits(object.awardMoney.low >>> 0, object.awardMoney.high >>> 0).toNumber(true);
                if (object.awardDiamond != null)
                    if ($util.Long)
                        (message.awardDiamond = $util.Long.fromValue(object.awardDiamond)).unsigned = true;
                    else if (typeof object.awardDiamond === "string")
                        message.awardDiamond = parseInt(object.awardDiamond, 10);
                    else if (typeof object.awardDiamond === "number")
                        message.awardDiamond = object.awardDiamond;
                    else if (typeof object.awardDiamond === "object")
                        message.awardDiamond = new $util.LongBits(object.awardDiamond.low >>> 0, object.awardDiamond.high >>> 0).toNumber(true);
                if (object.wallet != null) {
                    if (typeof object.wallet !== "object")
                        throw TypeError(".hall.AwardBoxOpenRsp.wallet: object expected");
                    message.wallet = $root.common.Wallet.fromObject(object.wallet);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AwardBoxOpenRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AwardBoxOpenRsp
             * @static
             * @param {hall.AwardBoxOpenRsp} message AwardBoxOpenRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AwardBoxOpenRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.type = 0;
                    object.id = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.awardMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.awardMoney = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.awardDiamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.awardDiamond = options.longs === String ? "0" : 0;
                    object.wallet = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.awardMoney != null && message.hasOwnProperty("awardMoney"))
                    if (typeof message.awardMoney === "number")
                        object.awardMoney = options.longs === String ? String(message.awardMoney) : message.awardMoney;
                    else
                        object.awardMoney = options.longs === String ? $util.Long.prototype.toString.call(message.awardMoney) : options.longs === Number ? new $util.LongBits(message.awardMoney.low >>> 0, message.awardMoney.high >>> 0).toNumber(true) : message.awardMoney;
                if (message.awardDiamond != null && message.hasOwnProperty("awardDiamond"))
                    if (typeof message.awardDiamond === "number")
                        object.awardDiamond = options.longs === String ? String(message.awardDiamond) : message.awardDiamond;
                    else
                        object.awardDiamond = options.longs === String ? $util.Long.prototype.toString.call(message.awardDiamond) : options.longs === Number ? new $util.LongBits(message.awardDiamond.low >>> 0, message.awardDiamond.high >>> 0).toNumber(true) : message.awardDiamond;
                if (message.wallet != null && message.hasOwnProperty("wallet"))
                    object.wallet = $root.common.Wallet.toObject(message.wallet, options);
                return object;
            };
    
            /**
             * Converts this AwardBoxOpenRsp to JSON.
             * @function toJSON
             * @memberof hall.AwardBoxOpenRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AwardBoxOpenRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AwardBoxOpenRsp;
        })();
    
        hall.VipInfo = (function() {
    
            /**
             * Properties of a VipInfo.
             * @memberof hall
             * @interface IVipInfo
             * @property {number|null} [vip] VipInfo vip
             * @property {Array.<string>|null} [descs] VipInfo descs
             */
    
            /**
             * Constructs a new VipInfo.
             * @memberof hall
             * @classdesc Represents a VipInfo.
             * @implements IVipInfo
             * @constructor
             * @param {hall.IVipInfo=} [properties] Properties to set
             */
            function VipInfo(properties) {
                this.descs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VipInfo vip.
             * @member {number} vip
             * @memberof hall.VipInfo
             * @instance
             */
            VipInfo.prototype.vip = 0;
    
            /**
             * VipInfo descs.
             * @member {Array.<string>} descs
             * @memberof hall.VipInfo
             * @instance
             */
            VipInfo.prototype.descs = $util.emptyArray;
    
            /**
             * Creates a new VipInfo instance using the specified properties.
             * @function create
             * @memberof hall.VipInfo
             * @static
             * @param {hall.IVipInfo=} [properties] Properties to set
             * @returns {hall.VipInfo} VipInfo instance
             */
            VipInfo.create = function create(properties) {
                return new VipInfo(properties);
            };
    
            /**
             * Encodes the specified VipInfo message. Does not implicitly {@link hall.VipInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.VipInfo
             * @static
             * @param {hall.IVipInfo} message VipInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vip != null && message.hasOwnProperty("vip"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.vip);
                if (message.descs != null && message.descs.length)
                    for (var i = 0; i < message.descs.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.descs[i]);
                return writer;
            };
    
            /**
             * Encodes the specified VipInfo message, length delimited. Does not implicitly {@link hall.VipInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.VipInfo
             * @static
             * @param {hall.IVipInfo} message VipInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VipInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.VipInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.VipInfo} VipInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.VipInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vip = reader.uint32();
                        break;
                    case 2:
                        if (!(message.descs && message.descs.length))
                            message.descs = [];
                        message.descs.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a VipInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.VipInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.VipInfo} VipInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VipInfo message.
             * @function verify
             * @memberof hall.VipInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VipInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.vip != null && message.hasOwnProperty("vip"))
                    if (!$util.isInteger(message.vip))
                        return "vip: integer expected";
                if (message.descs != null && message.hasOwnProperty("descs")) {
                    if (!Array.isArray(message.descs))
                        return "descs: array expected";
                    for (var i = 0; i < message.descs.length; ++i)
                        if (!$util.isString(message.descs[i]))
                            return "descs: string[] expected";
                }
                return null;
            };
    
            /**
             * Creates a VipInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.VipInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.VipInfo} VipInfo
             */
            VipInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.VipInfo)
                    return object;
                var message = new $root.hall.VipInfo();
                if (object.vip != null)
                    message.vip = object.vip >>> 0;
                if (object.descs) {
                    if (!Array.isArray(object.descs))
                        throw TypeError(".hall.VipInfo.descs: array expected");
                    message.descs = [];
                    for (var i = 0; i < object.descs.length; ++i)
                        message.descs[i] = String(object.descs[i]);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a VipInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.VipInfo
             * @static
             * @param {hall.VipInfo} message VipInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VipInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.descs = [];
                if (options.defaults)
                    object.vip = 0;
                if (message.vip != null && message.hasOwnProperty("vip"))
                    object.vip = message.vip;
                if (message.descs && message.descs.length) {
                    object.descs = [];
                    for (var j = 0; j < message.descs.length; ++j)
                        object.descs[j] = message.descs[j];
                }
                return object;
            };
    
            /**
             * Converts this VipInfo to JSON.
             * @function toJSON
             * @memberof hall.VipInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VipInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VipInfo;
        })();
    
        hall.VipInfoReq = (function() {
    
            /**
             * Properties of a VipInfoReq.
             * @memberof hall
             * @interface IVipInfoReq
             * @property {common.IRequest} request VipInfoReq request
             */
    
            /**
             * Constructs a new VipInfoReq.
             * @memberof hall
             * @classdesc Represents a VipInfoReq.
             * @implements IVipInfoReq
             * @constructor
             * @param {hall.IVipInfoReq=} [properties] Properties to set
             */
            function VipInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VipInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.VipInfoReq
             * @instance
             */
            VipInfoReq.prototype.request = null;
    
            /**
             * Creates a new VipInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.VipInfoReq
             * @static
             * @param {hall.IVipInfoReq=} [properties] Properties to set
             * @returns {hall.VipInfoReq} VipInfoReq instance
             */
            VipInfoReq.create = function create(properties) {
                return new VipInfoReq(properties);
            };
    
            /**
             * Encodes the specified VipInfoReq message. Does not implicitly {@link hall.VipInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.VipInfoReq
             * @static
             * @param {hall.IVipInfoReq} message VipInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified VipInfoReq message, length delimited. Does not implicitly {@link hall.VipInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.VipInfoReq
             * @static
             * @param {hall.IVipInfoReq} message VipInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VipInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.VipInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.VipInfoReq} VipInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.VipInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a VipInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.VipInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.VipInfoReq} VipInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VipInfoReq message.
             * @function verify
             * @memberof hall.VipInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VipInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a VipInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.VipInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.VipInfoReq} VipInfoReq
             */
            VipInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.VipInfoReq)
                    return object;
                var message = new $root.hall.VipInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.VipInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a VipInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.VipInfoReq
             * @static
             * @param {hall.VipInfoReq} message VipInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VipInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this VipInfoReq to JSON.
             * @function toJSON
             * @memberof hall.VipInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VipInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VipInfoReq;
        })();
    
        hall.VipInfoRsp = (function() {
    
            /**
             * Properties of a VipInfoRsp.
             * @memberof hall
             * @interface IVipInfoRsp
             * @property {common.IResult|null} [result] VipInfoRsp result
             * @property {Array.<hall.IVipInfo>|null} [vipInfos] VipInfoRsp vipInfos
             */
    
            /**
             * Constructs a new VipInfoRsp.
             * @memberof hall
             * @classdesc Represents a VipInfoRsp.
             * @implements IVipInfoRsp
             * @constructor
             * @param {hall.IVipInfoRsp=} [properties] Properties to set
             */
            function VipInfoRsp(properties) {
                this.vipInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VipInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.VipInfoRsp
             * @instance
             */
            VipInfoRsp.prototype.result = null;
    
            /**
             * VipInfoRsp vipInfos.
             * @member {Array.<hall.IVipInfo>} vipInfos
             * @memberof hall.VipInfoRsp
             * @instance
             */
            VipInfoRsp.prototype.vipInfos = $util.emptyArray;
    
            /**
             * Creates a new VipInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.VipInfoRsp
             * @static
             * @param {hall.IVipInfoRsp=} [properties] Properties to set
             * @returns {hall.VipInfoRsp} VipInfoRsp instance
             */
            VipInfoRsp.create = function create(properties) {
                return new VipInfoRsp(properties);
            };
    
            /**
             * Encodes the specified VipInfoRsp message. Does not implicitly {@link hall.VipInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.VipInfoRsp
             * @static
             * @param {hall.IVipInfoRsp} message VipInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vipInfos != null && message.vipInfos.length)
                    for (var i = 0; i < message.vipInfos.length; ++i)
                        $root.hall.VipInfo.encode(message.vipInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified VipInfoRsp message, length delimited. Does not implicitly {@link hall.VipInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.VipInfoRsp
             * @static
             * @param {hall.IVipInfoRsp} message VipInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VipInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VipInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.VipInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.VipInfoRsp} VipInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.VipInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.vipInfos && message.vipInfos.length))
                            message.vipInfos = [];
                        message.vipInfos.push($root.hall.VipInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a VipInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.VipInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.VipInfoRsp} VipInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VipInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VipInfoRsp message.
             * @function verify
             * @memberof hall.VipInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VipInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.vipInfos != null && message.hasOwnProperty("vipInfos")) {
                    if (!Array.isArray(message.vipInfos))
                        return "vipInfos: array expected";
                    for (var i = 0; i < message.vipInfos.length; ++i) {
                        var error = $root.hall.VipInfo.verify(message.vipInfos[i]);
                        if (error)
                            return "vipInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a VipInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.VipInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.VipInfoRsp} VipInfoRsp
             */
            VipInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.VipInfoRsp)
                    return object;
                var message = new $root.hall.VipInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.VipInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.vipInfos) {
                    if (!Array.isArray(object.vipInfos))
                        throw TypeError(".hall.VipInfoRsp.vipInfos: array expected");
                    message.vipInfos = [];
                    for (var i = 0; i < object.vipInfos.length; ++i) {
                        if (typeof object.vipInfos[i] !== "object")
                            throw TypeError(".hall.VipInfoRsp.vipInfos: object expected");
                        message.vipInfos[i] = $root.hall.VipInfo.fromObject(object.vipInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a VipInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.VipInfoRsp
             * @static
             * @param {hall.VipInfoRsp} message VipInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VipInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.vipInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.vipInfos && message.vipInfos.length) {
                    object.vipInfos = [];
                    for (var j = 0; j < message.vipInfos.length; ++j)
                        object.vipInfos[j] = $root.hall.VipInfo.toObject(message.vipInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this VipInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.VipInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VipInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VipInfoRsp;
        })();
    
        hall.FirstPay = (function() {
    
            /**
             * Properties of a FirstPay.
             * @memberof hall
             * @interface IFirstPay
             * @property {number|null} [type] FirstPay type
             * @property {string|null} [name] FirstPay name
             * @property {number|null} [count] FirstPay count
             */
    
            /**
             * Constructs a new FirstPay.
             * @memberof hall
             * @classdesc Represents a FirstPay.
             * @implements IFirstPay
             * @constructor
             * @param {hall.IFirstPay=} [properties] Properties to set
             */
            function FirstPay(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FirstPay type.
             * @member {number} type
             * @memberof hall.FirstPay
             * @instance
             */
            FirstPay.prototype.type = 0;
    
            /**
             * FirstPay name.
             * @member {string} name
             * @memberof hall.FirstPay
             * @instance
             */
            FirstPay.prototype.name = "";
    
            /**
             * FirstPay count.
             * @member {number} count
             * @memberof hall.FirstPay
             * @instance
             */
            FirstPay.prototype.count = 0;
    
            /**
             * Creates a new FirstPay instance using the specified properties.
             * @function create
             * @memberof hall.FirstPay
             * @static
             * @param {hall.IFirstPay=} [properties] Properties to set
             * @returns {hall.FirstPay} FirstPay instance
             */
            FirstPay.create = function create(properties) {
                return new FirstPay(properties);
            };
    
            /**
             * Encodes the specified FirstPay message. Does not implicitly {@link hall.FirstPay.verify|verify} messages.
             * @function encode
             * @memberof hall.FirstPay
             * @static
             * @param {hall.IFirstPay} message FirstPay message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPay.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.count);
                return writer;
            };
    
            /**
             * Encodes the specified FirstPay message, length delimited. Does not implicitly {@link hall.FirstPay.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FirstPay
             * @static
             * @param {hall.IFirstPay} message FirstPay message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPay.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FirstPay message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FirstPay
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FirstPay} FirstPay
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPay.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FirstPay();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FirstPay message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FirstPay
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FirstPay} FirstPay
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPay.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FirstPay message.
             * @function verify
             * @memberof hall.FirstPay
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FirstPay.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };
    
            /**
             * Creates a FirstPay message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FirstPay
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FirstPay} FirstPay
             */
            FirstPay.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FirstPay)
                    return object;
                var message = new $root.hall.FirstPay();
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FirstPay message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FirstPay
             * @static
             * @param {hall.FirstPay} message FirstPay
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FirstPay.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.name = "";
                    object.count = 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };
    
            /**
             * Converts this FirstPay to JSON.
             * @function toJSON
             * @memberof hall.FirstPay
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FirstPay.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FirstPay;
        })();
    
        hall.FirstPayReq = (function() {
    
            /**
             * Properties of a FirstPayReq.
             * @memberof hall
             * @interface IFirstPayReq
             * @property {common.IRequest} request FirstPayReq request
             */
    
            /**
             * Constructs a new FirstPayReq.
             * @memberof hall
             * @classdesc Represents a FirstPayReq.
             * @implements IFirstPayReq
             * @constructor
             * @param {hall.IFirstPayReq=} [properties] Properties to set
             */
            function FirstPayReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FirstPayReq request.
             * @member {common.IRequest} request
             * @memberof hall.FirstPayReq
             * @instance
             */
            FirstPayReq.prototype.request = null;
    
            /**
             * Creates a new FirstPayReq instance using the specified properties.
             * @function create
             * @memberof hall.FirstPayReq
             * @static
             * @param {hall.IFirstPayReq=} [properties] Properties to set
             * @returns {hall.FirstPayReq} FirstPayReq instance
             */
            FirstPayReq.create = function create(properties) {
                return new FirstPayReq(properties);
            };
    
            /**
             * Encodes the specified FirstPayReq message. Does not implicitly {@link hall.FirstPayReq.verify|verify} messages.
             * @function encode
             * @memberof hall.FirstPayReq
             * @static
             * @param {hall.IFirstPayReq} message FirstPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPayReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FirstPayReq message, length delimited. Does not implicitly {@link hall.FirstPayReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FirstPayReq
             * @static
             * @param {hall.IFirstPayReq} message FirstPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPayReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FirstPayReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FirstPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FirstPayReq} FirstPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPayReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FirstPayReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a FirstPayReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FirstPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FirstPayReq} FirstPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPayReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FirstPayReq message.
             * @function verify
             * @memberof hall.FirstPayReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FirstPayReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a FirstPayReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FirstPayReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FirstPayReq} FirstPayReq
             */
            FirstPayReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FirstPayReq)
                    return object;
                var message = new $root.hall.FirstPayReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.FirstPayReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FirstPayReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FirstPayReq
             * @static
             * @param {hall.FirstPayReq} message FirstPayReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FirstPayReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this FirstPayReq to JSON.
             * @function toJSON
             * @memberof hall.FirstPayReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FirstPayReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FirstPayReq;
        })();
    
        hall.FirstPayRsp = (function() {
    
            /**
             * Properties of a FirstPayRsp.
             * @memberof hall
             * @interface IFirstPayRsp
             * @property {common.IResult|null} [result] FirstPayRsp result
             * @property {number|null} [payRmb] FirstPayRsp payRmb
             * @property {string|null} [title] FirstPayRsp title
             * @property {string|null} [tips] FirstPayRsp tips
             * @property {Array.<hall.IFirstPay>|null} [firstPays] FirstPayRsp firstPays
             */
    
            /**
             * Constructs a new FirstPayRsp.
             * @memberof hall
             * @classdesc Represents a FirstPayRsp.
             * @implements IFirstPayRsp
             * @constructor
             * @param {hall.IFirstPayRsp=} [properties] Properties to set
             */
            function FirstPayRsp(properties) {
                this.firstPays = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FirstPayRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.FirstPayRsp
             * @instance
             */
            FirstPayRsp.prototype.result = null;
    
            /**
             * FirstPayRsp payRmb.
             * @member {number} payRmb
             * @memberof hall.FirstPayRsp
             * @instance
             */
            FirstPayRsp.prototype.payRmb = 0;
    
            /**
             * FirstPayRsp title.
             * @member {string} title
             * @memberof hall.FirstPayRsp
             * @instance
             */
            FirstPayRsp.prototype.title = "";
    
            /**
             * FirstPayRsp tips.
             * @member {string} tips
             * @memberof hall.FirstPayRsp
             * @instance
             */
            FirstPayRsp.prototype.tips = "";
    
            /**
             * FirstPayRsp firstPays.
             * @member {Array.<hall.IFirstPay>} firstPays
             * @memberof hall.FirstPayRsp
             * @instance
             */
            FirstPayRsp.prototype.firstPays = $util.emptyArray;
    
            /**
             * Creates a new FirstPayRsp instance using the specified properties.
             * @function create
             * @memberof hall.FirstPayRsp
             * @static
             * @param {hall.IFirstPayRsp=} [properties] Properties to set
             * @returns {hall.FirstPayRsp} FirstPayRsp instance
             */
            FirstPayRsp.create = function create(properties) {
                return new FirstPayRsp(properties);
            };
    
            /**
             * Encodes the specified FirstPayRsp message. Does not implicitly {@link hall.FirstPayRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.FirstPayRsp
             * @static
             * @param {hall.IFirstPayRsp} message FirstPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPayRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.payRmb != null && message.hasOwnProperty("payRmb"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.payRmb);
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                if (message.tips != null && message.hasOwnProperty("tips"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.tips);
                if (message.firstPays != null && message.firstPays.length)
                    for (var i = 0; i < message.firstPays.length; ++i)
                        $root.hall.FirstPay.encode(message.firstPays[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FirstPayRsp message, length delimited. Does not implicitly {@link hall.FirstPayRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FirstPayRsp
             * @static
             * @param {hall.IFirstPayRsp} message FirstPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FirstPayRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FirstPayRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FirstPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FirstPayRsp} FirstPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPayRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FirstPayRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.payRmb = reader.uint32();
                        break;
                    case 3:
                        message.title = reader.string();
                        break;
                    case 4:
                        message.tips = reader.string();
                        break;
                    case 5:
                        if (!(message.firstPays && message.firstPays.length))
                            message.firstPays = [];
                        message.firstPays.push($root.hall.FirstPay.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FirstPayRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FirstPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FirstPayRsp} FirstPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FirstPayRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FirstPayRsp message.
             * @function verify
             * @memberof hall.FirstPayRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FirstPayRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.payRmb != null && message.hasOwnProperty("payRmb"))
                    if (!$util.isInteger(message.payRmb))
                        return "payRmb: integer expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.tips != null && message.hasOwnProperty("tips"))
                    if (!$util.isString(message.tips))
                        return "tips: string expected";
                if (message.firstPays != null && message.hasOwnProperty("firstPays")) {
                    if (!Array.isArray(message.firstPays))
                        return "firstPays: array expected";
                    for (var i = 0; i < message.firstPays.length; ++i) {
                        var error = $root.hall.FirstPay.verify(message.firstPays[i]);
                        if (error)
                            return "firstPays." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a FirstPayRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FirstPayRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FirstPayRsp} FirstPayRsp
             */
            FirstPayRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FirstPayRsp)
                    return object;
                var message = new $root.hall.FirstPayRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.FirstPayRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.payRmb != null)
                    message.payRmb = object.payRmb >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.tips != null)
                    message.tips = String(object.tips);
                if (object.firstPays) {
                    if (!Array.isArray(object.firstPays))
                        throw TypeError(".hall.FirstPayRsp.firstPays: array expected");
                    message.firstPays = [];
                    for (var i = 0; i < object.firstPays.length; ++i) {
                        if (typeof object.firstPays[i] !== "object")
                            throw TypeError(".hall.FirstPayRsp.firstPays: object expected");
                        message.firstPays[i] = $root.hall.FirstPay.fromObject(object.firstPays[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FirstPayRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FirstPayRsp
             * @static
             * @param {hall.FirstPayRsp} message FirstPayRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FirstPayRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.firstPays = [];
                if (options.defaults) {
                    object.result = null;
                    object.payRmb = 0;
                    object.title = "";
                    object.tips = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.payRmb != null && message.hasOwnProperty("payRmb"))
                    object.payRmb = message.payRmb;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.tips != null && message.hasOwnProperty("tips"))
                    object.tips = message.tips;
                if (message.firstPays && message.firstPays.length) {
                    object.firstPays = [];
                    for (var j = 0; j < message.firstPays.length; ++j)
                        object.firstPays[j] = $root.hall.FirstPay.toObject(message.firstPays[j], options);
                }
                return object;
            };
    
            /**
             * Converts this FirstPayRsp to JSON.
             * @function toJSON
             * @memberof hall.FirstPayRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FirstPayRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FirstPayRsp;
        })();
    
        hall.FriendInfo = (function() {
    
            /**
             * Properties of a FriendInfo.
             * @memberof hall
             * @interface IFriendInfo
             * @property {number|null} [uid] FriendInfo uid
             * @property {number|null} [gender] FriendInfo gender
             * @property {string|null} [nick] FriendInfo nick
             * @property {string|null} [headUrl] FriendInfo headUrl
             * @property {number|Long|null} [diamond] FriendInfo diamond
             * @property {boolean|null} [online] FriendInfo online
             * @property {number|null} [gameId] FriendInfo gameId
             * @property {number|null} [roomId] FriendInfo roomId
             * @property {number|null} [tableId] FriendInfo tableId
             */
    
            /**
             * Constructs a new FriendInfo.
             * @memberof hall
             * @classdesc Represents a FriendInfo.
             * @implements IFriendInfo
             * @constructor
             * @param {hall.IFriendInfo=} [properties] Properties to set
             */
            function FriendInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendInfo uid.
             * @member {number} uid
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.uid = 0;
    
            /**
             * FriendInfo gender.
             * @member {number} gender
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.gender = 0;
    
            /**
             * FriendInfo nick.
             * @member {string} nick
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.nick = "";
    
            /**
             * FriendInfo headUrl.
             * @member {string} headUrl
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.headUrl = "";
    
            /**
             * FriendInfo diamond.
             * @member {number|Long} diamond
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * FriendInfo online.
             * @member {boolean} online
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.online = false;
    
            /**
             * FriendInfo gameId.
             * @member {number} gameId
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.gameId = 0;
    
            /**
             * FriendInfo roomId.
             * @member {number} roomId
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.roomId = 0;
    
            /**
             * FriendInfo tableId.
             * @member {number} tableId
             * @memberof hall.FriendInfo
             * @instance
             */
            FriendInfo.prototype.tableId = 0;
    
            /**
             * Creates a new FriendInfo instance using the specified properties.
             * @function create
             * @memberof hall.FriendInfo
             * @static
             * @param {hall.IFriendInfo=} [properties] Properties to set
             * @returns {hall.FriendInfo} FriendInfo instance
             */
            FriendInfo.create = function create(properties) {
                return new FriendInfo(properties);
            };
    
            /**
             * Encodes the specified FriendInfo message. Does not implicitly {@link hall.FriendInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendInfo
             * @static
             * @param {hall.IFriendInfo} message FriendInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.gender != null && message.hasOwnProperty("gender"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gender);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.nick);
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.headUrl);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.diamond);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.online);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.tableId);
                return writer;
            };
    
            /**
             * Encodes the specified FriendInfo message, length delimited. Does not implicitly {@link hall.FriendInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendInfo
             * @static
             * @param {hall.IFriendInfo} message FriendInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendInfo} FriendInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.gender = reader.uint32();
                        break;
                    case 3:
                        message.nick = reader.string();
                        break;
                    case 4:
                        message.headUrl = reader.string();
                        break;
                    case 5:
                        message.diamond = reader.uint64();
                        break;
                    case 6:
                        message.online = reader.bool();
                        break;
                    case 7:
                        message.gameId = reader.uint32();
                        break;
                    case 8:
                        message.roomId = reader.uint32();
                        break;
                    case 9:
                        message.tableId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendInfo} FriendInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendInfo message.
             * @function verify
             * @memberof hall.FriendInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.gender != null && message.hasOwnProperty("gender"))
                    if (!$util.isInteger(message.gender))
                        return "gender: integer expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    if (!$util.isString(message.headUrl))
                        return "headUrl: string expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (typeof message.online !== "boolean")
                        return "online: boolean expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendInfo} FriendInfo
             */
            FriendInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendInfo)
                    return object;
                var message = new $root.hall.FriendInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.gender != null)
                    message.gender = object.gender >>> 0;
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.headUrl != null)
                    message.headUrl = String(object.headUrl);
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                if (object.online != null)
                    message.online = Boolean(object.online);
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendInfo
             * @static
             * @param {hall.FriendInfo} message FriendInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.gender = 0;
                    object.nick = "";
                    object.headUrl = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                    object.online = false;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.gender != null && message.hasOwnProperty("gender"))
                    object.gender = message.gender;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.headUrl != null && message.hasOwnProperty("headUrl"))
                    object.headUrl = message.headUrl;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                return object;
            };
    
            /**
             * Converts this FriendInfo to JSON.
             * @function toJSON
             * @memberof hall.FriendInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendInfo;
        })();
    
        hall.FriendReq = (function() {
    
            /**
             * Properties of a FriendReq.
             * @memberof hall
             * @interface IFriendReq
             * @property {common.IRequest} request FriendReq request
             */
    
            /**
             * Constructs a new FriendReq.
             * @memberof hall
             * @classdesc Represents a FriendReq.
             * @implements IFriendReq
             * @constructor
             * @param {hall.IFriendReq=} [properties] Properties to set
             */
            function FriendReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendReq request.
             * @member {common.IRequest} request
             * @memberof hall.FriendReq
             * @instance
             */
            FriendReq.prototype.request = null;
    
            /**
             * Creates a new FriendReq instance using the specified properties.
             * @function create
             * @memberof hall.FriendReq
             * @static
             * @param {hall.IFriendReq=} [properties] Properties to set
             * @returns {hall.FriendReq} FriendReq instance
             */
            FriendReq.create = function create(properties) {
                return new FriendReq(properties);
            };
    
            /**
             * Encodes the specified FriendReq message. Does not implicitly {@link hall.FriendReq.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendReq
             * @static
             * @param {hall.IFriendReq} message FriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FriendReq message, length delimited. Does not implicitly {@link hall.FriendReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendReq
             * @static
             * @param {hall.IFriendReq} message FriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendReq} FriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a FriendReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendReq} FriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendReq message.
             * @function verify
             * @memberof hall.FriendReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a FriendReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendReq} FriendReq
             */
            FriendReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendReq)
                    return object;
                var message = new $root.hall.FriendReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.FriendReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FriendReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendReq
             * @static
             * @param {hall.FriendReq} message FriendReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this FriendReq to JSON.
             * @function toJSON
             * @memberof hall.FriendReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendReq;
        })();
    
        hall.FriendRsp = (function() {
    
            /**
             * Properties of a FriendRsp.
             * @memberof hall
             * @interface IFriendRsp
             * @property {common.IResult|null} [result] FriendRsp result
             * @property {Array.<hall.IFriendInfo>|null} [friendInfos] FriendRsp friendInfos
             */
    
            /**
             * Constructs a new FriendRsp.
             * @memberof hall
             * @classdesc Represents a FriendRsp.
             * @implements IFriendRsp
             * @constructor
             * @param {hall.IFriendRsp=} [properties] Properties to set
             */
            function FriendRsp(properties) {
                this.friendInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.FriendRsp
             * @instance
             */
            FriendRsp.prototype.result = null;
    
            /**
             * FriendRsp friendInfos.
             * @member {Array.<hall.IFriendInfo>} friendInfos
             * @memberof hall.FriendRsp
             * @instance
             */
            FriendRsp.prototype.friendInfos = $util.emptyArray;
    
            /**
             * Creates a new FriendRsp instance using the specified properties.
             * @function create
             * @memberof hall.FriendRsp
             * @static
             * @param {hall.IFriendRsp=} [properties] Properties to set
             * @returns {hall.FriendRsp} FriendRsp instance
             */
            FriendRsp.create = function create(properties) {
                return new FriendRsp(properties);
            };
    
            /**
             * Encodes the specified FriendRsp message. Does not implicitly {@link hall.FriendRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendRsp
             * @static
             * @param {hall.IFriendRsp} message FriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendInfos != null && message.friendInfos.length)
                    for (var i = 0; i < message.friendInfos.length; ++i)
                        $root.hall.FriendInfo.encode(message.friendInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FriendRsp message, length delimited. Does not implicitly {@link hall.FriendRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendRsp
             * @static
             * @param {hall.IFriendRsp} message FriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendRsp} FriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.friendInfos && message.friendInfos.length))
                            message.friendInfos = [];
                        message.friendInfos.push($root.hall.FriendInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendRsp} FriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendRsp message.
             * @function verify
             * @memberof hall.FriendRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendInfos != null && message.hasOwnProperty("friendInfos")) {
                    if (!Array.isArray(message.friendInfos))
                        return "friendInfos: array expected";
                    for (var i = 0; i < message.friendInfos.length; ++i) {
                        var error = $root.hall.FriendInfo.verify(message.friendInfos[i]);
                        if (error)
                            return "friendInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a FriendRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendRsp} FriendRsp
             */
            FriendRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendRsp)
                    return object;
                var message = new $root.hall.FriendRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.FriendRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendInfos) {
                    if (!Array.isArray(object.friendInfos))
                        throw TypeError(".hall.FriendRsp.friendInfos: array expected");
                    message.friendInfos = [];
                    for (var i = 0; i < object.friendInfos.length; ++i) {
                        if (typeof object.friendInfos[i] !== "object")
                            throw TypeError(".hall.FriendRsp.friendInfos: object expected");
                        message.friendInfos[i] = $root.hall.FriendInfo.fromObject(object.friendInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FriendRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendRsp
             * @static
             * @param {hall.FriendRsp} message FriendRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.friendInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendInfos && message.friendInfos.length) {
                    object.friendInfos = [];
                    for (var j = 0; j < message.friendInfos.length; ++j)
                        object.friendInfos[j] = $root.hall.FriendInfo.toObject(message.friendInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this FriendRsp to JSON.
             * @function toJSON
             * @memberof hall.FriendRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendRsp;
        })();
    
        hall.FriendOnlineInfo = (function() {
    
            /**
             * Properties of a FriendOnlineInfo.
             * @memberof hall
             * @interface IFriendOnlineInfo
             * @property {number|null} [uid] FriendOnlineInfo uid
             * @property {boolean|null} [online] FriendOnlineInfo online
             * @property {number|null} [gameId] FriendOnlineInfo gameId
             * @property {number|null} [roomId] FriendOnlineInfo roomId
             * @property {number|null} [tableId] FriendOnlineInfo tableId
             */
    
            /**
             * Constructs a new FriendOnlineInfo.
             * @memberof hall
             * @classdesc Represents a FriendOnlineInfo.
             * @implements IFriendOnlineInfo
             * @constructor
             * @param {hall.IFriendOnlineInfo=} [properties] Properties to set
             */
            function FriendOnlineInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendOnlineInfo uid.
             * @member {number} uid
             * @memberof hall.FriendOnlineInfo
             * @instance
             */
            FriendOnlineInfo.prototype.uid = 0;
    
            /**
             * FriendOnlineInfo online.
             * @member {boolean} online
             * @memberof hall.FriendOnlineInfo
             * @instance
             */
            FriendOnlineInfo.prototype.online = false;
    
            /**
             * FriendOnlineInfo gameId.
             * @member {number} gameId
             * @memberof hall.FriendOnlineInfo
             * @instance
             */
            FriendOnlineInfo.prototype.gameId = 0;
    
            /**
             * FriendOnlineInfo roomId.
             * @member {number} roomId
             * @memberof hall.FriendOnlineInfo
             * @instance
             */
            FriendOnlineInfo.prototype.roomId = 0;
    
            /**
             * FriendOnlineInfo tableId.
             * @member {number} tableId
             * @memberof hall.FriendOnlineInfo
             * @instance
             */
            FriendOnlineInfo.prototype.tableId = 0;
    
            /**
             * Creates a new FriendOnlineInfo instance using the specified properties.
             * @function create
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {hall.IFriendOnlineInfo=} [properties] Properties to set
             * @returns {hall.FriendOnlineInfo} FriendOnlineInfo instance
             */
            FriendOnlineInfo.create = function create(properties) {
                return new FriendOnlineInfo(properties);
            };
    
            /**
             * Encodes the specified FriendOnlineInfo message. Does not implicitly {@link hall.FriendOnlineInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {hall.IFriendOnlineInfo} message FriendOnlineInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.online);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.tableId);
                return writer;
            };
    
            /**
             * Encodes the specified FriendOnlineInfo message, length delimited. Does not implicitly {@link hall.FriendOnlineInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {hall.IFriendOnlineInfo} message FriendOnlineInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendOnlineInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendOnlineInfo} FriendOnlineInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendOnlineInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.online = reader.bool();
                        break;
                    case 7:
                        message.gameId = reader.uint32();
                        break;
                    case 8:
                        message.roomId = reader.uint32();
                        break;
                    case 9:
                        message.tableId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendOnlineInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendOnlineInfo} FriendOnlineInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendOnlineInfo message.
             * @function verify
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendOnlineInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (typeof message.online !== "boolean")
                        return "online: boolean expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendOnlineInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendOnlineInfo} FriendOnlineInfo
             */
            FriendOnlineInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendOnlineInfo)
                    return object;
                var message = new $root.hall.FriendOnlineInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.online != null)
                    message.online = Boolean(object.online);
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendOnlineInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendOnlineInfo
             * @static
             * @param {hall.FriendOnlineInfo} message FriendOnlineInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendOnlineInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.online = false;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                return object;
            };
    
            /**
             * Converts this FriendOnlineInfo to JSON.
             * @function toJSON
             * @memberof hall.FriendOnlineInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendOnlineInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendOnlineInfo;
        })();
    
        hall.FriendOnlineReq = (function() {
    
            /**
             * Properties of a FriendOnlineReq.
             * @memberof hall
             * @interface IFriendOnlineReq
             * @property {common.IRequest} request FriendOnlineReq request
             */
    
            /**
             * Constructs a new FriendOnlineReq.
             * @memberof hall
             * @classdesc Represents a FriendOnlineReq.
             * @implements IFriendOnlineReq
             * @constructor
             * @param {hall.IFriendOnlineReq=} [properties] Properties to set
             */
            function FriendOnlineReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendOnlineReq request.
             * @member {common.IRequest} request
             * @memberof hall.FriendOnlineReq
             * @instance
             */
            FriendOnlineReq.prototype.request = null;
    
            /**
             * Creates a new FriendOnlineReq instance using the specified properties.
             * @function create
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {hall.IFriendOnlineReq=} [properties] Properties to set
             * @returns {hall.FriendOnlineReq} FriendOnlineReq instance
             */
            FriendOnlineReq.create = function create(properties) {
                return new FriendOnlineReq(properties);
            };
    
            /**
             * Encodes the specified FriendOnlineReq message. Does not implicitly {@link hall.FriendOnlineReq.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {hall.IFriendOnlineReq} message FriendOnlineReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FriendOnlineReq message, length delimited. Does not implicitly {@link hall.FriendOnlineReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {hall.IFriendOnlineReq} message FriendOnlineReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendOnlineReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendOnlineReq} FriendOnlineReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendOnlineReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a FriendOnlineReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendOnlineReq} FriendOnlineReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendOnlineReq message.
             * @function verify
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendOnlineReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a FriendOnlineReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendOnlineReq} FriendOnlineReq
             */
            FriendOnlineReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendOnlineReq)
                    return object;
                var message = new $root.hall.FriendOnlineReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.FriendOnlineReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FriendOnlineReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendOnlineReq
             * @static
             * @param {hall.FriendOnlineReq} message FriendOnlineReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendOnlineReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this FriendOnlineReq to JSON.
             * @function toJSON
             * @memberof hall.FriendOnlineReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendOnlineReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendOnlineReq;
        })();
    
        hall.FriendOnlineRsp = (function() {
    
            /**
             * Properties of a FriendOnlineRsp.
             * @memberof hall
             * @interface IFriendOnlineRsp
             * @property {common.IResult|null} [result] FriendOnlineRsp result
             * @property {Array.<hall.IFriendOnlineInfo>|null} [friendOnlineInfos] FriendOnlineRsp friendOnlineInfos
             */
    
            /**
             * Constructs a new FriendOnlineRsp.
             * @memberof hall
             * @classdesc Represents a FriendOnlineRsp.
             * @implements IFriendOnlineRsp
             * @constructor
             * @param {hall.IFriendOnlineRsp=} [properties] Properties to set
             */
            function FriendOnlineRsp(properties) {
                this.friendOnlineInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendOnlineRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.FriendOnlineRsp
             * @instance
             */
            FriendOnlineRsp.prototype.result = null;
    
            /**
             * FriendOnlineRsp friendOnlineInfos.
             * @member {Array.<hall.IFriendOnlineInfo>} friendOnlineInfos
             * @memberof hall.FriendOnlineRsp
             * @instance
             */
            FriendOnlineRsp.prototype.friendOnlineInfos = $util.emptyArray;
    
            /**
             * Creates a new FriendOnlineRsp instance using the specified properties.
             * @function create
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {hall.IFriendOnlineRsp=} [properties] Properties to set
             * @returns {hall.FriendOnlineRsp} FriendOnlineRsp instance
             */
            FriendOnlineRsp.create = function create(properties) {
                return new FriendOnlineRsp(properties);
            };
    
            /**
             * Encodes the specified FriendOnlineRsp message. Does not implicitly {@link hall.FriendOnlineRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {hall.IFriendOnlineRsp} message FriendOnlineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendOnlineInfos != null && message.friendOnlineInfos.length)
                    for (var i = 0; i < message.friendOnlineInfos.length; ++i)
                        $root.hall.FriendOnlineInfo.encode(message.friendOnlineInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FriendOnlineRsp message, length delimited. Does not implicitly {@link hall.FriendOnlineRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {hall.IFriendOnlineRsp} message FriendOnlineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendOnlineRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendOnlineRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FriendOnlineRsp} FriendOnlineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FriendOnlineRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.friendOnlineInfos && message.friendOnlineInfos.length))
                            message.friendOnlineInfos = [];
                        message.friendOnlineInfos.push($root.hall.FriendOnlineInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendOnlineRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FriendOnlineRsp} FriendOnlineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendOnlineRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendOnlineRsp message.
             * @function verify
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendOnlineRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendOnlineInfos != null && message.hasOwnProperty("friendOnlineInfos")) {
                    if (!Array.isArray(message.friendOnlineInfos))
                        return "friendOnlineInfos: array expected";
                    for (var i = 0; i < message.friendOnlineInfos.length; ++i) {
                        var error = $root.hall.FriendOnlineInfo.verify(message.friendOnlineInfos[i]);
                        if (error)
                            return "friendOnlineInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a FriendOnlineRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FriendOnlineRsp} FriendOnlineRsp
             */
            FriendOnlineRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FriendOnlineRsp)
                    return object;
                var message = new $root.hall.FriendOnlineRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.FriendOnlineRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendOnlineInfos) {
                    if (!Array.isArray(object.friendOnlineInfos))
                        throw TypeError(".hall.FriendOnlineRsp.friendOnlineInfos: array expected");
                    message.friendOnlineInfos = [];
                    for (var i = 0; i < object.friendOnlineInfos.length; ++i) {
                        if (typeof object.friendOnlineInfos[i] !== "object")
                            throw TypeError(".hall.FriendOnlineRsp.friendOnlineInfos: object expected");
                        message.friendOnlineInfos[i] = $root.hall.FriendOnlineInfo.fromObject(object.friendOnlineInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FriendOnlineRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FriendOnlineRsp
             * @static
             * @param {hall.FriendOnlineRsp} message FriendOnlineRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendOnlineRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.friendOnlineInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendOnlineInfos && message.friendOnlineInfos.length) {
                    object.friendOnlineInfos = [];
                    for (var j = 0; j < message.friendOnlineInfos.length; ++j)
                        object.friendOnlineInfos[j] = $root.hall.FriendOnlineInfo.toObject(message.friendOnlineInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this FriendOnlineRsp to JSON.
             * @function toJSON
             * @memberof hall.FriendOnlineRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendOnlineRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendOnlineRsp;
        })();
    
        hall.AddFriendReq = (function() {
    
            /**
             * Properties of an AddFriendReq.
             * @memberof hall
             * @interface IAddFriendReq
             * @property {common.IRequest} request AddFriendReq request
             * @property {number|null} [friendId] AddFriendReq friendId
             */
    
            /**
             * Constructs a new AddFriendReq.
             * @memberof hall
             * @classdesc Represents an AddFriendReq.
             * @implements IAddFriendReq
             * @constructor
             * @param {hall.IAddFriendReq=} [properties] Properties to set
             */
            function AddFriendReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AddFriendReq request.
             * @member {common.IRequest} request
             * @memberof hall.AddFriendReq
             * @instance
             */
            AddFriendReq.prototype.request = null;
    
            /**
             * AddFriendReq friendId.
             * @member {number} friendId
             * @memberof hall.AddFriendReq
             * @instance
             */
            AddFriendReq.prototype.friendId = 0;
    
            /**
             * Creates a new AddFriendReq instance using the specified properties.
             * @function create
             * @memberof hall.AddFriendReq
             * @static
             * @param {hall.IAddFriendReq=} [properties] Properties to set
             * @returns {hall.AddFriendReq} AddFriendReq instance
             */
            AddFriendReq.create = function create(properties) {
                return new AddFriendReq(properties);
            };
    
            /**
             * Encodes the specified AddFriendReq message. Does not implicitly {@link hall.AddFriendReq.verify|verify} messages.
             * @function encode
             * @memberof hall.AddFriendReq
             * @static
             * @param {hall.IAddFriendReq} message AddFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddFriendReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified AddFriendReq message, length delimited. Does not implicitly {@link hall.AddFriendReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AddFriendReq
             * @static
             * @param {hall.IAddFriendReq} message AddFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddFriendReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AddFriendReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AddFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AddFriendReq} AddFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddFriendReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AddFriendReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an AddFriendReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AddFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AddFriendReq} AddFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddFriendReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AddFriendReq message.
             * @function verify
             * @memberof hall.AddFriendReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AddFriendReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates an AddFriendReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AddFriendReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AddFriendReq} AddFriendReq
             */
            AddFriendReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AddFriendReq)
                    return object;
                var message = new $root.hall.AddFriendReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.AddFriendReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AddFriendReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AddFriendReq
             * @static
             * @param {hall.AddFriendReq} message AddFriendReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AddFriendReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.friendId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this AddFriendReq to JSON.
             * @function toJSON
             * @memberof hall.AddFriendReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AddFriendReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AddFriendReq;
        })();
    
        hall.AddFriendRsp = (function() {
    
            /**
             * Properties of an AddFriendRsp.
             * @memberof hall
             * @interface IAddFriendRsp
             * @property {common.IResult|null} [result] AddFriendRsp result
             * @property {number|null} [friendId] AddFriendRsp friendId
             */
    
            /**
             * Constructs a new AddFriendRsp.
             * @memberof hall
             * @classdesc Represents an AddFriendRsp.
             * @implements IAddFriendRsp
             * @constructor
             * @param {hall.IAddFriendRsp=} [properties] Properties to set
             */
            function AddFriendRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AddFriendRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.AddFriendRsp
             * @instance
             */
            AddFriendRsp.prototype.result = null;
    
            /**
             * AddFriendRsp friendId.
             * @member {number} friendId
             * @memberof hall.AddFriendRsp
             * @instance
             */
            AddFriendRsp.prototype.friendId = 0;
    
            /**
             * Creates a new AddFriendRsp instance using the specified properties.
             * @function create
             * @memberof hall.AddFriendRsp
             * @static
             * @param {hall.IAddFriendRsp=} [properties] Properties to set
             * @returns {hall.AddFriendRsp} AddFriendRsp instance
             */
            AddFriendRsp.create = function create(properties) {
                return new AddFriendRsp(properties);
            };
    
            /**
             * Encodes the specified AddFriendRsp message. Does not implicitly {@link hall.AddFriendRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.AddFriendRsp
             * @static
             * @param {hall.IAddFriendRsp} message AddFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddFriendRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified AddFriendRsp message, length delimited. Does not implicitly {@link hall.AddFriendRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AddFriendRsp
             * @static
             * @param {hall.IAddFriendRsp} message AddFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AddFriendRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AddFriendRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AddFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AddFriendRsp} AddFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddFriendRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AddFriendRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AddFriendRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AddFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AddFriendRsp} AddFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AddFriendRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AddFriendRsp message.
             * @function verify
             * @memberof hall.AddFriendRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AddFriendRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates an AddFriendRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AddFriendRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AddFriendRsp} AddFriendRsp
             */
            AddFriendRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AddFriendRsp)
                    return object;
                var message = new $root.hall.AddFriendRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.AddFriendRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AddFriendRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AddFriendRsp
             * @static
             * @param {hall.AddFriendRsp} message AddFriendRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AddFriendRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.friendId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this AddFriendRsp to JSON.
             * @function toJSON
             * @memberof hall.AddFriendRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AddFriendRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AddFriendRsp;
        })();
    
        hall.RemoveFriendReq = (function() {
    
            /**
             * Properties of a RemoveFriendReq.
             * @memberof hall
             * @interface IRemoveFriendReq
             * @property {common.IRequest} request RemoveFriendReq request
             * @property {number|null} [friendId] RemoveFriendReq friendId
             */
    
            /**
             * Constructs a new RemoveFriendReq.
             * @memberof hall
             * @classdesc Represents a RemoveFriendReq.
             * @implements IRemoveFriendReq
             * @constructor
             * @param {hall.IRemoveFriendReq=} [properties] Properties to set
             */
            function RemoveFriendReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RemoveFriendReq request.
             * @member {common.IRequest} request
             * @memberof hall.RemoveFriendReq
             * @instance
             */
            RemoveFriendReq.prototype.request = null;
    
            /**
             * RemoveFriendReq friendId.
             * @member {number} friendId
             * @memberof hall.RemoveFriendReq
             * @instance
             */
            RemoveFriendReq.prototype.friendId = 0;
    
            /**
             * Creates a new RemoveFriendReq instance using the specified properties.
             * @function create
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {hall.IRemoveFriendReq=} [properties] Properties to set
             * @returns {hall.RemoveFriendReq} RemoveFriendReq instance
             */
            RemoveFriendReq.create = function create(properties) {
                return new RemoveFriendReq(properties);
            };
    
            /**
             * Encodes the specified RemoveFriendReq message. Does not implicitly {@link hall.RemoveFriendReq.verify|verify} messages.
             * @function encode
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {hall.IRemoveFriendReq} message RemoveFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoveFriendReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified RemoveFriendReq message, length delimited. Does not implicitly {@link hall.RemoveFriendReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {hall.IRemoveFriendReq} message RemoveFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoveFriendReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RemoveFriendReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RemoveFriendReq} RemoveFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoveFriendReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RemoveFriendReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RemoveFriendReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RemoveFriendReq} RemoveFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoveFriendReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RemoveFriendReq message.
             * @function verify
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemoveFriendReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a RemoveFriendReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RemoveFriendReq} RemoveFriendReq
             */
            RemoveFriendReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RemoveFriendReq)
                    return object;
                var message = new $root.hall.RemoveFriendReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.RemoveFriendReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RemoveFriendReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RemoveFriendReq
             * @static
             * @param {hall.RemoveFriendReq} message RemoveFriendReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemoveFriendReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.friendId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this RemoveFriendReq to JSON.
             * @function toJSON
             * @memberof hall.RemoveFriendReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemoveFriendReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RemoveFriendReq;
        })();
    
        hall.RemoveFriendRsp = (function() {
    
            /**
             * Properties of a RemoveFriendRsp.
             * @memberof hall
             * @interface IRemoveFriendRsp
             * @property {common.IResult|null} [result] RemoveFriendRsp result
             * @property {number|null} [friendId] RemoveFriendRsp friendId
             */
    
            /**
             * Constructs a new RemoveFriendRsp.
             * @memberof hall
             * @classdesc Represents a RemoveFriendRsp.
             * @implements IRemoveFriendRsp
             * @constructor
             * @param {hall.IRemoveFriendRsp=} [properties] Properties to set
             */
            function RemoveFriendRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RemoveFriendRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.RemoveFriendRsp
             * @instance
             */
            RemoveFriendRsp.prototype.result = null;
    
            /**
             * RemoveFriendRsp friendId.
             * @member {number} friendId
             * @memberof hall.RemoveFriendRsp
             * @instance
             */
            RemoveFriendRsp.prototype.friendId = 0;
    
            /**
             * Creates a new RemoveFriendRsp instance using the specified properties.
             * @function create
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {hall.IRemoveFriendRsp=} [properties] Properties to set
             * @returns {hall.RemoveFriendRsp} RemoveFriendRsp instance
             */
            RemoveFriendRsp.create = function create(properties) {
                return new RemoveFriendRsp(properties);
            };
    
            /**
             * Encodes the specified RemoveFriendRsp message. Does not implicitly {@link hall.RemoveFriendRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {hall.IRemoveFriendRsp} message RemoveFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoveFriendRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified RemoveFriendRsp message, length delimited. Does not implicitly {@link hall.RemoveFriendRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {hall.IRemoveFriendRsp} message RemoveFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemoveFriendRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RemoveFriendRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RemoveFriendRsp} RemoveFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoveFriendRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RemoveFriendRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RemoveFriendRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RemoveFriendRsp} RemoveFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemoveFriendRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RemoveFriendRsp message.
             * @function verify
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemoveFriendRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a RemoveFriendRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RemoveFriendRsp} RemoveFriendRsp
             */
            RemoveFriendRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RemoveFriendRsp)
                    return object;
                var message = new $root.hall.RemoveFriendRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.RemoveFriendRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RemoveFriendRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RemoveFriendRsp
             * @static
             * @param {hall.RemoveFriendRsp} message RemoveFriendRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemoveFriendRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.friendId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this RemoveFriendRsp to JSON.
             * @function toJSON
             * @memberof hall.RemoveFriendRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemoveFriendRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RemoveFriendRsp;
        })();
    
        hall.BlackFriendReq = (function() {
    
            /**
             * Properties of a BlackFriendReq.
             * @memberof hall
             * @interface IBlackFriendReq
             * @property {common.IRequest} request BlackFriendReq request
             * @property {number|null} [friendId] BlackFriendReq friendId
             */
    
            /**
             * Constructs a new BlackFriendReq.
             * @memberof hall
             * @classdesc Represents a BlackFriendReq.
             * @implements IBlackFriendReq
             * @constructor
             * @param {hall.IBlackFriendReq=} [properties] Properties to set
             */
            function BlackFriendReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BlackFriendReq request.
             * @member {common.IRequest} request
             * @memberof hall.BlackFriendReq
             * @instance
             */
            BlackFriendReq.prototype.request = null;
    
            /**
             * BlackFriendReq friendId.
             * @member {number} friendId
             * @memberof hall.BlackFriendReq
             * @instance
             */
            BlackFriendReq.prototype.friendId = 0;
    
            /**
             * Creates a new BlackFriendReq instance using the specified properties.
             * @function create
             * @memberof hall.BlackFriendReq
             * @static
             * @param {hall.IBlackFriendReq=} [properties] Properties to set
             * @returns {hall.BlackFriendReq} BlackFriendReq instance
             */
            BlackFriendReq.create = function create(properties) {
                return new BlackFriendReq(properties);
            };
    
            /**
             * Encodes the specified BlackFriendReq message. Does not implicitly {@link hall.BlackFriendReq.verify|verify} messages.
             * @function encode
             * @memberof hall.BlackFriendReq
             * @static
             * @param {hall.IBlackFriendReq} message BlackFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlackFriendReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified BlackFriendReq message, length delimited. Does not implicitly {@link hall.BlackFriendReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BlackFriendReq
             * @static
             * @param {hall.IBlackFriendReq} message BlackFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlackFriendReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BlackFriendReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BlackFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BlackFriendReq} BlackFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlackFriendReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BlackFriendReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a BlackFriendReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BlackFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BlackFriendReq} BlackFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlackFriendReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BlackFriendReq message.
             * @function verify
             * @memberof hall.BlackFriendReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlackFriendReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a BlackFriendReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BlackFriendReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BlackFriendReq} BlackFriendReq
             */
            BlackFriendReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BlackFriendReq)
                    return object;
                var message = new $root.hall.BlackFriendReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.BlackFriendReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BlackFriendReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BlackFriendReq
             * @static
             * @param {hall.BlackFriendReq} message BlackFriendReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlackFriendReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.friendId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this BlackFriendReq to JSON.
             * @function toJSON
             * @memberof hall.BlackFriendReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlackFriendReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlackFriendReq;
        })();
    
        hall.BlackFriendRsp = (function() {
    
            /**
             * Properties of a BlackFriendRsp.
             * @memberof hall
             * @interface IBlackFriendRsp
             * @property {common.IResult|null} [result] BlackFriendRsp result
             * @property {number|null} [friendId] BlackFriendRsp friendId
             */
    
            /**
             * Constructs a new BlackFriendRsp.
             * @memberof hall
             * @classdesc Represents a BlackFriendRsp.
             * @implements IBlackFriendRsp
             * @constructor
             * @param {hall.IBlackFriendRsp=} [properties] Properties to set
             */
            function BlackFriendRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BlackFriendRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.BlackFriendRsp
             * @instance
             */
            BlackFriendRsp.prototype.result = null;
    
            /**
             * BlackFriendRsp friendId.
             * @member {number} friendId
             * @memberof hall.BlackFriendRsp
             * @instance
             */
            BlackFriendRsp.prototype.friendId = 0;
    
            /**
             * Creates a new BlackFriendRsp instance using the specified properties.
             * @function create
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {hall.IBlackFriendRsp=} [properties] Properties to set
             * @returns {hall.BlackFriendRsp} BlackFriendRsp instance
             */
            BlackFriendRsp.create = function create(properties) {
                return new BlackFriendRsp(properties);
            };
    
            /**
             * Encodes the specified BlackFriendRsp message. Does not implicitly {@link hall.BlackFriendRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {hall.IBlackFriendRsp} message BlackFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlackFriendRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified BlackFriendRsp message, length delimited. Does not implicitly {@link hall.BlackFriendRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {hall.IBlackFriendRsp} message BlackFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlackFriendRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BlackFriendRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BlackFriendRsp} BlackFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlackFriendRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BlackFriendRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BlackFriendRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BlackFriendRsp} BlackFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlackFriendRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BlackFriendRsp message.
             * @function verify
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlackFriendRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a BlackFriendRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BlackFriendRsp} BlackFriendRsp
             */
            BlackFriendRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BlackFriendRsp)
                    return object;
                var message = new $root.hall.BlackFriendRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.BlackFriendRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BlackFriendRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BlackFriendRsp
             * @static
             * @param {hall.BlackFriendRsp} message BlackFriendRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlackFriendRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.friendId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this BlackFriendRsp to JSON.
             * @function toJSON
             * @memberof hall.BlackFriendRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlackFriendRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlackFriendRsp;
        })();
    
        hall.WhiteFriendReq = (function() {
    
            /**
             * Properties of a WhiteFriendReq.
             * @memberof hall
             * @interface IWhiteFriendReq
             * @property {common.IRequest} request WhiteFriendReq request
             * @property {number|null} [friendId] WhiteFriendReq friendId
             */
    
            /**
             * Constructs a new WhiteFriendReq.
             * @memberof hall
             * @classdesc Represents a WhiteFriendReq.
             * @implements IWhiteFriendReq
             * @constructor
             * @param {hall.IWhiteFriendReq=} [properties] Properties to set
             */
            function WhiteFriendReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WhiteFriendReq request.
             * @member {common.IRequest} request
             * @memberof hall.WhiteFriendReq
             * @instance
             */
            WhiteFriendReq.prototype.request = null;
    
            /**
             * WhiteFriendReq friendId.
             * @member {number} friendId
             * @memberof hall.WhiteFriendReq
             * @instance
             */
            WhiteFriendReq.prototype.friendId = 0;
    
            /**
             * Creates a new WhiteFriendReq instance using the specified properties.
             * @function create
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {hall.IWhiteFriendReq=} [properties] Properties to set
             * @returns {hall.WhiteFriendReq} WhiteFriendReq instance
             */
            WhiteFriendReq.create = function create(properties) {
                return new WhiteFriendReq(properties);
            };
    
            /**
             * Encodes the specified WhiteFriendReq message. Does not implicitly {@link hall.WhiteFriendReq.verify|verify} messages.
             * @function encode
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {hall.IWhiteFriendReq} message WhiteFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WhiteFriendReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified WhiteFriendReq message, length delimited. Does not implicitly {@link hall.WhiteFriendReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {hall.IWhiteFriendReq} message WhiteFriendReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WhiteFriendReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WhiteFriendReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WhiteFriendReq} WhiteFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WhiteFriendReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WhiteFriendReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a WhiteFriendReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WhiteFriendReq} WhiteFriendReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WhiteFriendReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WhiteFriendReq message.
             * @function verify
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WhiteFriendReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a WhiteFriendReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WhiteFriendReq} WhiteFriendReq
             */
            WhiteFriendReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WhiteFriendReq)
                    return object;
                var message = new $root.hall.WhiteFriendReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.WhiteFriendReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a WhiteFriendReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WhiteFriendReq
             * @static
             * @param {hall.WhiteFriendReq} message WhiteFriendReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WhiteFriendReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.friendId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this WhiteFriendReq to JSON.
             * @function toJSON
             * @memberof hall.WhiteFriendReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WhiteFriendReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WhiteFriendReq;
        })();
    
        hall.WhiteFriendRsp = (function() {
    
            /**
             * Properties of a WhiteFriendRsp.
             * @memberof hall
             * @interface IWhiteFriendRsp
             * @property {common.IResult|null} [result] WhiteFriendRsp result
             * @property {number|null} [friendId] WhiteFriendRsp friendId
             */
    
            /**
             * Constructs a new WhiteFriendRsp.
             * @memberof hall
             * @classdesc Represents a WhiteFriendRsp.
             * @implements IWhiteFriendRsp
             * @constructor
             * @param {hall.IWhiteFriendRsp=} [properties] Properties to set
             */
            function WhiteFriendRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WhiteFriendRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.WhiteFriendRsp
             * @instance
             */
            WhiteFriendRsp.prototype.result = null;
    
            /**
             * WhiteFriendRsp friendId.
             * @member {number} friendId
             * @memberof hall.WhiteFriendRsp
             * @instance
             */
            WhiteFriendRsp.prototype.friendId = 0;
    
            /**
             * Creates a new WhiteFriendRsp instance using the specified properties.
             * @function create
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {hall.IWhiteFriendRsp=} [properties] Properties to set
             * @returns {hall.WhiteFriendRsp} WhiteFriendRsp instance
             */
            WhiteFriendRsp.create = function create(properties) {
                return new WhiteFriendRsp(properties);
            };
    
            /**
             * Encodes the specified WhiteFriendRsp message. Does not implicitly {@link hall.WhiteFriendRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {hall.IWhiteFriendRsp} message WhiteFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WhiteFriendRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendId);
                return writer;
            };
    
            /**
             * Encodes the specified WhiteFriendRsp message, length delimited. Does not implicitly {@link hall.WhiteFriendRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {hall.IWhiteFriendRsp} message WhiteFriendRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WhiteFriendRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WhiteFriendRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WhiteFriendRsp} WhiteFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WhiteFriendRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WhiteFriendRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.friendId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WhiteFriendRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WhiteFriendRsp} WhiteFriendRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WhiteFriendRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WhiteFriendRsp message.
             * @function verify
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WhiteFriendRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    if (!$util.isInteger(message.friendId))
                        return "friendId: integer expected";
                return null;
            };
    
            /**
             * Creates a WhiteFriendRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WhiteFriendRsp} WhiteFriendRsp
             */
            WhiteFriendRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WhiteFriendRsp)
                    return object;
                var message = new $root.hall.WhiteFriendRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.WhiteFriendRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.friendId != null)
                    message.friendId = object.friendId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a WhiteFriendRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WhiteFriendRsp
             * @static
             * @param {hall.WhiteFriendRsp} message WhiteFriendRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WhiteFriendRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.friendId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.friendId != null && message.hasOwnProperty("friendId"))
                    object.friendId = message.friendId;
                return object;
            };
    
            /**
             * Converts this WhiteFriendRsp to JSON.
             * @function toJSON
             * @memberof hall.WhiteFriendRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WhiteFriendRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WhiteFriendRsp;
        })();
    
        hall.InviteReq = (function() {
    
            /**
             * Properties of an InviteReq.
             * @memberof hall
             * @interface IInviteReq
             * @property {common.IRequest} request InviteReq request
             * @property {number|null} [inviteeId] InviteReq inviteeId
             * @property {number|null} [gameId] InviteReq gameId
             * @property {number|null} [code] InviteReq code
             * @property {string|null} [inviterInfo] InviteReq inviterInfo
             */
    
            /**
             * Constructs a new InviteReq.
             * @memberof hall
             * @classdesc Represents an InviteReq.
             * @implements IInviteReq
             * @constructor
             * @param {hall.IInviteReq=} [properties] Properties to set
             */
            function InviteReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * InviteReq request.
             * @member {common.IRequest} request
             * @memberof hall.InviteReq
             * @instance
             */
            InviteReq.prototype.request = null;
    
            /**
             * InviteReq inviteeId.
             * @member {number} inviteeId
             * @memberof hall.InviteReq
             * @instance
             */
            InviteReq.prototype.inviteeId = 0;
    
            /**
             * InviteReq gameId.
             * @member {number} gameId
             * @memberof hall.InviteReq
             * @instance
             */
            InviteReq.prototype.gameId = 0;
    
            /**
             * InviteReq code.
             * @member {number} code
             * @memberof hall.InviteReq
             * @instance
             */
            InviteReq.prototype.code = 0;
    
            /**
             * InviteReq inviterInfo.
             * @member {string} inviterInfo
             * @memberof hall.InviteReq
             * @instance
             */
            InviteReq.prototype.inviterInfo = "";
    
            /**
             * Creates a new InviteReq instance using the specified properties.
             * @function create
             * @memberof hall.InviteReq
             * @static
             * @param {hall.IInviteReq=} [properties] Properties to set
             * @returns {hall.InviteReq} InviteReq instance
             */
            InviteReq.create = function create(properties) {
                return new InviteReq(properties);
            };
    
            /**
             * Encodes the specified InviteReq message. Does not implicitly {@link hall.InviteReq.verify|verify} messages.
             * @function encode
             * @memberof hall.InviteReq
             * @static
             * @param {hall.IInviteReq} message InviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.inviteeId);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameId);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.code);
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.inviterInfo);
                return writer;
            };
    
            /**
             * Encodes the specified InviteReq message, length delimited. Does not implicitly {@link hall.InviteReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.InviteReq
             * @static
             * @param {hall.IInviteReq} message InviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an InviteReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.InviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.InviteReq} InviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.InviteReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.inviteeId = reader.uint32();
                        break;
                    case 3:
                        message.gameId = reader.uint32();
                        break;
                    case 4:
                        message.code = reader.uint32();
                        break;
                    case 5:
                        message.inviterInfo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an InviteReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.InviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.InviteReq} InviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an InviteReq message.
             * @function verify
             * @memberof hall.InviteReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    if (!$util.isInteger(message.inviteeId))
                        return "inviteeId: integer expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    if (!$util.isString(message.inviterInfo))
                        return "inviterInfo: string expected";
                return null;
            };
    
            /**
             * Creates an InviteReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.InviteReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.InviteReq} InviteReq
             */
            InviteReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.InviteReq)
                    return object;
                var message = new $root.hall.InviteReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.InviteReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.inviteeId != null)
                    message.inviteeId = object.inviteeId >>> 0;
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.inviterInfo != null)
                    message.inviterInfo = String(object.inviterInfo);
                return message;
            };
    
            /**
             * Creates a plain object from an InviteReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.InviteReq
             * @static
             * @param {hall.InviteReq} message InviteReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.inviteeId = 0;
                    object.gameId = 0;
                    object.code = 0;
                    object.inviterInfo = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    object.inviteeId = message.inviteeId;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    object.inviterInfo = message.inviterInfo;
                return object;
            };
    
            /**
             * Converts this InviteReq to JSON.
             * @function toJSON
             * @memberof hall.InviteReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InviteReq;
        })();
    
        hall.InviteRsp = (function() {
    
            /**
             * Properties of an InviteRsp.
             * @memberof hall
             * @interface IInviteRsp
             * @property {common.IResult|null} [result] InviteRsp result
             * @property {number|null} [inviterId] InviteRsp inviterId
             * @property {number|null} [gameId] InviteRsp gameId
             * @property {number|null} [code] InviteRsp code
             * @property {string|null} [inviterInfo] InviteRsp inviterInfo
             */
    
            /**
             * Constructs a new InviteRsp.
             * @memberof hall
             * @classdesc Represents an InviteRsp.
             * @implements IInviteRsp
             * @constructor
             * @param {hall.IInviteRsp=} [properties] Properties to set
             */
            function InviteRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * InviteRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.InviteRsp
             * @instance
             */
            InviteRsp.prototype.result = null;
    
            /**
             * InviteRsp inviterId.
             * @member {number} inviterId
             * @memberof hall.InviteRsp
             * @instance
             */
            InviteRsp.prototype.inviterId = 0;
    
            /**
             * InviteRsp gameId.
             * @member {number} gameId
             * @memberof hall.InviteRsp
             * @instance
             */
            InviteRsp.prototype.gameId = 0;
    
            /**
             * InviteRsp code.
             * @member {number} code
             * @memberof hall.InviteRsp
             * @instance
             */
            InviteRsp.prototype.code = 0;
    
            /**
             * InviteRsp inviterInfo.
             * @member {string} inviterInfo
             * @memberof hall.InviteRsp
             * @instance
             */
            InviteRsp.prototype.inviterInfo = "";
    
            /**
             * Creates a new InviteRsp instance using the specified properties.
             * @function create
             * @memberof hall.InviteRsp
             * @static
             * @param {hall.IInviteRsp=} [properties] Properties to set
             * @returns {hall.InviteRsp} InviteRsp instance
             */
            InviteRsp.create = function create(properties) {
                return new InviteRsp(properties);
            };
    
            /**
             * Encodes the specified InviteRsp message. Does not implicitly {@link hall.InviteRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.InviteRsp
             * @static
             * @param {hall.IInviteRsp} message InviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.inviterId);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameId);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.code);
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.inviterInfo);
                return writer;
            };
    
            /**
             * Encodes the specified InviteRsp message, length delimited. Does not implicitly {@link hall.InviteRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.InviteRsp
             * @static
             * @param {hall.IInviteRsp} message InviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an InviteRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.InviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.InviteRsp} InviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.InviteRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.inviterId = reader.uint32();
                        break;
                    case 3:
                        message.gameId = reader.uint32();
                        break;
                    case 4:
                        message.code = reader.uint32();
                        break;
                    case 5:
                        message.inviterInfo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an InviteRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.InviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.InviteRsp} InviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an InviteRsp message.
             * @function verify
             * @memberof hall.InviteRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    if (!$util.isInteger(message.inviterId))
                        return "inviterId: integer expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    if (!$util.isString(message.inviterInfo))
                        return "inviterInfo: string expected";
                return null;
            };
    
            /**
             * Creates an InviteRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.InviteRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.InviteRsp} InviteRsp
             */
            InviteRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.InviteRsp)
                    return object;
                var message = new $root.hall.InviteRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.InviteRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.inviterId != null)
                    message.inviterId = object.inviterId >>> 0;
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.inviterInfo != null)
                    message.inviterInfo = String(object.inviterInfo);
                return message;
            };
    
            /**
             * Creates a plain object from an InviteRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.InviteRsp
             * @static
             * @param {hall.InviteRsp} message InviteRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.inviterId = 0;
                    object.gameId = 0;
                    object.code = 0;
                    object.inviterInfo = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    object.inviterId = message.inviterId;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.inviterInfo != null && message.hasOwnProperty("inviterInfo"))
                    object.inviterInfo = message.inviterInfo;
                return object;
            };
    
            /**
             * Converts this InviteRsp to JSON.
             * @function toJSON
             * @memberof hall.InviteRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InviteRsp;
        })();
    
        hall.InviteConfirmReq = (function() {
    
            /**
             * Properties of an InviteConfirmReq.
             * @memberof hall
             * @interface IInviteConfirmReq
             * @property {common.IRequest} request InviteConfirmReq request
             * @property {number|null} [inviterId] InviteConfirmReq inviterId
             * @property {boolean|null} [accept] InviteConfirmReq accept
             * @property {string|null} [inviteeInfo] InviteConfirmReq inviteeInfo
             */
    
            /**
             * Constructs a new InviteConfirmReq.
             * @memberof hall
             * @classdesc Represents an InviteConfirmReq.
             * @implements IInviteConfirmReq
             * @constructor
             * @param {hall.IInviteConfirmReq=} [properties] Properties to set
             */
            function InviteConfirmReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * InviteConfirmReq request.
             * @member {common.IRequest} request
             * @memberof hall.InviteConfirmReq
             * @instance
             */
            InviteConfirmReq.prototype.request = null;
    
            /**
             * InviteConfirmReq inviterId.
             * @member {number} inviterId
             * @memberof hall.InviteConfirmReq
             * @instance
             */
            InviteConfirmReq.prototype.inviterId = 0;
    
            /**
             * InviteConfirmReq accept.
             * @member {boolean} accept
             * @memberof hall.InviteConfirmReq
             * @instance
             */
            InviteConfirmReq.prototype.accept = false;
    
            /**
             * InviteConfirmReq inviteeInfo.
             * @member {string} inviteeInfo
             * @memberof hall.InviteConfirmReq
             * @instance
             */
            InviteConfirmReq.prototype.inviteeInfo = "";
    
            /**
             * Creates a new InviteConfirmReq instance using the specified properties.
             * @function create
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {hall.IInviteConfirmReq=} [properties] Properties to set
             * @returns {hall.InviteConfirmReq} InviteConfirmReq instance
             */
            InviteConfirmReq.create = function create(properties) {
                return new InviteConfirmReq(properties);
            };
    
            /**
             * Encodes the specified InviteConfirmReq message. Does not implicitly {@link hall.InviteConfirmReq.verify|verify} messages.
             * @function encode
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {hall.IInviteConfirmReq} message InviteConfirmReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteConfirmReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.inviterId);
                if (message.accept != null && message.hasOwnProperty("accept"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.accept);
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.inviteeInfo);
                return writer;
            };
    
            /**
             * Encodes the specified InviteConfirmReq message, length delimited. Does not implicitly {@link hall.InviteConfirmReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {hall.IInviteConfirmReq} message InviteConfirmReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteConfirmReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an InviteConfirmReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.InviteConfirmReq} InviteConfirmReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteConfirmReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.InviteConfirmReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.inviterId = reader.uint32();
                        break;
                    case 3:
                        message.accept = reader.bool();
                        break;
                    case 4:
                        message.inviteeInfo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an InviteConfirmReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.InviteConfirmReq} InviteConfirmReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteConfirmReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an InviteConfirmReq message.
             * @function verify
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteConfirmReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    if (!$util.isInteger(message.inviterId))
                        return "inviterId: integer expected";
                if (message.accept != null && message.hasOwnProperty("accept"))
                    if (typeof message.accept !== "boolean")
                        return "accept: boolean expected";
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    if (!$util.isString(message.inviteeInfo))
                        return "inviteeInfo: string expected";
                return null;
            };
    
            /**
             * Creates an InviteConfirmReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.InviteConfirmReq} InviteConfirmReq
             */
            InviteConfirmReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.InviteConfirmReq)
                    return object;
                var message = new $root.hall.InviteConfirmReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.InviteConfirmReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.inviterId != null)
                    message.inviterId = object.inviterId >>> 0;
                if (object.accept != null)
                    message.accept = Boolean(object.accept);
                if (object.inviteeInfo != null)
                    message.inviteeInfo = String(object.inviteeInfo);
                return message;
            };
    
            /**
             * Creates a plain object from an InviteConfirmReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.InviteConfirmReq
             * @static
             * @param {hall.InviteConfirmReq} message InviteConfirmReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteConfirmReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.inviterId = 0;
                    object.accept = false;
                    object.inviteeInfo = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.inviterId != null && message.hasOwnProperty("inviterId"))
                    object.inviterId = message.inviterId;
                if (message.accept != null && message.hasOwnProperty("accept"))
                    object.accept = message.accept;
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    object.inviteeInfo = message.inviteeInfo;
                return object;
            };
    
            /**
             * Converts this InviteConfirmReq to JSON.
             * @function toJSON
             * @memberof hall.InviteConfirmReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteConfirmReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InviteConfirmReq;
        })();
    
        hall.InviteConfirmRsp = (function() {
    
            /**
             * Properties of an InviteConfirmRsp.
             * @memberof hall
             * @interface IInviteConfirmRsp
             * @property {common.IResult|null} [result] InviteConfirmRsp result
             * @property {number|null} [inviteeId] InviteConfirmRsp inviteeId
             * @property {boolean|null} [accept] InviteConfirmRsp accept
             * @property {string|null} [inviteeInfo] InviteConfirmRsp inviteeInfo
             */
    
            /**
             * Constructs a new InviteConfirmRsp.
             * @memberof hall
             * @classdesc Represents an InviteConfirmRsp.
             * @implements IInviteConfirmRsp
             * @constructor
             * @param {hall.IInviteConfirmRsp=} [properties] Properties to set
             */
            function InviteConfirmRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * InviteConfirmRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.InviteConfirmRsp
             * @instance
             */
            InviteConfirmRsp.prototype.result = null;
    
            /**
             * InviteConfirmRsp inviteeId.
             * @member {number} inviteeId
             * @memberof hall.InviteConfirmRsp
             * @instance
             */
            InviteConfirmRsp.prototype.inviteeId = 0;
    
            /**
             * InviteConfirmRsp accept.
             * @member {boolean} accept
             * @memberof hall.InviteConfirmRsp
             * @instance
             */
            InviteConfirmRsp.prototype.accept = false;
    
            /**
             * InviteConfirmRsp inviteeInfo.
             * @member {string} inviteeInfo
             * @memberof hall.InviteConfirmRsp
             * @instance
             */
            InviteConfirmRsp.prototype.inviteeInfo = "";
    
            /**
             * Creates a new InviteConfirmRsp instance using the specified properties.
             * @function create
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {hall.IInviteConfirmRsp=} [properties] Properties to set
             * @returns {hall.InviteConfirmRsp} InviteConfirmRsp instance
             */
            InviteConfirmRsp.create = function create(properties) {
                return new InviteConfirmRsp(properties);
            };
    
            /**
             * Encodes the specified InviteConfirmRsp message. Does not implicitly {@link hall.InviteConfirmRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {hall.IInviteConfirmRsp} message InviteConfirmRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteConfirmRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.inviteeId);
                if (message.accept != null && message.hasOwnProperty("accept"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.accept);
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.inviteeInfo);
                return writer;
            };
    
            /**
             * Encodes the specified InviteConfirmRsp message, length delimited. Does not implicitly {@link hall.InviteConfirmRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {hall.IInviteConfirmRsp} message InviteConfirmRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteConfirmRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an InviteConfirmRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.InviteConfirmRsp} InviteConfirmRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteConfirmRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.InviteConfirmRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.inviteeId = reader.uint32();
                        break;
                    case 3:
                        message.accept = reader.bool();
                        break;
                    case 4:
                        message.inviteeInfo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an InviteConfirmRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.InviteConfirmRsp} InviteConfirmRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteConfirmRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an InviteConfirmRsp message.
             * @function verify
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteConfirmRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    if (!$util.isInteger(message.inviteeId))
                        return "inviteeId: integer expected";
                if (message.accept != null && message.hasOwnProperty("accept"))
                    if (typeof message.accept !== "boolean")
                        return "accept: boolean expected";
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    if (!$util.isString(message.inviteeInfo))
                        return "inviteeInfo: string expected";
                return null;
            };
    
            /**
             * Creates an InviteConfirmRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.InviteConfirmRsp} InviteConfirmRsp
             */
            InviteConfirmRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.InviteConfirmRsp)
                    return object;
                var message = new $root.hall.InviteConfirmRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.InviteConfirmRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.inviteeId != null)
                    message.inviteeId = object.inviteeId >>> 0;
                if (object.accept != null)
                    message.accept = Boolean(object.accept);
                if (object.inviteeInfo != null)
                    message.inviteeInfo = String(object.inviteeInfo);
                return message;
            };
    
            /**
             * Creates a plain object from an InviteConfirmRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.InviteConfirmRsp
             * @static
             * @param {hall.InviteConfirmRsp} message InviteConfirmRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteConfirmRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.inviteeId = 0;
                    object.accept = false;
                    object.inviteeInfo = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    object.inviteeId = message.inviteeId;
                if (message.accept != null && message.hasOwnProperty("accept"))
                    object.accept = message.accept;
                if (message.inviteeInfo != null && message.hasOwnProperty("inviteeInfo"))
                    object.inviteeInfo = message.inviteeInfo;
                return object;
            };
    
            /**
             * Converts this InviteConfirmRsp to JSON.
             * @function toJSON
             * @memberof hall.InviteConfirmRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteConfirmRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InviteConfirmRsp;
        })();
    
        hall.BindProxyReq = (function() {
    
            /**
             * Properties of a BindProxyReq.
             * @memberof hall
             * @interface IBindProxyReq
             * @property {common.IRequest} request BindProxyReq request
             * @property {number|null} [proxyAccount] BindProxyReq proxyAccount
             */
    
            /**
             * Constructs a new BindProxyReq.
             * @memberof hall
             * @classdesc Represents a BindProxyReq.
             * @implements IBindProxyReq
             * @constructor
             * @param {hall.IBindProxyReq=} [properties] Properties to set
             */
            function BindProxyReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BindProxyReq request.
             * @member {common.IRequest} request
             * @memberof hall.BindProxyReq
             * @instance
             */
            BindProxyReq.prototype.request = null;
    
            /**
             * BindProxyReq proxyAccount.
             * @member {number} proxyAccount
             * @memberof hall.BindProxyReq
             * @instance
             */
            BindProxyReq.prototype.proxyAccount = 0;
    
            /**
             * Creates a new BindProxyReq instance using the specified properties.
             * @function create
             * @memberof hall.BindProxyReq
             * @static
             * @param {hall.IBindProxyReq=} [properties] Properties to set
             * @returns {hall.BindProxyReq} BindProxyReq instance
             */
            BindProxyReq.create = function create(properties) {
                return new BindProxyReq(properties);
            };
    
            /**
             * Encodes the specified BindProxyReq message. Does not implicitly {@link hall.BindProxyReq.verify|verify} messages.
             * @function encode
             * @memberof hall.BindProxyReq
             * @static
             * @param {hall.IBindProxyReq} message BindProxyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BindProxyReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.proxyAccount);
                return writer;
            };
    
            /**
             * Encodes the specified BindProxyReq message, length delimited. Does not implicitly {@link hall.BindProxyReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BindProxyReq
             * @static
             * @param {hall.IBindProxyReq} message BindProxyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BindProxyReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BindProxyReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BindProxyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BindProxyReq} BindProxyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BindProxyReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BindProxyReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.proxyAccount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a BindProxyReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BindProxyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BindProxyReq} BindProxyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BindProxyReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BindProxyReq message.
             * @function verify
             * @memberof hall.BindProxyReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BindProxyReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    if (!$util.isInteger(message.proxyAccount))
                        return "proxyAccount: integer expected";
                return null;
            };
    
            /**
             * Creates a BindProxyReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BindProxyReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BindProxyReq} BindProxyReq
             */
            BindProxyReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BindProxyReq)
                    return object;
                var message = new $root.hall.BindProxyReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.BindProxyReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.proxyAccount != null)
                    message.proxyAccount = object.proxyAccount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BindProxyReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BindProxyReq
             * @static
             * @param {hall.BindProxyReq} message BindProxyReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BindProxyReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.proxyAccount = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    object.proxyAccount = message.proxyAccount;
                return object;
            };
    
            /**
             * Converts this BindProxyReq to JSON.
             * @function toJSON
             * @memberof hall.BindProxyReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BindProxyReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BindProxyReq;
        })();
    
        hall.BindProxyRsp = (function() {
    
            /**
             * Properties of a BindProxyRsp.
             * @memberof hall
             * @interface IBindProxyRsp
             * @property {common.IResult|null} [result] BindProxyRsp result
             * @property {number|null} [proxyAccount] BindProxyRsp proxyAccount
             */
    
            /**
             * Constructs a new BindProxyRsp.
             * @memberof hall
             * @classdesc Represents a BindProxyRsp.
             * @implements IBindProxyRsp
             * @constructor
             * @param {hall.IBindProxyRsp=} [properties] Properties to set
             */
            function BindProxyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BindProxyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.BindProxyRsp
             * @instance
             */
            BindProxyRsp.prototype.result = null;
    
            /**
             * BindProxyRsp proxyAccount.
             * @member {number} proxyAccount
             * @memberof hall.BindProxyRsp
             * @instance
             */
            BindProxyRsp.prototype.proxyAccount = 0;
    
            /**
             * Creates a new BindProxyRsp instance using the specified properties.
             * @function create
             * @memberof hall.BindProxyRsp
             * @static
             * @param {hall.IBindProxyRsp=} [properties] Properties to set
             * @returns {hall.BindProxyRsp} BindProxyRsp instance
             */
            BindProxyRsp.create = function create(properties) {
                return new BindProxyRsp(properties);
            };
    
            /**
             * Encodes the specified BindProxyRsp message. Does not implicitly {@link hall.BindProxyRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.BindProxyRsp
             * @static
             * @param {hall.IBindProxyRsp} message BindProxyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BindProxyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.proxyAccount);
                return writer;
            };
    
            /**
             * Encodes the specified BindProxyRsp message, length delimited. Does not implicitly {@link hall.BindProxyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BindProxyRsp
             * @static
             * @param {hall.IBindProxyRsp} message BindProxyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BindProxyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BindProxyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BindProxyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BindProxyRsp} BindProxyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BindProxyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BindProxyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.proxyAccount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BindProxyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BindProxyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BindProxyRsp} BindProxyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BindProxyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BindProxyRsp message.
             * @function verify
             * @memberof hall.BindProxyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BindProxyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    if (!$util.isInteger(message.proxyAccount))
                        return "proxyAccount: integer expected";
                return null;
            };
    
            /**
             * Creates a BindProxyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BindProxyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BindProxyRsp} BindProxyRsp
             */
            BindProxyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BindProxyRsp)
                    return object;
                var message = new $root.hall.BindProxyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.BindProxyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.proxyAccount != null)
                    message.proxyAccount = object.proxyAccount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BindProxyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BindProxyRsp
             * @static
             * @param {hall.BindProxyRsp} message BindProxyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BindProxyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.proxyAccount = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.proxyAccount != null && message.hasOwnProperty("proxyAccount"))
                    object.proxyAccount = message.proxyAccount;
                return object;
            };
    
            /**
             * Converts this BindProxyRsp to JSON.
             * @function toJSON
             * @memberof hall.BindProxyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BindProxyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BindProxyRsp;
        })();
    
        hall.ProxyInfoReq = (function() {
    
            /**
             * Properties of a ProxyInfoReq.
             * @memberof hall
             * @interface IProxyInfoReq
             * @property {common.IRequest} request ProxyInfoReq request
             */
    
            /**
             * Constructs a new ProxyInfoReq.
             * @memberof hall
             * @classdesc Represents a ProxyInfoReq.
             * @implements IProxyInfoReq
             * @constructor
             * @param {hall.IProxyInfoReq=} [properties] Properties to set
             */
            function ProxyInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ProxyInfoReq request.
             * @member {common.IRequest} request
             * @memberof hall.ProxyInfoReq
             * @instance
             */
            ProxyInfoReq.prototype.request = null;
    
            /**
             * Creates a new ProxyInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {hall.IProxyInfoReq=} [properties] Properties to set
             * @returns {hall.ProxyInfoReq} ProxyInfoReq instance
             */
            ProxyInfoReq.create = function create(properties) {
                return new ProxyInfoReq(properties);
            };
    
            /**
             * Encodes the specified ProxyInfoReq message. Does not implicitly {@link hall.ProxyInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {hall.IProxyInfoReq} message ProxyInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ProxyInfoReq message, length delimited. Does not implicitly {@link hall.ProxyInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {hall.IProxyInfoReq} message ProxyInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ProxyInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ProxyInfoReq} ProxyInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ProxyInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a ProxyInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ProxyInfoReq} ProxyInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ProxyInfoReq message.
             * @function verify
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProxyInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ProxyInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ProxyInfoReq} ProxyInfoReq
             */
            ProxyInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ProxyInfoReq)
                    return object;
                var message = new $root.hall.ProxyInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ProxyInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ProxyInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ProxyInfoReq
             * @static
             * @param {hall.ProxyInfoReq} message ProxyInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProxyInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ProxyInfoReq to JSON.
             * @function toJSON
             * @memberof hall.ProxyInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProxyInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ProxyInfoReq;
        })();
    
        hall.ProxyInfoRsp = (function() {
    
            /**
             * Properties of a ProxyInfoRsp.
             * @memberof hall
             * @interface IProxyInfoRsp
             * @property {common.IResult|null} [result] ProxyInfoRsp result
             * @property {string|null} [proxyUrl] ProxyInfoRsp proxyUrl
             * @property {number|null} [bindCode] ProxyInfoRsp bindCode
             */
    
            /**
             * Constructs a new ProxyInfoRsp.
             * @memberof hall
             * @classdesc Represents a ProxyInfoRsp.
             * @implements IProxyInfoRsp
             * @constructor
             * @param {hall.IProxyInfoRsp=} [properties] Properties to set
             */
            function ProxyInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ProxyInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ProxyInfoRsp
             * @instance
             */
            ProxyInfoRsp.prototype.result = null;
    
            /**
             * ProxyInfoRsp proxyUrl.
             * @member {string} proxyUrl
             * @memberof hall.ProxyInfoRsp
             * @instance
             */
            ProxyInfoRsp.prototype.proxyUrl = "";
    
            /**
             * ProxyInfoRsp bindCode.
             * @member {number} bindCode
             * @memberof hall.ProxyInfoRsp
             * @instance
             */
            ProxyInfoRsp.prototype.bindCode = 0;
    
            /**
             * Creates a new ProxyInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {hall.IProxyInfoRsp=} [properties] Properties to set
             * @returns {hall.ProxyInfoRsp} ProxyInfoRsp instance
             */
            ProxyInfoRsp.create = function create(properties) {
                return new ProxyInfoRsp(properties);
            };
    
            /**
             * Encodes the specified ProxyInfoRsp message. Does not implicitly {@link hall.ProxyInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {hall.IProxyInfoRsp} message ProxyInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.proxyUrl);
                if (message.bindCode != null && message.hasOwnProperty("bindCode"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bindCode);
                return writer;
            };
    
            /**
             * Encodes the specified ProxyInfoRsp message, length delimited. Does not implicitly {@link hall.ProxyInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {hall.IProxyInfoRsp} message ProxyInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ProxyInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ProxyInfoRsp} ProxyInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ProxyInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.proxyUrl = reader.string();
                        break;
                    case 3:
                        message.bindCode = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ProxyInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ProxyInfoRsp} ProxyInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ProxyInfoRsp message.
             * @function verify
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProxyInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    if (!$util.isString(message.proxyUrl))
                        return "proxyUrl: string expected";
                if (message.bindCode != null && message.hasOwnProperty("bindCode"))
                    if (!$util.isInteger(message.bindCode))
                        return "bindCode: integer expected";
                return null;
            };
    
            /**
             * Creates a ProxyInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ProxyInfoRsp} ProxyInfoRsp
             */
            ProxyInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ProxyInfoRsp)
                    return object;
                var message = new $root.hall.ProxyInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ProxyInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.proxyUrl != null)
                    message.proxyUrl = String(object.proxyUrl);
                if (object.bindCode != null)
                    message.bindCode = object.bindCode >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ProxyInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ProxyInfoRsp
             * @static
             * @param {hall.ProxyInfoRsp} message ProxyInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProxyInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.proxyUrl = "";
                    object.bindCode = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.proxyUrl != null && message.hasOwnProperty("proxyUrl"))
                    object.proxyUrl = message.proxyUrl;
                if (message.bindCode != null && message.hasOwnProperty("bindCode"))
                    object.bindCode = message.bindCode;
                return object;
            };
    
            /**
             * Converts this ProxyInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.ProxyInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProxyInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ProxyInfoRsp;
        })();
    
        hall.FollowReq = (function() {
    
            /**
             * Properties of a FollowReq.
             * @memberof hall
             * @interface IFollowReq
             * @property {common.IRequest|null} [request] FollowReq request
             * @property {number|null} [uid] FollowReq uid
             */
    
            /**
             * Constructs a new FollowReq.
             * @memberof hall
             * @classdesc Represents a FollowReq.
             * @implements IFollowReq
             * @constructor
             * @param {hall.IFollowReq=} [properties] Properties to set
             */
            function FollowReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FollowReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.FollowReq
             * @instance
             */
            FollowReq.prototype.request = null;
    
            /**
             * FollowReq uid.
             * @member {number} uid
             * @memberof hall.FollowReq
             * @instance
             */
            FollowReq.prototype.uid = 0;
    
            /**
             * Creates a new FollowReq instance using the specified properties.
             * @function create
             * @memberof hall.FollowReq
             * @static
             * @param {hall.IFollowReq=} [properties] Properties to set
             * @returns {hall.FollowReq} FollowReq instance
             */
            FollowReq.create = function create(properties) {
                return new FollowReq(properties);
            };
    
            /**
             * Encodes the specified FollowReq message. Does not implicitly {@link hall.FollowReq.verify|verify} messages.
             * @function encode
             * @memberof hall.FollowReq
             * @static
             * @param {hall.IFollowReq} message FollowReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FollowReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified FollowReq message, length delimited. Does not implicitly {@link hall.FollowReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FollowReq
             * @static
             * @param {hall.IFollowReq} message FollowReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FollowReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FollowReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FollowReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FollowReq} FollowReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FollowReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FollowReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FollowReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FollowReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FollowReq} FollowReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FollowReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FollowReq message.
             * @function verify
             * @memberof hall.FollowReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FollowReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a FollowReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FollowReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FollowReq} FollowReq
             */
            FollowReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FollowReq)
                    return object;
                var message = new $root.hall.FollowReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.FollowReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FollowReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FollowReq
             * @static
             * @param {hall.FollowReq} message FollowReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FollowReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.uid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this FollowReq to JSON.
             * @function toJSON
             * @memberof hall.FollowReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FollowReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FollowReq;
        })();
    
        hall.FollowRsp = (function() {
    
            /**
             * Properties of a FollowRsp.
             * @memberof hall
             * @interface IFollowRsp
             * @property {common.IResult|null} [result] FollowRsp result
             * @property {number|null} [uid] FollowRsp uid
             * @property {number|null} [gameId] FollowRsp gameId
             * @property {number|null} [roomId] FollowRsp roomId
             * @property {number|null} [tableId] FollowRsp tableId
             */
    
            /**
             * Constructs a new FollowRsp.
             * @memberof hall
             * @classdesc Represents a FollowRsp.
             * @implements IFollowRsp
             * @constructor
             * @param {hall.IFollowRsp=} [properties] Properties to set
             */
            function FollowRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FollowRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.FollowRsp
             * @instance
             */
            FollowRsp.prototype.result = null;
    
            /**
             * FollowRsp uid.
             * @member {number} uid
             * @memberof hall.FollowRsp
             * @instance
             */
            FollowRsp.prototype.uid = 0;
    
            /**
             * FollowRsp gameId.
             * @member {number} gameId
             * @memberof hall.FollowRsp
             * @instance
             */
            FollowRsp.prototype.gameId = 0;
    
            /**
             * FollowRsp roomId.
             * @member {number} roomId
             * @memberof hall.FollowRsp
             * @instance
             */
            FollowRsp.prototype.roomId = 0;
    
            /**
             * FollowRsp tableId.
             * @member {number} tableId
             * @memberof hall.FollowRsp
             * @instance
             */
            FollowRsp.prototype.tableId = 0;
    
            /**
             * Creates a new FollowRsp instance using the specified properties.
             * @function create
             * @memberof hall.FollowRsp
             * @static
             * @param {hall.IFollowRsp=} [properties] Properties to set
             * @returns {hall.FollowRsp} FollowRsp instance
             */
            FollowRsp.create = function create(properties) {
                return new FollowRsp(properties);
            };
    
            /**
             * Encodes the specified FollowRsp message. Does not implicitly {@link hall.FollowRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.FollowRsp
             * @static
             * @param {hall.IFollowRsp} message FollowRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FollowRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tableId);
                return writer;
            };
    
            /**
             * Encodes the specified FollowRsp message, length delimited. Does not implicitly {@link hall.FollowRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.FollowRsp
             * @static
             * @param {hall.IFollowRsp} message FollowRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FollowRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FollowRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.FollowRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.FollowRsp} FollowRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FollowRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.FollowRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.gameId = reader.uint32();
                        break;
                    case 4:
                        message.roomId = reader.uint32();
                        break;
                    case 5:
                        message.tableId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FollowRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.FollowRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.FollowRsp} FollowRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FollowRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FollowRsp message.
             * @function verify
             * @memberof hall.FollowRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FollowRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                return null;
            };
    
            /**
             * Creates a FollowRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.FollowRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.FollowRsp} FollowRsp
             */
            FollowRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.FollowRsp)
                    return object;
                var message = new $root.hall.FollowRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.FollowRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FollowRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.FollowRsp
             * @static
             * @param {hall.FollowRsp} message FollowRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FollowRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                return object;
            };
    
            /**
             * Converts this FollowRsp to JSON.
             * @function toJSON
             * @memberof hall.FollowRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FollowRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FollowRsp;
        })();
    
        hall.PdkLogReq = (function() {
    
            /**
             * Properties of a PdkLogReq.
             * @memberof hall
             * @interface IPdkLogReq
             * @property {common.IRequest|null} [request] PdkLogReq request
             * @property {number|null} [start] PdkLogReq start
             * @property {number|null} [max] PdkLogReq max
             */
    
            /**
             * Constructs a new PdkLogReq.
             * @memberof hall
             * @classdesc Represents a PdkLogReq.
             * @implements IPdkLogReq
             * @constructor
             * @param {hall.IPdkLogReq=} [properties] Properties to set
             */
            function PdkLogReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkLogReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.PdkLogReq
             * @instance
             */
            PdkLogReq.prototype.request = null;
    
            /**
             * PdkLogReq start.
             * @member {number} start
             * @memberof hall.PdkLogReq
             * @instance
             */
            PdkLogReq.prototype.start = 0;
    
            /**
             * PdkLogReq max.
             * @member {number} max
             * @memberof hall.PdkLogReq
             * @instance
             */
            PdkLogReq.prototype.max = 0;
    
            /**
             * Creates a new PdkLogReq instance using the specified properties.
             * @function create
             * @memberof hall.PdkLogReq
             * @static
             * @param {hall.IPdkLogReq=} [properties] Properties to set
             * @returns {hall.PdkLogReq} PdkLogReq instance
             */
            PdkLogReq.create = function create(properties) {
                return new PdkLogReq(properties);
            };
    
            /**
             * Encodes the specified PdkLogReq message. Does not implicitly {@link hall.PdkLogReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkLogReq
             * @static
             * @param {hall.IPdkLogReq} message PdkLogReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.start != null && message.hasOwnProperty("start"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.start);
                if (message.max != null && message.hasOwnProperty("max"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max);
                return writer;
            };
    
            /**
             * Encodes the specified PdkLogReq message, length delimited. Does not implicitly {@link hall.PdkLogReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkLogReq
             * @static
             * @param {hall.IPdkLogReq} message PdkLogReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkLogReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkLogReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkLogReq} PdkLogReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkLogReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.start = reader.uint32();
                        break;
                    case 3:
                        message.max = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkLogReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkLogReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkLogReq} PdkLogReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkLogReq message.
             * @function verify
             * @memberof hall.PdkLogReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkLogReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                    if (!$util.isInteger(message.start))
                        return "start: integer expected";
                if (message.max != null && message.hasOwnProperty("max"))
                    if (!$util.isInteger(message.max))
                        return "max: integer expected";
                return null;
            };
    
            /**
             * Creates a PdkLogReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkLogReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkLogReq} PdkLogReq
             */
            PdkLogReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkLogReq)
                    return object;
                var message = new $root.hall.PdkLogReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PdkLogReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.start != null)
                    message.start = object.start >>> 0;
                if (object.max != null)
                    message.max = object.max >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PdkLogReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkLogReq
             * @static
             * @param {hall.PdkLogReq} message PdkLogReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkLogReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.start = 0;
                    object.max = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.start != null && message.hasOwnProperty("start"))
                    object.start = message.start;
                if (message.max != null && message.hasOwnProperty("max"))
                    object.max = message.max;
                return object;
            };
    
            /**
             * Converts this PdkLogReq to JSON.
             * @function toJSON
             * @memberof hall.PdkLogReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkLogReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkLogReq;
        })();
    
        hall.PdkLogInfo = (function() {
    
            /**
             * Properties of a PdkLogInfo.
             * @memberof hall
             * @interface IPdkLogInfo
             * @property {number|null} [code] PdkLogInfo code
             * @property {number|null} [masterId] PdkLogInfo masterId
             * @property {number|null} [time] PdkLogInfo time
             * @property {number|null} [round] PdkLogInfo round
             * @property {number|null} [points] PdkLogInfo points
             */
    
            /**
             * Constructs a new PdkLogInfo.
             * @memberof hall
             * @classdesc Represents a PdkLogInfo.
             * @implements IPdkLogInfo
             * @constructor
             * @param {hall.IPdkLogInfo=} [properties] Properties to set
             */
            function PdkLogInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkLogInfo code.
             * @member {number} code
             * @memberof hall.PdkLogInfo
             * @instance
             */
            PdkLogInfo.prototype.code = 0;
    
            /**
             * PdkLogInfo masterId.
             * @member {number} masterId
             * @memberof hall.PdkLogInfo
             * @instance
             */
            PdkLogInfo.prototype.masterId = 0;
    
            /**
             * PdkLogInfo time.
             * @member {number} time
             * @memberof hall.PdkLogInfo
             * @instance
             */
            PdkLogInfo.prototype.time = 0;
    
            /**
             * PdkLogInfo round.
             * @member {number} round
             * @memberof hall.PdkLogInfo
             * @instance
             */
            PdkLogInfo.prototype.round = 0;
    
            /**
             * PdkLogInfo points.
             * @member {number} points
             * @memberof hall.PdkLogInfo
             * @instance
             */
            PdkLogInfo.prototype.points = 0;
    
            /**
             * Creates a new PdkLogInfo instance using the specified properties.
             * @function create
             * @memberof hall.PdkLogInfo
             * @static
             * @param {hall.IPdkLogInfo=} [properties] Properties to set
             * @returns {hall.PdkLogInfo} PdkLogInfo instance
             */
            PdkLogInfo.create = function create(properties) {
                return new PdkLogInfo(properties);
            };
    
            /**
             * Encodes the specified PdkLogInfo message. Does not implicitly {@link hall.PdkLogInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkLogInfo
             * @static
             * @param {hall.IPdkLogInfo} message PdkLogInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.masterId);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.round);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.points);
                return writer;
            };
    
            /**
             * Encodes the specified PdkLogInfo message, length delimited. Does not implicitly {@link hall.PdkLogInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkLogInfo
             * @static
             * @param {hall.IPdkLogInfo} message PdkLogInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkLogInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkLogInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkLogInfo} PdkLogInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkLogInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.masterId = reader.uint32();
                        break;
                    case 3:
                        message.time = reader.uint32();
                        break;
                    case 4:
                        message.round = reader.uint32();
                        break;
                    case 5:
                        message.points = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkLogInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkLogInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkLogInfo} PdkLogInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkLogInfo message.
             * @function verify
             * @memberof hall.PdkLogInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkLogInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    if (!$util.isInteger(message.masterId))
                        return "masterId: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                return null;
            };
    
            /**
             * Creates a PdkLogInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkLogInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkLogInfo} PdkLogInfo
             */
            PdkLogInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkLogInfo)
                    return object;
                var message = new $root.hall.PdkLogInfo();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.masterId != null)
                    message.masterId = object.masterId >>> 0;
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.points != null)
                    message.points = object.points | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PdkLogInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkLogInfo
             * @static
             * @param {hall.PdkLogInfo} message PdkLogInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkLogInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.masterId = 0;
                    object.time = 0;
                    object.round = 0;
                    object.points = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    object.masterId = message.masterId;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                return object;
            };
    
            /**
             * Converts this PdkLogInfo to JSON.
             * @function toJSON
             * @memberof hall.PdkLogInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkLogInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkLogInfo;
        })();
    
        hall.PdkLogRsp = (function() {
    
            /**
             * Properties of a PdkLogRsp.
             * @memberof hall
             * @interface IPdkLogRsp
             * @property {common.IResult|null} [result] PdkLogRsp result
             * @property {Array.<hall.IPdkLogInfo>|null} [pdkLogInfos] PdkLogRsp pdkLogInfos
             * @property {number|null} [todayPoints] PdkLogRsp todayPoints
             */
    
            /**
             * Constructs a new PdkLogRsp.
             * @memberof hall
             * @classdesc Represents a PdkLogRsp.
             * @implements IPdkLogRsp
             * @constructor
             * @param {hall.IPdkLogRsp=} [properties] Properties to set
             */
            function PdkLogRsp(properties) {
                this.pdkLogInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkLogRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PdkLogRsp
             * @instance
             */
            PdkLogRsp.prototype.result = null;
    
            /**
             * PdkLogRsp pdkLogInfos.
             * @member {Array.<hall.IPdkLogInfo>} pdkLogInfos
             * @memberof hall.PdkLogRsp
             * @instance
             */
            PdkLogRsp.prototype.pdkLogInfos = $util.emptyArray;
    
            /**
             * PdkLogRsp todayPoints.
             * @member {number} todayPoints
             * @memberof hall.PdkLogRsp
             * @instance
             */
            PdkLogRsp.prototype.todayPoints = 0;
    
            /**
             * Creates a new PdkLogRsp instance using the specified properties.
             * @function create
             * @memberof hall.PdkLogRsp
             * @static
             * @param {hall.IPdkLogRsp=} [properties] Properties to set
             * @returns {hall.PdkLogRsp} PdkLogRsp instance
             */
            PdkLogRsp.create = function create(properties) {
                return new PdkLogRsp(properties);
            };
    
            /**
             * Encodes the specified PdkLogRsp message. Does not implicitly {@link hall.PdkLogRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkLogRsp
             * @static
             * @param {hall.IPdkLogRsp} message PdkLogRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pdkLogInfos != null && message.pdkLogInfos.length)
                    for (var i = 0; i < message.pdkLogInfos.length; ++i)
                        $root.hall.PdkLogInfo.encode(message.pdkLogInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.todayPoints);
                return writer;
            };
    
            /**
             * Encodes the specified PdkLogRsp message, length delimited. Does not implicitly {@link hall.PdkLogRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkLogRsp
             * @static
             * @param {hall.IPdkLogRsp} message PdkLogRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkLogRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkLogRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkLogRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkLogRsp} PdkLogRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkLogRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.pdkLogInfos && message.pdkLogInfos.length))
                            message.pdkLogInfos = [];
                        message.pdkLogInfos.push($root.hall.PdkLogInfo.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.todayPoints = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkLogRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkLogRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkLogRsp} PdkLogRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkLogRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkLogRsp message.
             * @function verify
             * @memberof hall.PdkLogRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkLogRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.pdkLogInfos != null && message.hasOwnProperty("pdkLogInfos")) {
                    if (!Array.isArray(message.pdkLogInfos))
                        return "pdkLogInfos: array expected";
                    for (var i = 0; i < message.pdkLogInfos.length; ++i) {
                        var error = $root.hall.PdkLogInfo.verify(message.pdkLogInfos[i]);
                        if (error)
                            return "pdkLogInfos." + error;
                    }
                }
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    if (!$util.isInteger(message.todayPoints))
                        return "todayPoints: integer expected";
                return null;
            };
    
            /**
             * Creates a PdkLogRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkLogRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkLogRsp} PdkLogRsp
             */
            PdkLogRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkLogRsp)
                    return object;
                var message = new $root.hall.PdkLogRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PdkLogRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.pdkLogInfos) {
                    if (!Array.isArray(object.pdkLogInfos))
                        throw TypeError(".hall.PdkLogRsp.pdkLogInfos: array expected");
                    message.pdkLogInfos = [];
                    for (var i = 0; i < object.pdkLogInfos.length; ++i) {
                        if (typeof object.pdkLogInfos[i] !== "object")
                            throw TypeError(".hall.PdkLogRsp.pdkLogInfos: object expected");
                        message.pdkLogInfos[i] = $root.hall.PdkLogInfo.fromObject(object.pdkLogInfos[i]);
                    }
                }
                if (object.todayPoints != null)
                    message.todayPoints = object.todayPoints | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PdkLogRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkLogRsp
             * @static
             * @param {hall.PdkLogRsp} message PdkLogRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkLogRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pdkLogInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.todayPoints = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.pdkLogInfos && message.pdkLogInfos.length) {
                    object.pdkLogInfos = [];
                    for (var j = 0; j < message.pdkLogInfos.length; ++j)
                        object.pdkLogInfos[j] = $root.hall.PdkLogInfo.toObject(message.pdkLogInfos[j], options);
                }
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    object.todayPoints = message.todayPoints;
                return object;
            };
    
            /**
             * Converts this PdkLogRsp to JSON.
             * @function toJSON
             * @memberof hall.PdkLogRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkLogRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkLogRsp;
        })();
    
        hall.PdkDetailLogReq = (function() {
    
            /**
             * Properties of a PdkDetailLogReq.
             * @memberof hall
             * @interface IPdkDetailLogReq
             * @property {common.IRequest|null} [request] PdkDetailLogReq request
             * @property {number|null} [time] PdkDetailLogReq time
             */
    
            /**
             * Constructs a new PdkDetailLogReq.
             * @memberof hall
             * @classdesc Represents a PdkDetailLogReq.
             * @implements IPdkDetailLogReq
             * @constructor
             * @param {hall.IPdkDetailLogReq=} [properties] Properties to set
             */
            function PdkDetailLogReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkDetailLogReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.PdkDetailLogReq
             * @instance
             */
            PdkDetailLogReq.prototype.request = null;
    
            /**
             * PdkDetailLogReq time.
             * @member {number} time
             * @memberof hall.PdkDetailLogReq
             * @instance
             */
            PdkDetailLogReq.prototype.time = 0;
    
            /**
             * Creates a new PdkDetailLogReq instance using the specified properties.
             * @function create
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {hall.IPdkDetailLogReq=} [properties] Properties to set
             * @returns {hall.PdkDetailLogReq} PdkDetailLogReq instance
             */
            PdkDetailLogReq.create = function create(properties) {
                return new PdkDetailLogReq(properties);
            };
    
            /**
             * Encodes the specified PdkDetailLogReq message. Does not implicitly {@link hall.PdkDetailLogReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {hall.IPdkDetailLogReq} message PdkDetailLogReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                return writer;
            };
    
            /**
             * Encodes the specified PdkDetailLogReq message, length delimited. Does not implicitly {@link hall.PdkDetailLogReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {hall.IPdkDetailLogReq} message PdkDetailLogReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkDetailLogReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkDetailLogReq} PdkDetailLogReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkDetailLogReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkDetailLogReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkDetailLogReq} PdkDetailLogReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkDetailLogReq message.
             * @function verify
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkDetailLogReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                return null;
            };
    
            /**
             * Creates a PdkDetailLogReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkDetailLogReq} PdkDetailLogReq
             */
            PdkDetailLogReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkDetailLogReq)
                    return object;
                var message = new $root.hall.PdkDetailLogReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PdkDetailLogReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.time != null)
                    message.time = object.time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PdkDetailLogReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkDetailLogReq
             * @static
             * @param {hall.PdkDetailLogReq} message PdkDetailLogReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkDetailLogReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.time = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                return object;
            };
    
            /**
             * Converts this PdkDetailLogReq to JSON.
             * @function toJSON
             * @memberof hall.PdkDetailLogReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkDetailLogReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkDetailLogReq;
        })();
    
        hall.PdkDetailLog = (function() {
    
            /**
             * Properties of a PdkDetailLog.
             * @memberof hall
             * @interface IPdkDetailLog
             * @property {number|null} [uid] PdkDetailLog uid
             * @property {string|null} [nick] PdkDetailLog nick
             * @property {number|null} [points] PdkDetailLog points
             * @property {number|null} [totalPoints] PdkDetailLog totalPoints
             * @property {number|null} [bombs] PdkDetailLog bombs
             * @property {number|null} [leftcards] PdkDetailLog leftcards
             */
    
            /**
             * Constructs a new PdkDetailLog.
             * @memberof hall
             * @classdesc Represents a PdkDetailLog.
             * @implements IPdkDetailLog
             * @constructor
             * @param {hall.IPdkDetailLog=} [properties] Properties to set
             */
            function PdkDetailLog(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkDetailLog uid.
             * @member {number} uid
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.uid = 0;
    
            /**
             * PdkDetailLog nick.
             * @member {string} nick
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.nick = "";
    
            /**
             * PdkDetailLog points.
             * @member {number} points
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.points = 0;
    
            /**
             * PdkDetailLog totalPoints.
             * @member {number} totalPoints
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.totalPoints = 0;
    
            /**
             * PdkDetailLog bombs.
             * @member {number} bombs
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.bombs = 0;
    
            /**
             * PdkDetailLog leftcards.
             * @member {number} leftcards
             * @memberof hall.PdkDetailLog
             * @instance
             */
            PdkDetailLog.prototype.leftcards = 0;
    
            /**
             * Creates a new PdkDetailLog instance using the specified properties.
             * @function create
             * @memberof hall.PdkDetailLog
             * @static
             * @param {hall.IPdkDetailLog=} [properties] Properties to set
             * @returns {hall.PdkDetailLog} PdkDetailLog instance
             */
            PdkDetailLog.create = function create(properties) {
                return new PdkDetailLog(properties);
            };
    
            /**
             * Encodes the specified PdkDetailLog message. Does not implicitly {@link hall.PdkDetailLog.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkDetailLog
             * @static
             * @param {hall.IPdkDetailLog} message PdkDetailLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLog.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.points);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalPoints);
                if (message.bombs != null && message.hasOwnProperty("bombs"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bombs);
                if (message.leftcards != null && message.hasOwnProperty("leftcards"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.leftcards);
                return writer;
            };
    
            /**
             * Encodes the specified PdkDetailLog message, length delimited. Does not implicitly {@link hall.PdkDetailLog.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkDetailLog
             * @static
             * @param {hall.IPdkDetailLog} message PdkDetailLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLog.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkDetailLog message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkDetailLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkDetailLog} PdkDetailLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLog.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkDetailLog();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.points = reader.int32();
                        break;
                    case 4:
                        message.totalPoints = reader.int32();
                        break;
                    case 5:
                        message.bombs = reader.uint32();
                        break;
                    case 6:
                        message.leftcards = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkDetailLog message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkDetailLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkDetailLog} PdkDetailLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLog.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkDetailLog message.
             * @function verify
             * @memberof hall.PdkDetailLog
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkDetailLog.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                if (message.bombs != null && message.hasOwnProperty("bombs"))
                    if (!$util.isInteger(message.bombs))
                        return "bombs: integer expected";
                if (message.leftcards != null && message.hasOwnProperty("leftcards"))
                    if (!$util.isInteger(message.leftcards))
                        return "leftcards: integer expected";
                return null;
            };
    
            /**
             * Creates a PdkDetailLog message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkDetailLog
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkDetailLog} PdkDetailLog
             */
            PdkDetailLog.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkDetailLog)
                    return object;
                var message = new $root.hall.PdkDetailLog();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                if (object.bombs != null)
                    message.bombs = object.bombs >>> 0;
                if (object.leftcards != null)
                    message.leftcards = object.leftcards >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PdkDetailLog message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkDetailLog
             * @static
             * @param {hall.PdkDetailLog} message PdkDetailLog
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkDetailLog.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.nick = "";
                    object.points = 0;
                    object.totalPoints = 0;
                    object.bombs = 0;
                    object.leftcards = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                if (message.bombs != null && message.hasOwnProperty("bombs"))
                    object.bombs = message.bombs;
                if (message.leftcards != null && message.hasOwnProperty("leftcards"))
                    object.leftcards = message.leftcards;
                return object;
            };
    
            /**
             * Converts this PdkDetailLog to JSON.
             * @function toJSON
             * @memberof hall.PdkDetailLog
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkDetailLog.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkDetailLog;
        })();
    
        hall.PdkDetailLogInfo = (function() {
    
            /**
             * Properties of a PdkDetailLogInfo.
             * @memberof hall
             * @interface IPdkDetailLogInfo
             * @property {number|null} [round] PdkDetailLogInfo round
             * @property {Array.<hall.IPdkDetailLog>|null} [pdkDetailLogs] PdkDetailLogInfo pdkDetailLogs
             */
    
            /**
             * Constructs a new PdkDetailLogInfo.
             * @memberof hall
             * @classdesc Represents a PdkDetailLogInfo.
             * @implements IPdkDetailLogInfo
             * @constructor
             * @param {hall.IPdkDetailLogInfo=} [properties] Properties to set
             */
            function PdkDetailLogInfo(properties) {
                this.pdkDetailLogs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkDetailLogInfo round.
             * @member {number} round
             * @memberof hall.PdkDetailLogInfo
             * @instance
             */
            PdkDetailLogInfo.prototype.round = 0;
    
            /**
             * PdkDetailLogInfo pdkDetailLogs.
             * @member {Array.<hall.IPdkDetailLog>} pdkDetailLogs
             * @memberof hall.PdkDetailLogInfo
             * @instance
             */
            PdkDetailLogInfo.prototype.pdkDetailLogs = $util.emptyArray;
    
            /**
             * Creates a new PdkDetailLogInfo instance using the specified properties.
             * @function create
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {hall.IPdkDetailLogInfo=} [properties] Properties to set
             * @returns {hall.PdkDetailLogInfo} PdkDetailLogInfo instance
             */
            PdkDetailLogInfo.create = function create(properties) {
                return new PdkDetailLogInfo(properties);
            };
    
            /**
             * Encodes the specified PdkDetailLogInfo message. Does not implicitly {@link hall.PdkDetailLogInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {hall.IPdkDetailLogInfo} message PdkDetailLogInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.round);
                if (message.pdkDetailLogs != null && message.pdkDetailLogs.length)
                    for (var i = 0; i < message.pdkDetailLogs.length; ++i)
                        $root.hall.PdkDetailLog.encode(message.pdkDetailLogs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PdkDetailLogInfo message, length delimited. Does not implicitly {@link hall.PdkDetailLogInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {hall.IPdkDetailLogInfo} message PdkDetailLogInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkDetailLogInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkDetailLogInfo} PdkDetailLogInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkDetailLogInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.uint32();
                        break;
                    case 2:
                        if (!(message.pdkDetailLogs && message.pdkDetailLogs.length))
                            message.pdkDetailLogs = [];
                        message.pdkDetailLogs.push($root.hall.PdkDetailLog.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkDetailLogInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkDetailLogInfo} PdkDetailLogInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkDetailLogInfo message.
             * @function verify
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkDetailLogInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.pdkDetailLogs != null && message.hasOwnProperty("pdkDetailLogs")) {
                    if (!Array.isArray(message.pdkDetailLogs))
                        return "pdkDetailLogs: array expected";
                    for (var i = 0; i < message.pdkDetailLogs.length; ++i) {
                        var error = $root.hall.PdkDetailLog.verify(message.pdkDetailLogs[i]);
                        if (error)
                            return "pdkDetailLogs." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PdkDetailLogInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkDetailLogInfo} PdkDetailLogInfo
             */
            PdkDetailLogInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkDetailLogInfo)
                    return object;
                var message = new $root.hall.PdkDetailLogInfo();
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.pdkDetailLogs) {
                    if (!Array.isArray(object.pdkDetailLogs))
                        throw TypeError(".hall.PdkDetailLogInfo.pdkDetailLogs: array expected");
                    message.pdkDetailLogs = [];
                    for (var i = 0; i < object.pdkDetailLogs.length; ++i) {
                        if (typeof object.pdkDetailLogs[i] !== "object")
                            throw TypeError(".hall.PdkDetailLogInfo.pdkDetailLogs: object expected");
                        message.pdkDetailLogs[i] = $root.hall.PdkDetailLog.fromObject(object.pdkDetailLogs[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PdkDetailLogInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkDetailLogInfo
             * @static
             * @param {hall.PdkDetailLogInfo} message PdkDetailLogInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkDetailLogInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pdkDetailLogs = [];
                if (options.defaults)
                    object.round = 0;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.pdkDetailLogs && message.pdkDetailLogs.length) {
                    object.pdkDetailLogs = [];
                    for (var j = 0; j < message.pdkDetailLogs.length; ++j)
                        object.pdkDetailLogs[j] = $root.hall.PdkDetailLog.toObject(message.pdkDetailLogs[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PdkDetailLogInfo to JSON.
             * @function toJSON
             * @memberof hall.PdkDetailLogInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkDetailLogInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkDetailLogInfo;
        })();
    
        hall.PdkDetailLogRsp = (function() {
    
            /**
             * Properties of a PdkDetailLogRsp.
             * @memberof hall
             * @interface IPdkDetailLogRsp
             * @property {common.IResult|null} [result] PdkDetailLogRsp result
             * @property {number|null} [time] PdkDetailLogRsp time
             * @property {Array.<hall.IPdkDetailLogInfo>|null} [pdkDetailLogInfos] PdkDetailLogRsp pdkDetailLogInfos
             */
    
            /**
             * Constructs a new PdkDetailLogRsp.
             * @memberof hall
             * @classdesc Represents a PdkDetailLogRsp.
             * @implements IPdkDetailLogRsp
             * @constructor
             * @param {hall.IPdkDetailLogRsp=} [properties] Properties to set
             */
            function PdkDetailLogRsp(properties) {
                this.pdkDetailLogInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PdkDetailLogRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PdkDetailLogRsp
             * @instance
             */
            PdkDetailLogRsp.prototype.result = null;
    
            /**
             * PdkDetailLogRsp time.
             * @member {number} time
             * @memberof hall.PdkDetailLogRsp
             * @instance
             */
            PdkDetailLogRsp.prototype.time = 0;
    
            /**
             * PdkDetailLogRsp pdkDetailLogInfos.
             * @member {Array.<hall.IPdkDetailLogInfo>} pdkDetailLogInfos
             * @memberof hall.PdkDetailLogRsp
             * @instance
             */
            PdkDetailLogRsp.prototype.pdkDetailLogInfos = $util.emptyArray;
    
            /**
             * Creates a new PdkDetailLogRsp instance using the specified properties.
             * @function create
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {hall.IPdkDetailLogRsp=} [properties] Properties to set
             * @returns {hall.PdkDetailLogRsp} PdkDetailLogRsp instance
             */
            PdkDetailLogRsp.create = function create(properties) {
                return new PdkDetailLogRsp(properties);
            };
    
            /**
             * Encodes the specified PdkDetailLogRsp message. Does not implicitly {@link hall.PdkDetailLogRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {hall.IPdkDetailLogRsp} message PdkDetailLogRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                if (message.pdkDetailLogInfos != null && message.pdkDetailLogInfos.length)
                    for (var i = 0; i < message.pdkDetailLogInfos.length; ++i)
                        $root.hall.PdkDetailLogInfo.encode(message.pdkDetailLogInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PdkDetailLogRsp message, length delimited. Does not implicitly {@link hall.PdkDetailLogRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {hall.IPdkDetailLogRsp} message PdkDetailLogRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PdkDetailLogRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PdkDetailLogRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PdkDetailLogRsp} PdkDetailLogRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PdkDetailLogRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.time = reader.uint32();
                        break;
                    case 3:
                        if (!(message.pdkDetailLogInfos && message.pdkDetailLogInfos.length))
                            message.pdkDetailLogInfos = [];
                        message.pdkDetailLogInfos.push($root.hall.PdkDetailLogInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PdkDetailLogRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PdkDetailLogRsp} PdkDetailLogRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PdkDetailLogRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PdkDetailLogRsp message.
             * @function verify
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PdkDetailLogRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.pdkDetailLogInfos != null && message.hasOwnProperty("pdkDetailLogInfos")) {
                    if (!Array.isArray(message.pdkDetailLogInfos))
                        return "pdkDetailLogInfos: array expected";
                    for (var i = 0; i < message.pdkDetailLogInfos.length; ++i) {
                        var error = $root.hall.PdkDetailLogInfo.verify(message.pdkDetailLogInfos[i]);
                        if (error)
                            return "pdkDetailLogInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PdkDetailLogRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PdkDetailLogRsp} PdkDetailLogRsp
             */
            PdkDetailLogRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PdkDetailLogRsp)
                    return object;
                var message = new $root.hall.PdkDetailLogRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PdkDetailLogRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.pdkDetailLogInfos) {
                    if (!Array.isArray(object.pdkDetailLogInfos))
                        throw TypeError(".hall.PdkDetailLogRsp.pdkDetailLogInfos: array expected");
                    message.pdkDetailLogInfos = [];
                    for (var i = 0; i < object.pdkDetailLogInfos.length; ++i) {
                        if (typeof object.pdkDetailLogInfos[i] !== "object")
                            throw TypeError(".hall.PdkDetailLogRsp.pdkDetailLogInfos: object expected");
                        message.pdkDetailLogInfos[i] = $root.hall.PdkDetailLogInfo.fromObject(object.pdkDetailLogInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PdkDetailLogRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PdkDetailLogRsp
             * @static
             * @param {hall.PdkDetailLogRsp} message PdkDetailLogRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PdkDetailLogRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pdkDetailLogInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.time = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.pdkDetailLogInfos && message.pdkDetailLogInfos.length) {
                    object.pdkDetailLogInfos = [];
                    for (var j = 0; j < message.pdkDetailLogInfos.length; ++j)
                        object.pdkDetailLogInfos[j] = $root.hall.PdkDetailLogInfo.toObject(message.pdkDetailLogInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PdkDetailLogRsp to JSON.
             * @function toJSON
             * @memberof hall.PdkDetailLogRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PdkDetailLogRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PdkDetailLogRsp;
        })();
    
        hall.ShareReq = (function() {
    
            /**
             * Properties of a ShareReq.
             * @memberof hall
             * @interface IShareReq
             * @property {common.IRequest} request ShareReq request
             */
    
            /**
             * Constructs a new ShareReq.
             * @memberof hall
             * @classdesc Represents a ShareReq.
             * @implements IShareReq
             * @constructor
             * @param {hall.IShareReq=} [properties] Properties to set
             */
            function ShareReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ShareReq request.
             * @member {common.IRequest} request
             * @memberof hall.ShareReq
             * @instance
             */
            ShareReq.prototype.request = null;
    
            /**
             * Creates a new ShareReq instance using the specified properties.
             * @function create
             * @memberof hall.ShareReq
             * @static
             * @param {hall.IShareReq=} [properties] Properties to set
             * @returns {hall.ShareReq} ShareReq instance
             */
            ShareReq.create = function create(properties) {
                return new ShareReq(properties);
            };
    
            /**
             * Encodes the specified ShareReq message. Does not implicitly {@link hall.ShareReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ShareReq
             * @static
             * @param {hall.IShareReq} message ShareReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShareReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ShareReq message, length delimited. Does not implicitly {@link hall.ShareReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ShareReq
             * @static
             * @param {hall.IShareReq} message ShareReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShareReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ShareReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ShareReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ShareReq} ShareReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShareReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ShareReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a ShareReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ShareReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ShareReq} ShareReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShareReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ShareReq message.
             * @function verify
             * @memberof hall.ShareReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ShareReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ShareReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ShareReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ShareReq} ShareReq
             */
            ShareReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ShareReq)
                    return object;
                var message = new $root.hall.ShareReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ShareReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ShareReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ShareReq
             * @static
             * @param {hall.ShareReq} message ShareReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ShareReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ShareReq to JSON.
             * @function toJSON
             * @memberof hall.ShareReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ShareReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ShareReq;
        })();
    
        hall.ShareRsp = (function() {
    
            /**
             * Properties of a ShareRsp.
             * @memberof hall
             * @interface IShareRsp
             * @property {common.IResult|null} [result] ShareRsp result
             */
    
            /**
             * Constructs a new ShareRsp.
             * @memberof hall
             * @classdesc Represents a ShareRsp.
             * @implements IShareRsp
             * @constructor
             * @param {hall.IShareRsp=} [properties] Properties to set
             */
            function ShareRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ShareRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ShareRsp
             * @instance
             */
            ShareRsp.prototype.result = null;
    
            /**
             * Creates a new ShareRsp instance using the specified properties.
             * @function create
             * @memberof hall.ShareRsp
             * @static
             * @param {hall.IShareRsp=} [properties] Properties to set
             * @returns {hall.ShareRsp} ShareRsp instance
             */
            ShareRsp.create = function create(properties) {
                return new ShareRsp(properties);
            };
    
            /**
             * Encodes the specified ShareRsp message. Does not implicitly {@link hall.ShareRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ShareRsp
             * @static
             * @param {hall.IShareRsp} message ShareRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShareRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ShareRsp message, length delimited. Does not implicitly {@link hall.ShareRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ShareRsp
             * @static
             * @param {hall.IShareRsp} message ShareRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShareRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ShareRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ShareRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ShareRsp} ShareRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShareRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ShareRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ShareRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ShareRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ShareRsp} ShareRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShareRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ShareRsp message.
             * @function verify
             * @memberof hall.ShareRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ShareRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a ShareRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ShareRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ShareRsp} ShareRsp
             */
            ShareRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ShareRsp)
                    return object;
                var message = new $root.hall.ShareRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ShareRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ShareRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ShareRsp
             * @static
             * @param {hall.ShareRsp} message ShareRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ShareRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this ShareRsp to JSON.
             * @function toJSON
             * @memberof hall.ShareRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ShareRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ShareRsp;
        })();
    
        hall.Transferred = (function() {
    
            /**
             * Properties of a Transferred.
             * @memberof hall
             * @interface ITransferred
             * @property {number|null} [uid] Transferred uid
             * @property {number|Long|null} [diamond] Transferred diamond
             */
    
            /**
             * Constructs a new Transferred.
             * @memberof hall
             * @classdesc Represents a Transferred.
             * @implements ITransferred
             * @constructor
             * @param {hall.ITransferred=} [properties] Properties to set
             */
            function Transferred(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Transferred uid.
             * @member {number} uid
             * @memberof hall.Transferred
             * @instance
             */
            Transferred.prototype.uid = 0;
    
            /**
             * Transferred diamond.
             * @member {number|Long} diamond
             * @memberof hall.Transferred
             * @instance
             */
            Transferred.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Creates a new Transferred instance using the specified properties.
             * @function create
             * @memberof hall.Transferred
             * @static
             * @param {hall.ITransferred=} [properties] Properties to set
             * @returns {hall.Transferred} Transferred instance
             */
            Transferred.create = function create(properties) {
                return new Transferred(properties);
            };
    
            /**
             * Encodes the specified Transferred message. Does not implicitly {@link hall.Transferred.verify|verify} messages.
             * @function encode
             * @memberof hall.Transferred
             * @static
             * @param {hall.ITransferred} message Transferred message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Transferred.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.diamond);
                return writer;
            };
    
            /**
             * Encodes the specified Transferred message, length delimited. Does not implicitly {@link hall.Transferred.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.Transferred
             * @static
             * @param {hall.ITransferred} message Transferred message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Transferred.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Transferred message from the specified reader or buffer.
             * @function decode
             * @memberof hall.Transferred
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.Transferred} Transferred
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Transferred.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.Transferred();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.diamond = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Transferred message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.Transferred
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.Transferred} Transferred
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Transferred.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Transferred message.
             * @function verify
             * @memberof hall.Transferred
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Transferred.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a Transferred message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.Transferred
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.Transferred} Transferred
             */
            Transferred.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.Transferred)
                    return object;
                var message = new $root.hall.Transferred();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = false;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber();
                return message;
            };
    
            /**
             * Creates a plain object from a Transferred message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.Transferred
             * @static
             * @param {hall.Transferred} message Transferred
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Transferred.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber() : message.diamond;
                return object;
            };
    
            /**
             * Converts this Transferred to JSON.
             * @function toJSON
             * @memberof hall.Transferred
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Transferred.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Transferred;
        })();
    
        hall.TransferredReq = (function() {
    
            /**
             * Properties of a TransferredReq.
             * @memberof hall
             * @interface ITransferredReq
             * @property {common.IRequest} request TransferredReq request
             * @property {Array.<hall.ITransferred>|null} [trans] TransferredReq trans
             * @property {number|null} [eventId] TransferredReq eventId
             */
    
            /**
             * Constructs a new TransferredReq.
             * @memberof hall
             * @classdesc Represents a TransferredReq.
             * @implements ITransferredReq
             * @constructor
             * @param {hall.ITransferredReq=} [properties] Properties to set
             */
            function TransferredReq(properties) {
                this.trans = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TransferredReq request.
             * @member {common.IRequest} request
             * @memberof hall.TransferredReq
             * @instance
             */
            TransferredReq.prototype.request = null;
    
            /**
             * TransferredReq trans.
             * @member {Array.<hall.ITransferred>} trans
             * @memberof hall.TransferredReq
             * @instance
             */
            TransferredReq.prototype.trans = $util.emptyArray;
    
            /**
             * TransferredReq eventId.
             * @member {number} eventId
             * @memberof hall.TransferredReq
             * @instance
             */
            TransferredReq.prototype.eventId = 0;
    
            /**
             * Creates a new TransferredReq instance using the specified properties.
             * @function create
             * @memberof hall.TransferredReq
             * @static
             * @param {hall.ITransferredReq=} [properties] Properties to set
             * @returns {hall.TransferredReq} TransferredReq instance
             */
            TransferredReq.create = function create(properties) {
                return new TransferredReq(properties);
            };
    
            /**
             * Encodes the specified TransferredReq message. Does not implicitly {@link hall.TransferredReq.verify|verify} messages.
             * @function encode
             * @memberof hall.TransferredReq
             * @static
             * @param {hall.ITransferredReq} message TransferredReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferredReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.trans != null && message.trans.length)
                    for (var i = 0; i < message.trans.length; ++i)
                        $root.hall.Transferred.encode(message.trans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.eventId != null && message.hasOwnProperty("eventId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.eventId);
                return writer;
            };
    
            /**
             * Encodes the specified TransferredReq message, length delimited. Does not implicitly {@link hall.TransferredReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TransferredReq
             * @static
             * @param {hall.ITransferredReq} message TransferredReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferredReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TransferredReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TransferredReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TransferredReq} TransferredReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferredReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TransferredReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.trans && message.trans.length))
                            message.trans = [];
                        message.trans.push($root.hall.Transferred.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.eventId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a TransferredReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TransferredReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TransferredReq} TransferredReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferredReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TransferredReq message.
             * @function verify
             * @memberof hall.TransferredReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TransferredReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.trans != null && message.hasOwnProperty("trans")) {
                    if (!Array.isArray(message.trans))
                        return "trans: array expected";
                    for (var i = 0; i < message.trans.length; ++i) {
                        var error = $root.hall.Transferred.verify(message.trans[i]);
                        if (error)
                            return "trans." + error;
                    }
                }
                if (message.eventId != null && message.hasOwnProperty("eventId"))
                    if (!$util.isInteger(message.eventId))
                        return "eventId: integer expected";
                return null;
            };
    
            /**
             * Creates a TransferredReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TransferredReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TransferredReq} TransferredReq
             */
            TransferredReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TransferredReq)
                    return object;
                var message = new $root.hall.TransferredReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.TransferredReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.trans) {
                    if (!Array.isArray(object.trans))
                        throw TypeError(".hall.TransferredReq.trans: array expected");
                    message.trans = [];
                    for (var i = 0; i < object.trans.length; ++i) {
                        if (typeof object.trans[i] !== "object")
                            throw TypeError(".hall.TransferredReq.trans: object expected");
                        message.trans[i] = $root.hall.Transferred.fromObject(object.trans[i]);
                    }
                }
                if (object.eventId != null)
                    message.eventId = object.eventId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TransferredReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TransferredReq
             * @static
             * @param {hall.TransferredReq} message TransferredReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TransferredReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.trans = [];
                if (options.defaults) {
                    object.request = null;
                    object.eventId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.trans && message.trans.length) {
                    object.trans = [];
                    for (var j = 0; j < message.trans.length; ++j)
                        object.trans[j] = $root.hall.Transferred.toObject(message.trans[j], options);
                }
                if (message.eventId != null && message.hasOwnProperty("eventId"))
                    object.eventId = message.eventId;
                return object;
            };
    
            /**
             * Converts this TransferredReq to JSON.
             * @function toJSON
             * @memberof hall.TransferredReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TransferredReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TransferredReq;
        })();
    
        hall.TransferredRsp = (function() {
    
            /**
             * Properties of a TransferredRsp.
             * @memberof hall
             * @interface ITransferredRsp
             * @property {common.IResult|null} [result] TransferredRsp result
             * @property {Array.<hall.ITransferred>|null} [trans] TransferredRsp trans
             */
    
            /**
             * Constructs a new TransferredRsp.
             * @memberof hall
             * @classdesc Represents a TransferredRsp.
             * @implements ITransferredRsp
             * @constructor
             * @param {hall.ITransferredRsp=} [properties] Properties to set
             */
            function TransferredRsp(properties) {
                this.trans = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TransferredRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.TransferredRsp
             * @instance
             */
            TransferredRsp.prototype.result = null;
    
            /**
             * TransferredRsp trans.
             * @member {Array.<hall.ITransferred>} trans
             * @memberof hall.TransferredRsp
             * @instance
             */
            TransferredRsp.prototype.trans = $util.emptyArray;
    
            /**
             * Creates a new TransferredRsp instance using the specified properties.
             * @function create
             * @memberof hall.TransferredRsp
             * @static
             * @param {hall.ITransferredRsp=} [properties] Properties to set
             * @returns {hall.TransferredRsp} TransferredRsp instance
             */
            TransferredRsp.create = function create(properties) {
                return new TransferredRsp(properties);
            };
    
            /**
             * Encodes the specified TransferredRsp message. Does not implicitly {@link hall.TransferredRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.TransferredRsp
             * @static
             * @param {hall.ITransferredRsp} message TransferredRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferredRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.trans != null && message.trans.length)
                    for (var i = 0; i < message.trans.length; ++i)
                        $root.hall.Transferred.encode(message.trans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TransferredRsp message, length delimited. Does not implicitly {@link hall.TransferredRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TransferredRsp
             * @static
             * @param {hall.ITransferredRsp} message TransferredRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferredRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TransferredRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TransferredRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TransferredRsp} TransferredRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferredRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TransferredRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.trans && message.trans.length))
                            message.trans = [];
                        message.trans.push($root.hall.Transferred.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TransferredRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TransferredRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TransferredRsp} TransferredRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferredRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TransferredRsp message.
             * @function verify
             * @memberof hall.TransferredRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TransferredRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.trans != null && message.hasOwnProperty("trans")) {
                    if (!Array.isArray(message.trans))
                        return "trans: array expected";
                    for (var i = 0; i < message.trans.length; ++i) {
                        var error = $root.hall.Transferred.verify(message.trans[i]);
                        if (error)
                            return "trans." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a TransferredRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TransferredRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TransferredRsp} TransferredRsp
             */
            TransferredRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TransferredRsp)
                    return object;
                var message = new $root.hall.TransferredRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.TransferredRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.trans) {
                    if (!Array.isArray(object.trans))
                        throw TypeError(".hall.TransferredRsp.trans: array expected");
                    message.trans = [];
                    for (var i = 0; i < object.trans.length; ++i) {
                        if (typeof object.trans[i] !== "object")
                            throw TypeError(".hall.TransferredRsp.trans: object expected");
                        message.trans[i] = $root.hall.Transferred.fromObject(object.trans[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TransferredRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TransferredRsp
             * @static
             * @param {hall.TransferredRsp} message TransferredRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TransferredRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.trans = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.trans && message.trans.length) {
                    object.trans = [];
                    for (var j = 0; j < message.trans.length; ++j)
                        object.trans[j] = $root.hall.Transferred.toObject(message.trans[j], options);
                }
                return object;
            };
    
            /**
             * Converts this TransferredRsp to JSON.
             * @function toJSON
             * @memberof hall.TransferredRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TransferredRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TransferredRsp;
        })();
    
        hall.OfficialReq = (function() {
    
            /**
             * Properties of an OfficialReq.
             * @memberof hall
             * @interface IOfficialReq
             * @property {common.IRequest} request OfficialReq request
             */
    
            /**
             * Constructs a new OfficialReq.
             * @memberof hall
             * @classdesc Represents an OfficialReq.
             * @implements IOfficialReq
             * @constructor
             * @param {hall.IOfficialReq=} [properties] Properties to set
             */
            function OfficialReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OfficialReq request.
             * @member {common.IRequest} request
             * @memberof hall.OfficialReq
             * @instance
             */
            OfficialReq.prototype.request = null;
    
            /**
             * Creates a new OfficialReq instance using the specified properties.
             * @function create
             * @memberof hall.OfficialReq
             * @static
             * @param {hall.IOfficialReq=} [properties] Properties to set
             * @returns {hall.OfficialReq} OfficialReq instance
             */
            OfficialReq.create = function create(properties) {
                return new OfficialReq(properties);
            };
    
            /**
             * Encodes the specified OfficialReq message. Does not implicitly {@link hall.OfficialReq.verify|verify} messages.
             * @function encode
             * @memberof hall.OfficialReq
             * @static
             * @param {hall.IOfficialReq} message OfficialReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfficialReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified OfficialReq message, length delimited. Does not implicitly {@link hall.OfficialReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.OfficialReq
             * @static
             * @param {hall.IOfficialReq} message OfficialReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfficialReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OfficialReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.OfficialReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.OfficialReq} OfficialReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfficialReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.OfficialReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an OfficialReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.OfficialReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.OfficialReq} OfficialReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfficialReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OfficialReq message.
             * @function verify
             * @memberof hall.OfficialReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OfficialReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates an OfficialReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.OfficialReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.OfficialReq} OfficialReq
             */
            OfficialReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.OfficialReq)
                    return object;
                var message = new $root.hall.OfficialReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.OfficialReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an OfficialReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.OfficialReq
             * @static
             * @param {hall.OfficialReq} message OfficialReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OfficialReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this OfficialReq to JSON.
             * @function toJSON
             * @memberof hall.OfficialReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OfficialReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OfficialReq;
        })();
    
        hall.OfficialRsp = (function() {
    
            /**
             * Properties of an OfficialRsp.
             * @memberof hall
             * @interface IOfficialRsp
             * @property {common.IResult|null} [result] OfficialRsp result
             * @property {string|null} [news] OfficialRsp news
             * @property {string|null} [contact] OfficialRsp contact
             * @property {string|null} [disclaimer] OfficialRsp disclaimer
             * @property {string|null} [promotion] OfficialRsp promotion
             */
    
            /**
             * Constructs a new OfficialRsp.
             * @memberof hall
             * @classdesc Represents an OfficialRsp.
             * @implements IOfficialRsp
             * @constructor
             * @param {hall.IOfficialRsp=} [properties] Properties to set
             */
            function OfficialRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OfficialRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.OfficialRsp
             * @instance
             */
            OfficialRsp.prototype.result = null;
    
            /**
             * OfficialRsp news.
             * @member {string} news
             * @memberof hall.OfficialRsp
             * @instance
             */
            OfficialRsp.prototype.news = "";
    
            /**
             * OfficialRsp contact.
             * @member {string} contact
             * @memberof hall.OfficialRsp
             * @instance
             */
            OfficialRsp.prototype.contact = "";
    
            /**
             * OfficialRsp disclaimer.
             * @member {string} disclaimer
             * @memberof hall.OfficialRsp
             * @instance
             */
            OfficialRsp.prototype.disclaimer = "";
    
            /**
             * OfficialRsp promotion.
             * @member {string} promotion
             * @memberof hall.OfficialRsp
             * @instance
             */
            OfficialRsp.prototype.promotion = "";
    
            /**
             * Creates a new OfficialRsp instance using the specified properties.
             * @function create
             * @memberof hall.OfficialRsp
             * @static
             * @param {hall.IOfficialRsp=} [properties] Properties to set
             * @returns {hall.OfficialRsp} OfficialRsp instance
             */
            OfficialRsp.create = function create(properties) {
                return new OfficialRsp(properties);
            };
    
            /**
             * Encodes the specified OfficialRsp message. Does not implicitly {@link hall.OfficialRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.OfficialRsp
             * @static
             * @param {hall.IOfficialRsp} message OfficialRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfficialRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.news != null && message.hasOwnProperty("news"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.news);
                if (message.contact != null && message.hasOwnProperty("contact"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.contact);
                if (message.disclaimer != null && message.hasOwnProperty("disclaimer"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.disclaimer);
                if (message.promotion != null && message.hasOwnProperty("promotion"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.promotion);
                return writer;
            };
    
            /**
             * Encodes the specified OfficialRsp message, length delimited. Does not implicitly {@link hall.OfficialRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.OfficialRsp
             * @static
             * @param {hall.IOfficialRsp} message OfficialRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfficialRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OfficialRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.OfficialRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.OfficialRsp} OfficialRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfficialRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.OfficialRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.news = reader.string();
                        break;
                    case 3:
                        message.contact = reader.string();
                        break;
                    case 4:
                        message.disclaimer = reader.string();
                        break;
                    case 5:
                        message.promotion = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OfficialRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.OfficialRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.OfficialRsp} OfficialRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfficialRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OfficialRsp message.
             * @function verify
             * @memberof hall.OfficialRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OfficialRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.news != null && message.hasOwnProperty("news"))
                    if (!$util.isString(message.news))
                        return "news: string expected";
                if (message.contact != null && message.hasOwnProperty("contact"))
                    if (!$util.isString(message.contact))
                        return "contact: string expected";
                if (message.disclaimer != null && message.hasOwnProperty("disclaimer"))
                    if (!$util.isString(message.disclaimer))
                        return "disclaimer: string expected";
                if (message.promotion != null && message.hasOwnProperty("promotion"))
                    if (!$util.isString(message.promotion))
                        return "promotion: string expected";
                return null;
            };
    
            /**
             * Creates an OfficialRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.OfficialRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.OfficialRsp} OfficialRsp
             */
            OfficialRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.OfficialRsp)
                    return object;
                var message = new $root.hall.OfficialRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.OfficialRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.news != null)
                    message.news = String(object.news);
                if (object.contact != null)
                    message.contact = String(object.contact);
                if (object.disclaimer != null)
                    message.disclaimer = String(object.disclaimer);
                if (object.promotion != null)
                    message.promotion = String(object.promotion);
                return message;
            };
    
            /**
             * Creates a plain object from an OfficialRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.OfficialRsp
             * @static
             * @param {hall.OfficialRsp} message OfficialRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OfficialRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.news = "";
                    object.contact = "";
                    object.disclaimer = "";
                    object.promotion = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.news != null && message.hasOwnProperty("news"))
                    object.news = message.news;
                if (message.contact != null && message.hasOwnProperty("contact"))
                    object.contact = message.contact;
                if (message.disclaimer != null && message.hasOwnProperty("disclaimer"))
                    object.disclaimer = message.disclaimer;
                if (message.promotion != null && message.hasOwnProperty("promotion"))
                    object.promotion = message.promotion;
                return object;
            };
    
            /**
             * Converts this OfficialRsp to JSON.
             * @function toJSON
             * @memberof hall.OfficialRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OfficialRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OfficialRsp;
        })();
    
        hall.SessionCountReq = (function() {
    
            /**
             * Properties of a SessionCountReq.
             * @memberof hall
             * @interface ISessionCountReq
             * @property {common.IRequest} request SessionCountReq request
             */
    
            /**
             * Constructs a new SessionCountReq.
             * @memberof hall
             * @classdesc Represents a SessionCountReq.
             * @implements ISessionCountReq
             * @constructor
             * @param {hall.ISessionCountReq=} [properties] Properties to set
             */
            function SessionCountReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SessionCountReq request.
             * @member {common.IRequest} request
             * @memberof hall.SessionCountReq
             * @instance
             */
            SessionCountReq.prototype.request = null;
    
            /**
             * Creates a new SessionCountReq instance using the specified properties.
             * @function create
             * @memberof hall.SessionCountReq
             * @static
             * @param {hall.ISessionCountReq=} [properties] Properties to set
             * @returns {hall.SessionCountReq} SessionCountReq instance
             */
            SessionCountReq.create = function create(properties) {
                return new SessionCountReq(properties);
            };
    
            /**
             * Encodes the specified SessionCountReq message. Does not implicitly {@link hall.SessionCountReq.verify|verify} messages.
             * @function encode
             * @memberof hall.SessionCountReq
             * @static
             * @param {hall.ISessionCountReq} message SessionCountReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SessionCountReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SessionCountReq message, length delimited. Does not implicitly {@link hall.SessionCountReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SessionCountReq
             * @static
             * @param {hall.ISessionCountReq} message SessionCountReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SessionCountReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SessionCountReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SessionCountReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SessionCountReq} SessionCountReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SessionCountReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SessionCountReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SessionCountReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SessionCountReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SessionCountReq} SessionCountReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SessionCountReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SessionCountReq message.
             * @function verify
             * @memberof hall.SessionCountReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SessionCountReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a SessionCountReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SessionCountReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SessionCountReq} SessionCountReq
             */
            SessionCountReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SessionCountReq)
                    return object;
                var message = new $root.hall.SessionCountReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.SessionCountReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SessionCountReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SessionCountReq
             * @static
             * @param {hall.SessionCountReq} message SessionCountReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SessionCountReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this SessionCountReq to JSON.
             * @function toJSON
             * @memberof hall.SessionCountReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SessionCountReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SessionCountReq;
        })();
    
        hall.SessionCountRsp = (function() {
    
            /**
             * Properties of a SessionCountRsp.
             * @memberof hall
             * @interface ISessionCountRsp
             * @property {common.IResult} result SessionCountRsp result
             * @property {number|null} [count] SessionCountRsp count
             * @property {number|null} [logined] SessionCountRsp logined
             * @property {number|null} [playing] SessionCountRsp playing
             */
    
            /**
             * Constructs a new SessionCountRsp.
             * @memberof hall
             * @classdesc Represents a SessionCountRsp.
             * @implements ISessionCountRsp
             * @constructor
             * @param {hall.ISessionCountRsp=} [properties] Properties to set
             */
            function SessionCountRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SessionCountRsp result.
             * @member {common.IResult} result
             * @memberof hall.SessionCountRsp
             * @instance
             */
            SessionCountRsp.prototype.result = null;
    
            /**
             * SessionCountRsp count.
             * @member {number} count
             * @memberof hall.SessionCountRsp
             * @instance
             */
            SessionCountRsp.prototype.count = 0;
    
            /**
             * SessionCountRsp logined.
             * @member {number} logined
             * @memberof hall.SessionCountRsp
             * @instance
             */
            SessionCountRsp.prototype.logined = 0;
    
            /**
             * SessionCountRsp playing.
             * @member {number} playing
             * @memberof hall.SessionCountRsp
             * @instance
             */
            SessionCountRsp.prototype.playing = 0;
    
            /**
             * Creates a new SessionCountRsp instance using the specified properties.
             * @function create
             * @memberof hall.SessionCountRsp
             * @static
             * @param {hall.ISessionCountRsp=} [properties] Properties to set
             * @returns {hall.SessionCountRsp} SessionCountRsp instance
             */
            SessionCountRsp.create = function create(properties) {
                return new SessionCountRsp(properties);
            };
    
            /**
             * Encodes the specified SessionCountRsp message. Does not implicitly {@link hall.SessionCountRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.SessionCountRsp
             * @static
             * @param {hall.ISessionCountRsp} message SessionCountRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SessionCountRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                if (message.logined != null && message.hasOwnProperty("logined"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.logined);
                if (message.playing != null && message.hasOwnProperty("playing"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playing);
                return writer;
            };
    
            /**
             * Encodes the specified SessionCountRsp message, length delimited. Does not implicitly {@link hall.SessionCountRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SessionCountRsp
             * @static
             * @param {hall.ISessionCountRsp} message SessionCountRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SessionCountRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SessionCountRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SessionCountRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SessionCountRsp} SessionCountRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SessionCountRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SessionCountRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.count = reader.int32();
                        break;
                    case 3:
                        message.logined = reader.uint32();
                        break;
                    case 4:
                        message.playing = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("result"))
                    throw $util.ProtocolError("missing required 'result'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SessionCountRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SessionCountRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SessionCountRsp} SessionCountRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SessionCountRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SessionCountRsp message.
             * @function verify
             * @memberof hall.SessionCountRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SessionCountRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.logined != null && message.hasOwnProperty("logined"))
                    if (!$util.isInteger(message.logined))
                        return "logined: integer expected";
                if (message.playing != null && message.hasOwnProperty("playing"))
                    if (!$util.isInteger(message.playing))
                        return "playing: integer expected";
                return null;
            };
    
            /**
             * Creates a SessionCountRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SessionCountRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SessionCountRsp} SessionCountRsp
             */
            SessionCountRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SessionCountRsp)
                    return object;
                var message = new $root.hall.SessionCountRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.SessionCountRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.count != null)
                    message.count = object.count | 0;
                if (object.logined != null)
                    message.logined = object.logined >>> 0;
                if (object.playing != null)
                    message.playing = object.playing >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SessionCountRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SessionCountRsp
             * @static
             * @param {hall.SessionCountRsp} message SessionCountRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SessionCountRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.count = 0;
                    object.logined = 0;
                    object.playing = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.logined != null && message.hasOwnProperty("logined"))
                    object.logined = message.logined;
                if (message.playing != null && message.hasOwnProperty("playing"))
                    object.playing = message.playing;
                return object;
            };
    
            /**
             * Converts this SessionCountRsp to JSON.
             * @function toJSON
             * @memberof hall.SessionCountRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SessionCountRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SessionCountRsp;
        })();
    
        hall.SendMail = (function() {
    
            /**
             * Properties of a SendMail.
             * @memberof hall
             * @interface ISendMail
             * @property {number|null} [uid] SendMail uid
             * @property {number|null} [type] SendMail type
             * @property {string|null} [title] SendMail title
             * @property {string|null} [content] SendMail content
             * @property {number|null} [time] SendMail time
             * @property {number|null} [senderId] SendMail senderId
             * @property {string|null} [senderName] SendMail senderName
             * @property {Array.<number>|null} [awards] SendMail awards
             */
    
            /**
             * Constructs a new SendMail.
             * @memberof hall
             * @classdesc Represents a SendMail.
             * @implements ISendMail
             * @constructor
             * @param {hall.ISendMail=} [properties] Properties to set
             */
            function SendMail(properties) {
                this.awards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SendMail uid.
             * @member {number} uid
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.uid = 0;
    
            /**
             * SendMail type.
             * @member {number} type
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.type = 0;
    
            /**
             * SendMail title.
             * @member {string} title
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.title = "";
    
            /**
             * SendMail content.
             * @member {string} content
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.content = "";
    
            /**
             * SendMail time.
             * @member {number} time
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.time = 0;
    
            /**
             * SendMail senderId.
             * @member {number} senderId
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.senderId = 0;
    
            /**
             * SendMail senderName.
             * @member {string} senderName
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.senderName = "";
    
            /**
             * SendMail awards.
             * @member {Array.<number>} awards
             * @memberof hall.SendMail
             * @instance
             */
            SendMail.prototype.awards = $util.emptyArray;
    
            /**
             * Creates a new SendMail instance using the specified properties.
             * @function create
             * @memberof hall.SendMail
             * @static
             * @param {hall.ISendMail=} [properties] Properties to set
             * @returns {hall.SendMail} SendMail instance
             */
            SendMail.create = function create(properties) {
                return new SendMail(properties);
            };
    
            /**
             * Encodes the specified SendMail message. Does not implicitly {@link hall.SendMail.verify|verify} messages.
             * @function encode
             * @memberof hall.SendMail
             * @static
             * @param {hall.ISendMail} message SendMail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMail.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.time);
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.senderId);
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.senderName);
                if (message.awards != null && message.awards.length)
                    for (var i = 0; i < message.awards.length; ++i)
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.awards[i]);
                return writer;
            };
    
            /**
             * Encodes the specified SendMail message, length delimited. Does not implicitly {@link hall.SendMail.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SendMail
             * @static
             * @param {hall.ISendMail} message SendMail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMail.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SendMail message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SendMail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SendMail} SendMail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMail.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SendMail();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        message.title = reader.string();
                        break;
                    case 4:
                        message.content = reader.string();
                        break;
                    case 5:
                        message.time = reader.uint32();
                        break;
                    case 6:
                        message.senderId = reader.uint32();
                        break;
                    case 7:
                        message.senderName = reader.string();
                        break;
                    case 8:
                        if (!(message.awards && message.awards.length))
                            message.awards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.awards.push(reader.uint32());
                        } else
                            message.awards.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SendMail message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SendMail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SendMail} SendMail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMail.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SendMail message.
             * @function verify
             * @memberof hall.SendMail
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendMail.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    if (!$util.isInteger(message.senderId))
                        return "senderId: integer expected";
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    if (!$util.isString(message.senderName))
                        return "senderName: string expected";
                if (message.awards != null && message.hasOwnProperty("awards")) {
                    if (!Array.isArray(message.awards))
                        return "awards: array expected";
                    for (var i = 0; i < message.awards.length; ++i)
                        if (!$util.isInteger(message.awards[i]))
                            return "awards: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a SendMail message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SendMail
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SendMail} SendMail
             */
            SendMail.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SendMail)
                    return object;
                var message = new $root.hall.SendMail();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.content != null)
                    message.content = String(object.content);
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.senderId != null)
                    message.senderId = object.senderId >>> 0;
                if (object.senderName != null)
                    message.senderName = String(object.senderName);
                if (object.awards) {
                    if (!Array.isArray(object.awards))
                        throw TypeError(".hall.SendMail.awards: array expected");
                    message.awards = [];
                    for (var i = 0; i < object.awards.length; ++i)
                        message.awards[i] = object.awards[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SendMail message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SendMail
             * @static
             * @param {hall.SendMail} message SendMail
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendMail.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.awards = [];
                if (options.defaults) {
                    object.uid = 0;
                    object.type = 0;
                    object.title = "";
                    object.content = "";
                    object.time = 0;
                    object.senderId = 0;
                    object.senderName = "";
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.senderId != null && message.hasOwnProperty("senderId"))
                    object.senderId = message.senderId;
                if (message.senderName != null && message.hasOwnProperty("senderName"))
                    object.senderName = message.senderName;
                if (message.awards && message.awards.length) {
                    object.awards = [];
                    for (var j = 0; j < message.awards.length; ++j)
                        object.awards[j] = message.awards[j];
                }
                return object;
            };
    
            /**
             * Converts this SendMail to JSON.
             * @function toJSON
             * @memberof hall.SendMail
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendMail.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SendMail;
        })();
    
        hall.SendMailReq = (function() {
    
            /**
             * Properties of a SendMailReq.
             * @memberof hall
             * @interface ISendMailReq
             * @property {common.IRequest} request SendMailReq request
             * @property {string|null} [password] SendMailReq password
             * @property {hall.ISendMail|null} [mail] SendMailReq mail
             */
    
            /**
             * Constructs a new SendMailReq.
             * @memberof hall
             * @classdesc Represents a SendMailReq.
             * @implements ISendMailReq
             * @constructor
             * @param {hall.ISendMailReq=} [properties] Properties to set
             */
            function SendMailReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SendMailReq request.
             * @member {common.IRequest} request
             * @memberof hall.SendMailReq
             * @instance
             */
            SendMailReq.prototype.request = null;
    
            /**
             * SendMailReq password.
             * @member {string} password
             * @memberof hall.SendMailReq
             * @instance
             */
            SendMailReq.prototype.password = "";
    
            /**
             * SendMailReq mail.
             * @member {hall.ISendMail|null|undefined} mail
             * @memberof hall.SendMailReq
             * @instance
             */
            SendMailReq.prototype.mail = null;
    
            /**
             * Creates a new SendMailReq instance using the specified properties.
             * @function create
             * @memberof hall.SendMailReq
             * @static
             * @param {hall.ISendMailReq=} [properties] Properties to set
             * @returns {hall.SendMailReq} SendMailReq instance
             */
            SendMailReq.create = function create(properties) {
                return new SendMailReq(properties);
            };
    
            /**
             * Encodes the specified SendMailReq message. Does not implicitly {@link hall.SendMailReq.verify|verify} messages.
             * @function encode
             * @memberof hall.SendMailReq
             * @static
             * @param {hall.ISendMailReq} message SendMailReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMailReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.password != null && message.hasOwnProperty("password"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                if (message.mail != null && message.hasOwnProperty("mail"))
                    $root.hall.SendMail.encode(message.mail, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SendMailReq message, length delimited. Does not implicitly {@link hall.SendMailReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SendMailReq
             * @static
             * @param {hall.ISendMailReq} message SendMailReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMailReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SendMailReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SendMailReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SendMailReq} SendMailReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMailReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SendMailReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.password = reader.string();
                        break;
                    case 3:
                        message.mail = $root.hall.SendMail.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SendMailReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SendMailReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SendMailReq} SendMailReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMailReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SendMailReq message.
             * @function verify
             * @memberof hall.SendMailReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendMailReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.password != null && message.hasOwnProperty("password"))
                    if (!$util.isString(message.password))
                        return "password: string expected";
                if (message.mail != null && message.hasOwnProperty("mail")) {
                    var error = $root.hall.SendMail.verify(message.mail);
                    if (error)
                        return "mail." + error;
                }
                return null;
            };
    
            /**
             * Creates a SendMailReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SendMailReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SendMailReq} SendMailReq
             */
            SendMailReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SendMailReq)
                    return object;
                var message = new $root.hall.SendMailReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.SendMailReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.password != null)
                    message.password = String(object.password);
                if (object.mail != null) {
                    if (typeof object.mail !== "object")
                        throw TypeError(".hall.SendMailReq.mail: object expected");
                    message.mail = $root.hall.SendMail.fromObject(object.mail);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SendMailReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SendMailReq
             * @static
             * @param {hall.SendMailReq} message SendMailReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendMailReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.password = "";
                    object.mail = null;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.password != null && message.hasOwnProperty("password"))
                    object.password = message.password;
                if (message.mail != null && message.hasOwnProperty("mail"))
                    object.mail = $root.hall.SendMail.toObject(message.mail, options);
                return object;
            };
    
            /**
             * Converts this SendMailReq to JSON.
             * @function toJSON
             * @memberof hall.SendMailReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendMailReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SendMailReq;
        })();
    
        hall.SendMailRsp = (function() {
    
            /**
             * Properties of a SendMailRsp.
             * @memberof hall
             * @interface ISendMailRsp
             * @property {common.IResult} result SendMailRsp result
             */
    
            /**
             * Constructs a new SendMailRsp.
             * @memberof hall
             * @classdesc Represents a SendMailRsp.
             * @implements ISendMailRsp
             * @constructor
             * @param {hall.ISendMailRsp=} [properties] Properties to set
             */
            function SendMailRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SendMailRsp result.
             * @member {common.IResult} result
             * @memberof hall.SendMailRsp
             * @instance
             */
            SendMailRsp.prototype.result = null;
    
            /**
             * Creates a new SendMailRsp instance using the specified properties.
             * @function create
             * @memberof hall.SendMailRsp
             * @static
             * @param {hall.ISendMailRsp=} [properties] Properties to set
             * @returns {hall.SendMailRsp} SendMailRsp instance
             */
            SendMailRsp.create = function create(properties) {
                return new SendMailRsp(properties);
            };
    
            /**
             * Encodes the specified SendMailRsp message. Does not implicitly {@link hall.SendMailRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.SendMailRsp
             * @static
             * @param {hall.ISendMailRsp} message SendMailRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMailRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified SendMailRsp message, length delimited. Does not implicitly {@link hall.SendMailRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.SendMailRsp
             * @static
             * @param {hall.ISendMailRsp} message SendMailRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendMailRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SendMailRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.SendMailRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.SendMailRsp} SendMailRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMailRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.SendMailRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("result"))
                    throw $util.ProtocolError("missing required 'result'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SendMailRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.SendMailRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.SendMailRsp} SendMailRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendMailRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SendMailRsp message.
             * @function verify
             * @memberof hall.SendMailRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendMailRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a SendMailRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.SendMailRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.SendMailRsp} SendMailRsp
             */
            SendMailRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.SendMailRsp)
                    return object;
                var message = new $root.hall.SendMailRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.SendMailRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a SendMailRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.SendMailRsp
             * @static
             * @param {hall.SendMailRsp} message SendMailRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendMailRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this SendMailRsp to JSON.
             * @function toJSON
             * @memberof hall.SendMailRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendMailRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SendMailRsp;
        })();
    
        hall.BuildConfigsReq = (function() {
    
            /**
             * Properties of a BuildConfigsReq.
             * @memberof hall
             * @interface IBuildConfigsReq
             * @property {common.IRequest|null} [request] BuildConfigsReq request
             * @property {Array.<number>|null} [gameTypes] BuildConfigsReq gameTypes
             */
    
            /**
             * Constructs a new BuildConfigsReq.
             * @memberof hall
             * @classdesc Represents a BuildConfigsReq.
             * @implements IBuildConfigsReq
             * @constructor
             * @param {hall.IBuildConfigsReq=} [properties] Properties to set
             */
            function BuildConfigsReq(properties) {
                this.gameTypes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildConfigsReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.BuildConfigsReq
             * @instance
             */
            BuildConfigsReq.prototype.request = null;
    
            /**
             * BuildConfigsReq gameTypes.
             * @member {Array.<number>} gameTypes
             * @memberof hall.BuildConfigsReq
             * @instance
             */
            BuildConfigsReq.prototype.gameTypes = $util.emptyArray;
    
            /**
             * Creates a new BuildConfigsReq instance using the specified properties.
             * @function create
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {hall.IBuildConfigsReq=} [properties] Properties to set
             * @returns {hall.BuildConfigsReq} BuildConfigsReq instance
             */
            BuildConfigsReq.create = function create(properties) {
                return new BuildConfigsReq(properties);
            };
    
            /**
             * Encodes the specified BuildConfigsReq message. Does not implicitly {@link hall.BuildConfigsReq.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {hall.IBuildConfigsReq} message BuildConfigsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameTypes != null && message.gameTypes.length)
                    for (var i = 0; i < message.gameTypes.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameTypes[i]);
                return writer;
            };
    
            /**
             * Encodes the specified BuildConfigsReq message, length delimited. Does not implicitly {@link hall.BuildConfigsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {hall.IBuildConfigsReq} message BuildConfigsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildConfigsReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildConfigsReq} BuildConfigsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildConfigsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.gameTypes && message.gameTypes.length))
                            message.gameTypes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.gameTypes.push(reader.uint32());
                        } else
                            message.gameTypes.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildConfigsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildConfigsReq} BuildConfigsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildConfigsReq message.
             * @function verify
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildConfigsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameTypes != null && message.hasOwnProperty("gameTypes")) {
                    if (!Array.isArray(message.gameTypes))
                        return "gameTypes: array expected";
                    for (var i = 0; i < message.gameTypes.length; ++i)
                        if (!$util.isInteger(message.gameTypes[i]))
                            return "gameTypes: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a BuildConfigsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildConfigsReq} BuildConfigsReq
             */
            BuildConfigsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildConfigsReq)
                    return object;
                var message = new $root.hall.BuildConfigsReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.BuildConfigsReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameTypes) {
                    if (!Array.isArray(object.gameTypes))
                        throw TypeError(".hall.BuildConfigsReq.gameTypes: array expected");
                    message.gameTypes = [];
                    for (var i = 0; i < object.gameTypes.length; ++i)
                        message.gameTypes[i] = object.gameTypes[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BuildConfigsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildConfigsReq
             * @static
             * @param {hall.BuildConfigsReq} message BuildConfigsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildConfigsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.gameTypes = [];
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameTypes && message.gameTypes.length) {
                    object.gameTypes = [];
                    for (var j = 0; j < message.gameTypes.length; ++j)
                        object.gameTypes[j] = message.gameTypes[j];
                }
                return object;
            };
    
            /**
             * Converts this BuildConfigsReq to JSON.
             * @function toJSON
             * @memberof hall.BuildConfigsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildConfigsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildConfigsReq;
        })();
    
        hall.BuildInfo = (function() {
    
            /**
             * Properties of a BuildInfo.
             * @memberof hall
             * @interface IBuildInfo
             * @property {number|null} [round] BuildInfo round
             * @property {number|null} [diamond] BuildInfo diamond
             * @property {string|null} [buildJson] BuildInfo buildJson
             * @property {number|null} [gameType] BuildInfo gameType
             * @property {boolean|null} [agent] BuildInfo agent
             * @property {number|null} [maxTurn] BuildInfo maxTurn
             * @property {number|null} [clubCard] BuildInfo clubCard
             */
    
            /**
             * Constructs a new BuildInfo.
             * @memberof hall
             * @classdesc Represents a BuildInfo.
             * @implements IBuildInfo
             * @constructor
             * @param {hall.IBuildInfo=} [properties] Properties to set
             */
            function BuildInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildInfo round.
             * @member {number} round
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.round = 0;
    
            /**
             * BuildInfo diamond.
             * @member {number} diamond
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.diamond = 0;
    
            /**
             * BuildInfo buildJson.
             * @member {string} buildJson
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.buildJson = "";
    
            /**
             * BuildInfo gameType.
             * @member {number} gameType
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.gameType = 0;
    
            /**
             * BuildInfo agent.
             * @member {boolean} agent
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.agent = false;
    
            /**
             * BuildInfo maxTurn.
             * @member {number} maxTurn
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.maxTurn = 0;
    
            /**
             * BuildInfo clubCard.
             * @member {number} clubCard
             * @memberof hall.BuildInfo
             * @instance
             */
            BuildInfo.prototype.clubCard = 0;
    
            /**
             * Creates a new BuildInfo instance using the specified properties.
             * @function create
             * @memberof hall.BuildInfo
             * @static
             * @param {hall.IBuildInfo=} [properties] Properties to set
             * @returns {hall.BuildInfo} BuildInfo instance
             */
            BuildInfo.create = function create(properties) {
                return new BuildInfo(properties);
            };
    
            /**
             * Encodes the specified BuildInfo message. Does not implicitly {@link hall.BuildInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildInfo
             * @static
             * @param {hall.IBuildInfo} message BuildInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.round);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.diamond);
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.buildJson);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameType);
                if (message.agent != null && message.hasOwnProperty("agent"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.agent);
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.maxTurn);
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clubCard);
                return writer;
            };
    
            /**
             * Encodes the specified BuildInfo message, length delimited. Does not implicitly {@link hall.BuildInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildInfo
             * @static
             * @param {hall.IBuildInfo} message BuildInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildInfo} BuildInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.uint32();
                        break;
                    case 2:
                        message.diamond = reader.uint32();
                        break;
                    case 3:
                        message.buildJson = reader.string();
                        break;
                    case 4:
                        message.gameType = reader.uint32();
                        break;
                    case 5:
                        message.agent = reader.bool();
                        break;
                    case 6:
                        message.maxTurn = reader.uint32();
                        break;
                    case 7:
                        message.clubCard = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildInfo} BuildInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildInfo message.
             * @function verify
             * @memberof hall.BuildInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond))
                        return "diamond: integer expected";
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    if (!$util.isString(message.buildJson))
                        return "buildJson: string expected";
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.agent != null && message.hasOwnProperty("agent"))
                    if (typeof message.agent !== "boolean")
                        return "agent: boolean expected";
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    if (!$util.isInteger(message.maxTurn))
                        return "maxTurn: integer expected";
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    if (!$util.isInteger(message.clubCard))
                        return "clubCard: integer expected";
                return null;
            };
    
            /**
             * Creates a BuildInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildInfo} BuildInfo
             */
            BuildInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildInfo)
                    return object;
                var message = new $root.hall.BuildInfo();
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.diamond != null)
                    message.diamond = object.diamond >>> 0;
                if (object.buildJson != null)
                    message.buildJson = String(object.buildJson);
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.agent != null)
                    message.agent = Boolean(object.agent);
                if (object.maxTurn != null)
                    message.maxTurn = object.maxTurn >>> 0;
                if (object.clubCard != null)
                    message.clubCard = object.clubCard >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BuildInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildInfo
             * @static
             * @param {hall.BuildInfo} message BuildInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.round = 0;
                    object.diamond = 0;
                    object.buildJson = "";
                    object.gameType = 0;
                    object.agent = false;
                    object.maxTurn = 0;
                    object.clubCard = 0;
                }
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    object.diamond = message.diamond;
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    object.buildJson = message.buildJson;
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.agent != null && message.hasOwnProperty("agent"))
                    object.agent = message.agent;
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    object.maxTurn = message.maxTurn;
                if (message.clubCard != null && message.hasOwnProperty("clubCard"))
                    object.clubCard = message.clubCard;
                return object;
            };
    
            /**
             * Converts this BuildInfo to JSON.
             * @function toJSON
             * @memberof hall.BuildInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildInfo;
        })();
    
        hall.BuildConfig = (function() {
    
            /**
             * Properties of a BuildConfig.
             * @memberof hall
             * @interface IBuildConfig
             * @property {number|null} [gameType] BuildConfig gameType
             * @property {Array.<hall.IBuildInfo>|null} [buildInfos] BuildConfig buildInfos
             * @property {boolean|null} [AA] BuildConfig AA
             * @property {string|null} [buildJson] BuildConfig buildJson
             */
    
            /**
             * Constructs a new BuildConfig.
             * @memberof hall
             * @classdesc Represents a BuildConfig.
             * @implements IBuildConfig
             * @constructor
             * @param {hall.IBuildConfig=} [properties] Properties to set
             */
            function BuildConfig(properties) {
                this.buildInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildConfig gameType.
             * @member {number} gameType
             * @memberof hall.BuildConfig
             * @instance
             */
            BuildConfig.prototype.gameType = 0;
    
            /**
             * BuildConfig buildInfos.
             * @member {Array.<hall.IBuildInfo>} buildInfos
             * @memberof hall.BuildConfig
             * @instance
             */
            BuildConfig.prototype.buildInfos = $util.emptyArray;
    
            /**
             * BuildConfig AA.
             * @member {boolean} AA
             * @memberof hall.BuildConfig
             * @instance
             */
            BuildConfig.prototype.AA = false;
    
            /**
             * BuildConfig buildJson.
             * @member {string} buildJson
             * @memberof hall.BuildConfig
             * @instance
             */
            BuildConfig.prototype.buildJson = "";
    
            /**
             * Creates a new BuildConfig instance using the specified properties.
             * @function create
             * @memberof hall.BuildConfig
             * @static
             * @param {hall.IBuildConfig=} [properties] Properties to set
             * @returns {hall.BuildConfig} BuildConfig instance
             */
            BuildConfig.create = function create(properties) {
                return new BuildConfig(properties);
            };
    
            /**
             * Encodes the specified BuildConfig message. Does not implicitly {@link hall.BuildConfig.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildConfig
             * @static
             * @param {hall.IBuildConfig} message BuildConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameType);
                if (message.buildInfos != null && message.buildInfos.length)
                    for (var i = 0; i < message.buildInfos.length; ++i)
                        $root.hall.BuildInfo.encode(message.buildInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.AA);
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.buildJson);
                return writer;
            };
    
            /**
             * Encodes the specified BuildConfig message, length delimited. Does not implicitly {@link hall.BuildConfig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildConfig
             * @static
             * @param {hall.IBuildConfig} message BuildConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildConfig message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildConfig} BuildConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildConfig();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameType = reader.uint32();
                        break;
                    case 2:
                        if (!(message.buildInfos && message.buildInfos.length))
                            message.buildInfos = [];
                        message.buildInfos.push($root.hall.BuildInfo.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.AA = reader.bool();
                        break;
                    case 4:
                        message.buildJson = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildConfig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildConfig} BuildConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildConfig message.
             * @function verify
             * @memberof hall.BuildConfig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildConfig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.buildInfos != null && message.hasOwnProperty("buildInfos")) {
                    if (!Array.isArray(message.buildInfos))
                        return "buildInfos: array expected";
                    for (var i = 0; i < message.buildInfos.length; ++i) {
                        var error = $root.hall.BuildInfo.verify(message.buildInfos[i]);
                        if (error)
                            return "buildInfos." + error;
                    }
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    if (!$util.isString(message.buildJson))
                        return "buildJson: string expected";
                return null;
            };
    
            /**
             * Creates a BuildConfig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildConfig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildConfig} BuildConfig
             */
            BuildConfig.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildConfig)
                    return object;
                var message = new $root.hall.BuildConfig();
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.buildInfos) {
                    if (!Array.isArray(object.buildInfos))
                        throw TypeError(".hall.BuildConfig.buildInfos: array expected");
                    message.buildInfos = [];
                    for (var i = 0; i < object.buildInfos.length; ++i) {
                        if (typeof object.buildInfos[i] !== "object")
                            throw TypeError(".hall.BuildConfig.buildInfos: object expected");
                        message.buildInfos[i] = $root.hall.BuildInfo.fromObject(object.buildInfos[i]);
                    }
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                if (object.buildJson != null)
                    message.buildJson = String(object.buildJson);
                return message;
            };
    
            /**
             * Creates a plain object from a BuildConfig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildConfig
             * @static
             * @param {hall.BuildConfig} message BuildConfig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildConfig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.buildInfos = [];
                if (options.defaults) {
                    object.gameType = 0;
                    object.AA = false;
                    object.buildJson = "";
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.buildInfos && message.buildInfos.length) {
                    object.buildInfos = [];
                    for (var j = 0; j < message.buildInfos.length; ++j)
                        object.buildInfos[j] = $root.hall.BuildInfo.toObject(message.buildInfos[j], options);
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    object.buildJson = message.buildJson;
                return object;
            };
    
            /**
             * Converts this BuildConfig to JSON.
             * @function toJSON
             * @memberof hall.BuildConfig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildConfig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildConfig;
        })();
    
        hall.BuildConfigsRsp = (function() {
    
            /**
             * Properties of a BuildConfigsRsp.
             * @memberof hall
             * @interface IBuildConfigsRsp
             * @property {common.IResult|null} [result] BuildConfigsRsp result
             * @property {Array.<hall.IBuildConfig>|null} [configs] BuildConfigsRsp configs
             */
    
            /**
             * Constructs a new BuildConfigsRsp.
             * @memberof hall
             * @classdesc Represents a BuildConfigsRsp.
             * @implements IBuildConfigsRsp
             * @constructor
             * @param {hall.IBuildConfigsRsp=} [properties] Properties to set
             */
            function BuildConfigsRsp(properties) {
                this.configs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildConfigsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.BuildConfigsRsp
             * @instance
             */
            BuildConfigsRsp.prototype.result = null;
    
            /**
             * BuildConfigsRsp configs.
             * @member {Array.<hall.IBuildConfig>} configs
             * @memberof hall.BuildConfigsRsp
             * @instance
             */
            BuildConfigsRsp.prototype.configs = $util.emptyArray;
    
            /**
             * Creates a new BuildConfigsRsp instance using the specified properties.
             * @function create
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {hall.IBuildConfigsRsp=} [properties] Properties to set
             * @returns {hall.BuildConfigsRsp} BuildConfigsRsp instance
             */
            BuildConfigsRsp.create = function create(properties) {
                return new BuildConfigsRsp(properties);
            };
    
            /**
             * Encodes the specified BuildConfigsRsp message. Does not implicitly {@link hall.BuildConfigsRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {hall.IBuildConfigsRsp} message BuildConfigsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.configs != null && message.configs.length)
                    for (var i = 0; i < message.configs.length; ++i)
                        $root.hall.BuildConfig.encode(message.configs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BuildConfigsRsp message, length delimited. Does not implicitly {@link hall.BuildConfigsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {hall.IBuildConfigsRsp} message BuildConfigsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildConfigsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildConfigsRsp} BuildConfigsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildConfigsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.configs && message.configs.length))
                            message.configs = [];
                        message.configs.push($root.hall.BuildConfig.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildConfigsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildConfigsRsp} BuildConfigsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildConfigsRsp message.
             * @function verify
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildConfigsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.configs != null && message.hasOwnProperty("configs")) {
                    if (!Array.isArray(message.configs))
                        return "configs: array expected";
                    for (var i = 0; i < message.configs.length; ++i) {
                        var error = $root.hall.BuildConfig.verify(message.configs[i]);
                        if (error)
                            return "configs." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a BuildConfigsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildConfigsRsp} BuildConfigsRsp
             */
            BuildConfigsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildConfigsRsp)
                    return object;
                var message = new $root.hall.BuildConfigsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.BuildConfigsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.configs) {
                    if (!Array.isArray(object.configs))
                        throw TypeError(".hall.BuildConfigsRsp.configs: array expected");
                    message.configs = [];
                    for (var i = 0; i < object.configs.length; ++i) {
                        if (typeof object.configs[i] !== "object")
                            throw TypeError(".hall.BuildConfigsRsp.configs: object expected");
                        message.configs[i] = $root.hall.BuildConfig.fromObject(object.configs[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BuildConfigsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildConfigsRsp
             * @static
             * @param {hall.BuildConfigsRsp} message BuildConfigsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildConfigsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.configs = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.configs && message.configs.length) {
                    object.configs = [];
                    for (var j = 0; j < message.configs.length; ++j)
                        object.configs[j] = $root.hall.BuildConfig.toObject(message.configs[j], options);
                }
                return object;
            };
    
            /**
             * Converts this BuildConfigsRsp to JSON.
             * @function toJSON
             * @memberof hall.BuildConfigsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildConfigsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildConfigsRsp;
        })();
    
        hall.PointsReq = (function() {
    
            /**
             * Properties of a PointsReq.
             * @memberof hall
             * @interface IPointsReq
             * @property {common.IRequest|null} [request] PointsReq request
             * @property {number|null} [gameType] PointsReq gameType
             * @property {number|null} [start] PointsReq start
             * @property {number|null} [max] PointsReq max
             * @property {boolean|null} [needTodayPoints] PointsReq needTodayPoints
             * @property {number|null} [clubId] PointsReq clubId
             * @property {number|null} [userID] PointsReq userID
             */
    
            /**
             * Constructs a new PointsReq.
             * @memberof hall
             * @classdesc Represents a PointsReq.
             * @implements IPointsReq
             * @constructor
             * @param {hall.IPointsReq=} [properties] Properties to set
             */
            function PointsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.request = null;
    
            /**
             * PointsReq gameType.
             * @member {number} gameType
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.gameType = 0;
    
            /**
             * PointsReq start.
             * @member {number} start
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.start = 0;
    
            /**
             * PointsReq max.
             * @member {number} max
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.max = 0;
    
            /**
             * PointsReq needTodayPoints.
             * @member {boolean} needTodayPoints
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.needTodayPoints = false;
    
            /**
             * PointsReq clubId.
             * @member {number} clubId
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.clubId = 0;
    
            /**
             * PointsReq userID.
             * @member {number} userID
             * @memberof hall.PointsReq
             * @instance
             */
            PointsReq.prototype.userID = 0;
    
            /**
             * Creates a new PointsReq instance using the specified properties.
             * @function create
             * @memberof hall.PointsReq
             * @static
             * @param {hall.IPointsReq=} [properties] Properties to set
             * @returns {hall.PointsReq} PointsReq instance
             */
            PointsReq.create = function create(properties) {
                return new PointsReq(properties);
            };
    
            /**
             * Encodes the specified PointsReq message. Does not implicitly {@link hall.PointsReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsReq
             * @static
             * @param {hall.IPointsReq} message PointsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameType);
                if (message.start != null && message.hasOwnProperty("start"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.start);
                if (message.max != null && message.hasOwnProperty("max"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.max);
                if (message.needTodayPoints != null && message.hasOwnProperty("needTodayPoints"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.needTodayPoints);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.clubId);
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.userID);
                return writer;
            };
    
            /**
             * Encodes the specified PointsReq message, length delimited. Does not implicitly {@link hall.PointsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsReq
             * @static
             * @param {hall.IPointsReq} message PointsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsReq} PointsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameType = reader.uint32();
                        break;
                    case 3:
                        message.start = reader.uint32();
                        break;
                    case 4:
                        message.max = reader.uint32();
                        break;
                    case 5:
                        message.needTodayPoints = reader.bool();
                        break;
                    case 6:
                        message.clubId = reader.int32();
                        break;
                    case 7:
                        message.userID = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsReq} PointsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsReq message.
             * @function verify
             * @memberof hall.PointsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.start != null && message.hasOwnProperty("start"))
                    if (!$util.isInteger(message.start))
                        return "start: integer expected";
                if (message.max != null && message.hasOwnProperty("max"))
                    if (!$util.isInteger(message.max))
                        return "max: integer expected";
                if (message.needTodayPoints != null && message.hasOwnProperty("needTodayPoints"))
                    if (typeof message.needTodayPoints !== "boolean")
                        return "needTodayPoints: boolean expected";
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID))
                        return "userID: integer expected";
                return null;
            };
    
            /**
             * Creates a PointsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsReq} PointsReq
             */
            PointsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsReq)
                    return object;
                var message = new $root.hall.PointsReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PointsReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.start != null)
                    message.start = object.start >>> 0;
                if (object.max != null)
                    message.max = object.max >>> 0;
                if (object.needTodayPoints != null)
                    message.needTodayPoints = Boolean(object.needTodayPoints);
                if (object.clubId != null)
                    message.clubId = object.clubId | 0;
                if (object.userID != null)
                    message.userID = object.userID | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PointsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsReq
             * @static
             * @param {hall.PointsReq} message PointsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.gameType = 0;
                    object.start = 0;
                    object.max = 0;
                    object.needTodayPoints = false;
                    object.clubId = 0;
                    object.userID = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.start != null && message.hasOwnProperty("start"))
                    object.start = message.start;
                if (message.max != null && message.hasOwnProperty("max"))
                    object.max = message.max;
                if (message.needTodayPoints != null && message.hasOwnProperty("needTodayPoints"))
                    object.needTodayPoints = message.needTodayPoints;
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    object.userID = message.userID;
                return object;
            };
    
            /**
             * Converts this PointsReq to JSON.
             * @function toJSON
             * @memberof hall.PointsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsReq;
        })();
    
        hall.PointsInfo = (function() {
    
            /**
             * Properties of a PointsInfo.
             * @memberof hall
             * @interface IPointsInfo
             * @property {number|null} [code] PointsInfo code
             * @property {number|null} [masterId] PointsInfo masterId
             * @property {number|null} [time] PointsInfo time
             * @property {number|null} [round] PointsInfo round
             * @property {number|null} [points] PointsInfo points
             * @property {Array.<hall.IPointsDetail>|null} [pointsDetails] PointsInfo pointsDetails
             * @property {number|null} [viewed] PointsInfo viewed
             * @property {number|null} [gameType] PointsInfo gameType
             */
    
            /**
             * Constructs a new PointsInfo.
             * @memberof hall
             * @classdesc Represents a PointsInfo.
             * @implements IPointsInfo
             * @constructor
             * @param {hall.IPointsInfo=} [properties] Properties to set
             */
            function PointsInfo(properties) {
                this.pointsDetails = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsInfo code.
             * @member {number} code
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.code = 0;
    
            /**
             * PointsInfo masterId.
             * @member {number} masterId
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.masterId = 0;
    
            /**
             * PointsInfo time.
             * @member {number} time
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.time = 0;
    
            /**
             * PointsInfo round.
             * @member {number} round
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.round = 0;
    
            /**
             * PointsInfo points.
             * @member {number} points
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.points = 0;
    
            /**
             * PointsInfo pointsDetails.
             * @member {Array.<hall.IPointsDetail>} pointsDetails
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.pointsDetails = $util.emptyArray;
    
            /**
             * PointsInfo viewed.
             * @member {number} viewed
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.viewed = 0;
    
            /**
             * PointsInfo gameType.
             * @member {number} gameType
             * @memberof hall.PointsInfo
             * @instance
             */
            PointsInfo.prototype.gameType = 0;
    
            /**
             * Creates a new PointsInfo instance using the specified properties.
             * @function create
             * @memberof hall.PointsInfo
             * @static
             * @param {hall.IPointsInfo=} [properties] Properties to set
             * @returns {hall.PointsInfo} PointsInfo instance
             */
            PointsInfo.create = function create(properties) {
                return new PointsInfo(properties);
            };
    
            /**
             * Encodes the specified PointsInfo message. Does not implicitly {@link hall.PointsInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsInfo
             * @static
             * @param {hall.IPointsInfo} message PointsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.masterId);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.round);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.points);
                if (message.pointsDetails != null && message.pointsDetails.length)
                    for (var i = 0; i < message.pointsDetails.length; ++i)
                        $root.hall.PointsDetail.encode(message.pointsDetails[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.viewed != null && message.hasOwnProperty("viewed"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.viewed);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.gameType);
                return writer;
            };
    
            /**
             * Encodes the specified PointsInfo message, length delimited. Does not implicitly {@link hall.PointsInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsInfo
             * @static
             * @param {hall.IPointsInfo} message PointsInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsInfo} PointsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.masterId = reader.uint32();
                        break;
                    case 3:
                        message.time = reader.uint32();
                        break;
                    case 4:
                        message.round = reader.uint32();
                        break;
                    case 5:
                        message.points = reader.int32();
                        break;
                    case 6:
                        if (!(message.pointsDetails && message.pointsDetails.length))
                            message.pointsDetails = [];
                        message.pointsDetails.push($root.hall.PointsDetail.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.viewed = reader.int32();
                        break;
                    case 8:
                        message.gameType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsInfo} PointsInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsInfo message.
             * @function verify
             * @memberof hall.PointsInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    if (!$util.isInteger(message.masterId))
                        return "masterId: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.pointsDetails != null && message.hasOwnProperty("pointsDetails")) {
                    if (!Array.isArray(message.pointsDetails))
                        return "pointsDetails: array expected";
                    for (var i = 0; i < message.pointsDetails.length; ++i) {
                        var error = $root.hall.PointsDetail.verify(message.pointsDetails[i]);
                        if (error)
                            return "pointsDetails." + error;
                    }
                }
                if (message.viewed != null && message.hasOwnProperty("viewed"))
                    if (!$util.isInteger(message.viewed))
                        return "viewed: integer expected";
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                return null;
            };
    
            /**
             * Creates a PointsInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsInfo} PointsInfo
             */
            PointsInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsInfo)
                    return object;
                var message = new $root.hall.PointsInfo();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.masterId != null)
                    message.masterId = object.masterId >>> 0;
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.pointsDetails) {
                    if (!Array.isArray(object.pointsDetails))
                        throw TypeError(".hall.PointsInfo.pointsDetails: array expected");
                    message.pointsDetails = [];
                    for (var i = 0; i < object.pointsDetails.length; ++i) {
                        if (typeof object.pointsDetails[i] !== "object")
                            throw TypeError(".hall.PointsInfo.pointsDetails: object expected");
                        message.pointsDetails[i] = $root.hall.PointsDetail.fromObject(object.pointsDetails[i]);
                    }
                }
                if (object.viewed != null)
                    message.viewed = object.viewed | 0;
                if (object.gameType != null)
                    message.gameType = object.gameType | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PointsInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsInfo
             * @static
             * @param {hall.PointsInfo} message PointsInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pointsDetails = [];
                if (options.defaults) {
                    object.code = 0;
                    object.masterId = 0;
                    object.time = 0;
                    object.round = 0;
                    object.points = 0;
                    object.viewed = 0;
                    object.gameType = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    object.masterId = message.masterId;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.pointsDetails && message.pointsDetails.length) {
                    object.pointsDetails = [];
                    for (var j = 0; j < message.pointsDetails.length; ++j)
                        object.pointsDetails[j] = $root.hall.PointsDetail.toObject(message.pointsDetails[j], options);
                }
                if (message.viewed != null && message.hasOwnProperty("viewed"))
                    object.viewed = message.viewed;
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                return object;
            };
    
            /**
             * Converts this PointsInfo to JSON.
             * @function toJSON
             * @memberof hall.PointsInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsInfo;
        })();
    
        hall.PointsRsp = (function() {
    
            /**
             * Properties of a PointsRsp.
             * @memberof hall
             * @interface IPointsRsp
             * @property {common.IResult|null} [result] PointsRsp result
             * @property {number|null} [gameType] PointsRsp gameType
             * @property {Array.<hall.IPointsInfo>|null} [pointsInfos] PointsRsp pointsInfos
             * @property {number|null} [todayPoints] PointsRsp todayPoints
             * @property {number|null} [totalPoints] PointsRsp totalPoints
             * @property {number|null} [totalRecordCount] PointsRsp totalRecordCount
             */
    
            /**
             * Constructs a new PointsRsp.
             * @memberof hall
             * @classdesc Represents a PointsRsp.
             * @implements IPointsRsp
             * @constructor
             * @param {hall.IPointsRsp=} [properties] Properties to set
             */
            function PointsRsp(properties) {
                this.pointsInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.result = null;
    
            /**
             * PointsRsp gameType.
             * @member {number} gameType
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.gameType = 0;
    
            /**
             * PointsRsp pointsInfos.
             * @member {Array.<hall.IPointsInfo>} pointsInfos
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.pointsInfos = $util.emptyArray;
    
            /**
             * PointsRsp todayPoints.
             * @member {number} todayPoints
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.todayPoints = 0;
    
            /**
             * PointsRsp totalPoints.
             * @member {number} totalPoints
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.totalPoints = 0;
    
            /**
             * PointsRsp totalRecordCount.
             * @member {number} totalRecordCount
             * @memberof hall.PointsRsp
             * @instance
             */
            PointsRsp.prototype.totalRecordCount = 0;
    
            /**
             * Creates a new PointsRsp instance using the specified properties.
             * @function create
             * @memberof hall.PointsRsp
             * @static
             * @param {hall.IPointsRsp=} [properties] Properties to set
             * @returns {hall.PointsRsp} PointsRsp instance
             */
            PointsRsp.create = function create(properties) {
                return new PointsRsp(properties);
            };
    
            /**
             * Encodes the specified PointsRsp message. Does not implicitly {@link hall.PointsRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsRsp
             * @static
             * @param {hall.IPointsRsp} message PointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameType);
                if (message.pointsInfos != null && message.pointsInfos.length)
                    for (var i = 0; i < message.pointsInfos.length; ++i)
                        $root.hall.PointsInfo.encode(message.pointsInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.todayPoints);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.totalPoints);
                if (message.totalRecordCount != null && message.hasOwnProperty("totalRecordCount"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.totalRecordCount);
                return writer;
            };
    
            /**
             * Encodes the specified PointsRsp message, length delimited. Does not implicitly {@link hall.PointsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsRsp
             * @static
             * @param {hall.IPointsRsp} message PointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsRsp} PointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameType = reader.uint32();
                        break;
                    case 3:
                        if (!(message.pointsInfos && message.pointsInfos.length))
                            message.pointsInfos = [];
                        message.pointsInfos.push($root.hall.PointsInfo.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.todayPoints = reader.int32();
                        break;
                    case 5:
                        message.totalPoints = reader.int32();
                        break;
                    case 7:
                        message.totalRecordCount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsRsp} PointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsRsp message.
             * @function verify
             * @memberof hall.PointsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.pointsInfos != null && message.hasOwnProperty("pointsInfos")) {
                    if (!Array.isArray(message.pointsInfos))
                        return "pointsInfos: array expected";
                    for (var i = 0; i < message.pointsInfos.length; ++i) {
                        var error = $root.hall.PointsInfo.verify(message.pointsInfos[i]);
                        if (error)
                            return "pointsInfos." + error;
                    }
                }
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    if (!$util.isInteger(message.todayPoints))
                        return "todayPoints: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                if (message.totalRecordCount != null && message.hasOwnProperty("totalRecordCount"))
                    if (!$util.isInteger(message.totalRecordCount))
                        return "totalRecordCount: integer expected";
                return null;
            };
    
            /**
             * Creates a PointsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsRsp} PointsRsp
             */
            PointsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsRsp)
                    return object;
                var message = new $root.hall.PointsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PointsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.pointsInfos) {
                    if (!Array.isArray(object.pointsInfos))
                        throw TypeError(".hall.PointsRsp.pointsInfos: array expected");
                    message.pointsInfos = [];
                    for (var i = 0; i < object.pointsInfos.length; ++i) {
                        if (typeof object.pointsInfos[i] !== "object")
                            throw TypeError(".hall.PointsRsp.pointsInfos: object expected");
                        message.pointsInfos[i] = $root.hall.PointsInfo.fromObject(object.pointsInfos[i]);
                    }
                }
                if (object.todayPoints != null)
                    message.todayPoints = object.todayPoints | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                if (object.totalRecordCount != null)
                    message.totalRecordCount = object.totalRecordCount | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PointsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsRsp
             * @static
             * @param {hall.PointsRsp} message PointsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pointsInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameType = 0;
                    object.todayPoints = 0;
                    object.totalPoints = 0;
                    object.totalRecordCount = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.pointsInfos && message.pointsInfos.length) {
                    object.pointsInfos = [];
                    for (var j = 0; j < message.pointsInfos.length; ++j)
                        object.pointsInfos[j] = $root.hall.PointsInfo.toObject(message.pointsInfos[j], options);
                }
                if (message.todayPoints != null && message.hasOwnProperty("todayPoints"))
                    object.todayPoints = message.todayPoints;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                if (message.totalRecordCount != null && message.hasOwnProperty("totalRecordCount"))
                    object.totalRecordCount = message.totalRecordCount;
                return object;
            };
    
            /**
             * Converts this PointsRsp to JSON.
             * @function toJSON
             * @memberof hall.PointsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsRsp;
        })();
    
        hall.ClubPointsViewedReq = (function() {
    
            /**
             * Properties of a ClubPointsViewedReq.
             * @memberof hall
             * @interface IClubPointsViewedReq
             * @property {common.IRequest|null} [request] ClubPointsViewedReq request
             * @property {number|null} [code] ClubPointsViewedReq code
             * @property {number|null} [time] ClubPointsViewedReq time
             */
    
            /**
             * Constructs a new ClubPointsViewedReq.
             * @memberof hall
             * @classdesc Represents a ClubPointsViewedReq.
             * @implements IClubPointsViewedReq
             * @constructor
             * @param {hall.IClubPointsViewedReq=} [properties] Properties to set
             */
            function ClubPointsViewedReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ClubPointsViewedReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ClubPointsViewedReq
             * @instance
             */
            ClubPointsViewedReq.prototype.request = null;
    
            /**
             * ClubPointsViewedReq code.
             * @member {number} code
             * @memberof hall.ClubPointsViewedReq
             * @instance
             */
            ClubPointsViewedReq.prototype.code = 0;
    
            /**
             * ClubPointsViewedReq time.
             * @member {number} time
             * @memberof hall.ClubPointsViewedReq
             * @instance
             */
            ClubPointsViewedReq.prototype.time = 0;
    
            /**
             * Creates a new ClubPointsViewedReq instance using the specified properties.
             * @function create
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {hall.IClubPointsViewedReq=} [properties] Properties to set
             * @returns {hall.ClubPointsViewedReq} ClubPointsViewedReq instance
             */
            ClubPointsViewedReq.create = function create(properties) {
                return new ClubPointsViewedReq(properties);
            };
    
            /**
             * Encodes the specified ClubPointsViewedReq message. Does not implicitly {@link hall.ClubPointsViewedReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {hall.IClubPointsViewedReq} message ClubPointsViewedReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubPointsViewedReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
                return writer;
            };
    
            /**
             * Encodes the specified ClubPointsViewedReq message, length delimited. Does not implicitly {@link hall.ClubPointsViewedReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {hall.IClubPointsViewedReq} message ClubPointsViewedReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubPointsViewedReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ClubPointsViewedReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ClubPointsViewedReq} ClubPointsViewedReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubPointsViewedReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ClubPointsViewedReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ClubPointsViewedReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ClubPointsViewedReq} ClubPointsViewedReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubPointsViewedReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ClubPointsViewedReq message.
             * @function verify
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClubPointsViewedReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                return null;
            };
    
            /**
             * Creates a ClubPointsViewedReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ClubPointsViewedReq} ClubPointsViewedReq
             */
            ClubPointsViewedReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ClubPointsViewedReq)
                    return object;
                var message = new $root.hall.ClubPointsViewedReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ClubPointsViewedReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.time != null)
                    message.time = object.time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ClubPointsViewedReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ClubPointsViewedReq
             * @static
             * @param {hall.ClubPointsViewedReq} message ClubPointsViewedReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClubPointsViewedReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                    object.time = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                return object;
            };
    
            /**
             * Converts this ClubPointsViewedReq to JSON.
             * @function toJSON
             * @memberof hall.ClubPointsViewedReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClubPointsViewedReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ClubPointsViewedReq;
        })();
    
        hall.ClubPointsViewedRsp = (function() {
    
            /**
             * Properties of a ClubPointsViewedRsp.
             * @memberof hall
             * @interface IClubPointsViewedRsp
             * @property {common.IResult|null} [result] ClubPointsViewedRsp result
             */
    
            /**
             * Constructs a new ClubPointsViewedRsp.
             * @memberof hall
             * @classdesc Represents a ClubPointsViewedRsp.
             * @implements IClubPointsViewedRsp
             * @constructor
             * @param {hall.IClubPointsViewedRsp=} [properties] Properties to set
             */
            function ClubPointsViewedRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ClubPointsViewedRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ClubPointsViewedRsp
             * @instance
             */
            ClubPointsViewedRsp.prototype.result = null;
    
            /**
             * Creates a new ClubPointsViewedRsp instance using the specified properties.
             * @function create
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {hall.IClubPointsViewedRsp=} [properties] Properties to set
             * @returns {hall.ClubPointsViewedRsp} ClubPointsViewedRsp instance
             */
            ClubPointsViewedRsp.create = function create(properties) {
                return new ClubPointsViewedRsp(properties);
            };
    
            /**
             * Encodes the specified ClubPointsViewedRsp message. Does not implicitly {@link hall.ClubPointsViewedRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {hall.IClubPointsViewedRsp} message ClubPointsViewedRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubPointsViewedRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ClubPointsViewedRsp message, length delimited. Does not implicitly {@link hall.ClubPointsViewedRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {hall.IClubPointsViewedRsp} message ClubPointsViewedRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubPointsViewedRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ClubPointsViewedRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ClubPointsViewedRsp} ClubPointsViewedRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubPointsViewedRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ClubPointsViewedRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ClubPointsViewedRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ClubPointsViewedRsp} ClubPointsViewedRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubPointsViewedRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ClubPointsViewedRsp message.
             * @function verify
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClubPointsViewedRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a ClubPointsViewedRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ClubPointsViewedRsp} ClubPointsViewedRsp
             */
            ClubPointsViewedRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ClubPointsViewedRsp)
                    return object;
                var message = new $root.hall.ClubPointsViewedRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ClubPointsViewedRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ClubPointsViewedRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ClubPointsViewedRsp
             * @static
             * @param {hall.ClubPointsViewedRsp} message ClubPointsViewedRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClubPointsViewedRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this ClubPointsViewedRsp to JSON.
             * @function toJSON
             * @memberof hall.ClubPointsViewedRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClubPointsViewedRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ClubPointsViewedRsp;
        })();
    
        hall.PointsDetailReq = (function() {
    
            /**
             * Properties of a PointsDetailReq.
             * @memberof hall
             * @interface IPointsDetailReq
             * @property {common.IRequest|null} [request] PointsDetailReq request
             * @property {number|null} [gameType] PointsDetailReq gameType
             * @property {number|null} [time] PointsDetailReq time
             * @property {number|null} [uid] PointsDetailReq uid
             */
    
            /**
             * Constructs a new PointsDetailReq.
             * @memberof hall
             * @classdesc Represents a PointsDetailReq.
             * @implements IPointsDetailReq
             * @constructor
             * @param {hall.IPointsDetailReq=} [properties] Properties to set
             */
            function PointsDetailReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsDetailReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.PointsDetailReq
             * @instance
             */
            PointsDetailReq.prototype.request = null;
    
            /**
             * PointsDetailReq gameType.
             * @member {number} gameType
             * @memberof hall.PointsDetailReq
             * @instance
             */
            PointsDetailReq.prototype.gameType = 0;
    
            /**
             * PointsDetailReq time.
             * @member {number} time
             * @memberof hall.PointsDetailReq
             * @instance
             */
            PointsDetailReq.prototype.time = 0;
    
            /**
             * PointsDetailReq uid.
             * @member {number} uid
             * @memberof hall.PointsDetailReq
             * @instance
             */
            PointsDetailReq.prototype.uid = 0;
    
            /**
             * Creates a new PointsDetailReq instance using the specified properties.
             * @function create
             * @memberof hall.PointsDetailReq
             * @static
             * @param {hall.IPointsDetailReq=} [properties] Properties to set
             * @returns {hall.PointsDetailReq} PointsDetailReq instance
             */
            PointsDetailReq.create = function create(properties) {
                return new PointsDetailReq(properties);
            };
    
            /**
             * Encodes the specified PointsDetailReq message. Does not implicitly {@link hall.PointsDetailReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsDetailReq
             * @static
             * @param {hall.IPointsDetailReq} message PointsDetailReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetailReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameType);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified PointsDetailReq message, length delimited. Does not implicitly {@link hall.PointsDetailReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsDetailReq
             * @static
             * @param {hall.IPointsDetailReq} message PointsDetailReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetailReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsDetailReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsDetailReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsDetailReq} PointsDetailReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetailReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsDetailReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameType = reader.uint32();
                        break;
                    case 3:
                        message.time = reader.uint32();
                        break;
                    case 4:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsDetailReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsDetailReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsDetailReq} PointsDetailReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetailReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsDetailReq message.
             * @function verify
             * @memberof hall.PointsDetailReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsDetailReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a PointsDetailReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsDetailReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsDetailReq} PointsDetailReq
             */
            PointsDetailReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsDetailReq)
                    return object;
                var message = new $root.hall.PointsDetailReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PointsDetailReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PointsDetailReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsDetailReq
             * @static
             * @param {hall.PointsDetailReq} message PointsDetailReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsDetailReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.gameType = 0;
                    object.time = 0;
                    object.uid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this PointsDetailReq to JSON.
             * @function toJSON
             * @memberof hall.PointsDetailReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsDetailReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsDetailReq;
        })();
    
        hall.PointsDetail = (function() {
    
            /**
             * Properties of a PointsDetail.
             * @memberof hall
             * @interface IPointsDetail
             * @property {number|null} [uid] PointsDetail uid
             * @property {string|null} [nick] PointsDetail nick
             * @property {number|null} [points] PointsDetail points
             * @property {number|null} [totalPoints] PointsDetail totalPoints
             */
    
            /**
             * Constructs a new PointsDetail.
             * @memberof hall
             * @classdesc Represents a PointsDetail.
             * @implements IPointsDetail
             * @constructor
             * @param {hall.IPointsDetail=} [properties] Properties to set
             */
            function PointsDetail(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsDetail uid.
             * @member {number} uid
             * @memberof hall.PointsDetail
             * @instance
             */
            PointsDetail.prototype.uid = 0;
    
            /**
             * PointsDetail nick.
             * @member {string} nick
             * @memberof hall.PointsDetail
             * @instance
             */
            PointsDetail.prototype.nick = "";
    
            /**
             * PointsDetail points.
             * @member {number} points
             * @memberof hall.PointsDetail
             * @instance
             */
            PointsDetail.prototype.points = 0;
    
            /**
             * PointsDetail totalPoints.
             * @member {number} totalPoints
             * @memberof hall.PointsDetail
             * @instance
             */
            PointsDetail.prototype.totalPoints = 0;
    
            /**
             * Creates a new PointsDetail instance using the specified properties.
             * @function create
             * @memberof hall.PointsDetail
             * @static
             * @param {hall.IPointsDetail=} [properties] Properties to set
             * @returns {hall.PointsDetail} PointsDetail instance
             */
            PointsDetail.create = function create(properties) {
                return new PointsDetail(properties);
            };
    
            /**
             * Encodes the specified PointsDetail message. Does not implicitly {@link hall.PointsDetail.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsDetail
             * @static
             * @param {hall.IPointsDetail} message PointsDetail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetail.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.nick != null && message.hasOwnProperty("nick"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nick);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.points);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalPoints);
                return writer;
            };
    
            /**
             * Encodes the specified PointsDetail message, length delimited. Does not implicitly {@link hall.PointsDetail.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsDetail
             * @static
             * @param {hall.IPointsDetail} message PointsDetail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetail.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsDetail message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsDetail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsDetail} PointsDetail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetail.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsDetail();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.nick = reader.string();
                        break;
                    case 3:
                        message.points = reader.int32();
                        break;
                    case 4:
                        message.totalPoints = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsDetail message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsDetail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsDetail} PointsDetail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetail.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsDetail message.
             * @function verify
             * @memberof hall.PointsDetail
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsDetail.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.nick != null && message.hasOwnProperty("nick"))
                    if (!$util.isString(message.nick))
                        return "nick: string expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                return null;
            };
    
            /**
             * Creates a PointsDetail message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsDetail
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsDetail} PointsDetail
             */
            PointsDetail.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsDetail)
                    return object;
                var message = new $root.hall.PointsDetail();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.nick != null)
                    message.nick = String(object.nick);
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PointsDetail message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsDetail
             * @static
             * @param {hall.PointsDetail} message PointsDetail
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsDetail.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.nick = "";
                    object.points = 0;
                    object.totalPoints = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.nick != null && message.hasOwnProperty("nick"))
                    object.nick = message.nick;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                return object;
            };
    
            /**
             * Converts this PointsDetail to JSON.
             * @function toJSON
             * @memberof hall.PointsDetail
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsDetail.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsDetail;
        })();
    
        hall.RoundPoints = (function() {
    
            /**
             * Properties of a RoundPoints.
             * @memberof hall
             * @interface IRoundPoints
             * @property {number|null} [round] RoundPoints round
             * @property {Array.<hall.IPointsDetail>|null} [PointsDetails] RoundPoints PointsDetails
             * @property {string|null} [playbackId] RoundPoints playbackId
             */
    
            /**
             * Constructs a new RoundPoints.
             * @memberof hall
             * @classdesc Represents a RoundPoints.
             * @implements IRoundPoints
             * @constructor
             * @param {hall.IRoundPoints=} [properties] Properties to set
             */
            function RoundPoints(properties) {
                this.PointsDetails = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoundPoints round.
             * @member {number} round
             * @memberof hall.RoundPoints
             * @instance
             */
            RoundPoints.prototype.round = 0;
    
            /**
             * RoundPoints PointsDetails.
             * @member {Array.<hall.IPointsDetail>} PointsDetails
             * @memberof hall.RoundPoints
             * @instance
             */
            RoundPoints.prototype.PointsDetails = $util.emptyArray;
    
            /**
             * RoundPoints playbackId.
             * @member {string} playbackId
             * @memberof hall.RoundPoints
             * @instance
             */
            RoundPoints.prototype.playbackId = "";
    
            /**
             * Creates a new RoundPoints instance using the specified properties.
             * @function create
             * @memberof hall.RoundPoints
             * @static
             * @param {hall.IRoundPoints=} [properties] Properties to set
             * @returns {hall.RoundPoints} RoundPoints instance
             */
            RoundPoints.create = function create(properties) {
                return new RoundPoints(properties);
            };
    
            /**
             * Encodes the specified RoundPoints message. Does not implicitly {@link hall.RoundPoints.verify|verify} messages.
             * @function encode
             * @memberof hall.RoundPoints
             * @static
             * @param {hall.IRoundPoints} message RoundPoints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundPoints.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.round);
                if (message.PointsDetails != null && message.PointsDetails.length)
                    for (var i = 0; i < message.PointsDetails.length; ++i)
                        $root.hall.PointsDetail.encode(message.PointsDetails[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.playbackId != null && message.hasOwnProperty("playbackId"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.playbackId);
                return writer;
            };
    
            /**
             * Encodes the specified RoundPoints message, length delimited. Does not implicitly {@link hall.RoundPoints.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.RoundPoints
             * @static
             * @param {hall.IRoundPoints} message RoundPoints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundPoints.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoundPoints message from the specified reader or buffer.
             * @function decode
             * @memberof hall.RoundPoints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.RoundPoints} RoundPoints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundPoints.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.RoundPoints();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.uint32();
                        break;
                    case 2:
                        if (!(message.PointsDetails && message.PointsDetails.length))
                            message.PointsDetails = [];
                        message.PointsDetails.push($root.hall.PointsDetail.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.playbackId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoundPoints message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.RoundPoints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.RoundPoints} RoundPoints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundPoints.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoundPoints message.
             * @function verify
             * @memberof hall.RoundPoints
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoundPoints.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.PointsDetails != null && message.hasOwnProperty("PointsDetails")) {
                    if (!Array.isArray(message.PointsDetails))
                        return "PointsDetails: array expected";
                    for (var i = 0; i < message.PointsDetails.length; ++i) {
                        var error = $root.hall.PointsDetail.verify(message.PointsDetails[i]);
                        if (error)
                            return "PointsDetails." + error;
                    }
                }
                if (message.playbackId != null && message.hasOwnProperty("playbackId"))
                    if (!$util.isString(message.playbackId))
                        return "playbackId: string expected";
                return null;
            };
    
            /**
             * Creates a RoundPoints message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.RoundPoints
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.RoundPoints} RoundPoints
             */
            RoundPoints.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.RoundPoints)
                    return object;
                var message = new $root.hall.RoundPoints();
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.PointsDetails) {
                    if (!Array.isArray(object.PointsDetails))
                        throw TypeError(".hall.RoundPoints.PointsDetails: array expected");
                    message.PointsDetails = [];
                    for (var i = 0; i < object.PointsDetails.length; ++i) {
                        if (typeof object.PointsDetails[i] !== "object")
                            throw TypeError(".hall.RoundPoints.PointsDetails: object expected");
                        message.PointsDetails[i] = $root.hall.PointsDetail.fromObject(object.PointsDetails[i]);
                    }
                }
                if (object.playbackId != null)
                    message.playbackId = String(object.playbackId);
                return message;
            };
    
            /**
             * Creates a plain object from a RoundPoints message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.RoundPoints
             * @static
             * @param {hall.RoundPoints} message RoundPoints
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoundPoints.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.PointsDetails = [];
                if (options.defaults) {
                    object.round = 0;
                    object.playbackId = "";
                }
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.PointsDetails && message.PointsDetails.length) {
                    object.PointsDetails = [];
                    for (var j = 0; j < message.PointsDetails.length; ++j)
                        object.PointsDetails[j] = $root.hall.PointsDetail.toObject(message.PointsDetails[j], options);
                }
                if (message.playbackId != null && message.hasOwnProperty("playbackId"))
                    object.playbackId = message.playbackId;
                return object;
            };
    
            /**
             * Converts this RoundPoints to JSON.
             * @function toJSON
             * @memberof hall.RoundPoints
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoundPoints.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoundPoints;
        })();
    
        hall.PointsDetailRsp = (function() {
    
            /**
             * Properties of a PointsDetailRsp.
             * @memberof hall
             * @interface IPointsDetailRsp
             * @property {common.IResult|null} [result] PointsDetailRsp result
             * @property {number|null} [gameType] PointsDetailRsp gameType
             * @property {number|null} [time] PointsDetailRsp time
             * @property {Array.<hall.IRoundPoints>|null} [roundPoints] PointsDetailRsp roundPoints
             * @property {string|null} [buildJson] PointsDetailRsp buildJson
             */
    
            /**
             * Constructs a new PointsDetailRsp.
             * @memberof hall
             * @classdesc Represents a PointsDetailRsp.
             * @implements IPointsDetailRsp
             * @constructor
             * @param {hall.IPointsDetailRsp=} [properties] Properties to set
             */
            function PointsDetailRsp(properties) {
                this.roundPoints = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsDetailRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PointsDetailRsp
             * @instance
             */
            PointsDetailRsp.prototype.result = null;
    
            /**
             * PointsDetailRsp gameType.
             * @member {number} gameType
             * @memberof hall.PointsDetailRsp
             * @instance
             */
            PointsDetailRsp.prototype.gameType = 0;
    
            /**
             * PointsDetailRsp time.
             * @member {number} time
             * @memberof hall.PointsDetailRsp
             * @instance
             */
            PointsDetailRsp.prototype.time = 0;
    
            /**
             * PointsDetailRsp roundPoints.
             * @member {Array.<hall.IRoundPoints>} roundPoints
             * @memberof hall.PointsDetailRsp
             * @instance
             */
            PointsDetailRsp.prototype.roundPoints = $util.emptyArray;
    
            /**
             * PointsDetailRsp buildJson.
             * @member {string} buildJson
             * @memberof hall.PointsDetailRsp
             * @instance
             */
            PointsDetailRsp.prototype.buildJson = "";
    
            /**
             * Creates a new PointsDetailRsp instance using the specified properties.
             * @function create
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {hall.IPointsDetailRsp=} [properties] Properties to set
             * @returns {hall.PointsDetailRsp} PointsDetailRsp instance
             */
            PointsDetailRsp.create = function create(properties) {
                return new PointsDetailRsp(properties);
            };
    
            /**
             * Encodes the specified PointsDetailRsp message. Does not implicitly {@link hall.PointsDetailRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {hall.IPointsDetailRsp} message PointsDetailRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetailRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameType);
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
                if (message.roundPoints != null && message.roundPoints.length)
                    for (var i = 0; i < message.roundPoints.length; ++i)
                        $root.hall.RoundPoints.encode(message.roundPoints[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.buildJson);
                return writer;
            };
    
            /**
             * Encodes the specified PointsDetailRsp message, length delimited. Does not implicitly {@link hall.PointsDetailRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {hall.IPointsDetailRsp} message PointsDetailRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsDetailRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsDetailRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PointsDetailRsp} PointsDetailRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetailRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PointsDetailRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameType = reader.uint32();
                        break;
                    case 3:
                        message.time = reader.uint32();
                        break;
                    case 4:
                        if (!(message.roundPoints && message.roundPoints.length))
                            message.roundPoints = [];
                        message.roundPoints.push($root.hall.RoundPoints.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.buildJson = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsDetailRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PointsDetailRsp} PointsDetailRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsDetailRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsDetailRsp message.
             * @function verify
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsDetailRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.roundPoints != null && message.hasOwnProperty("roundPoints")) {
                    if (!Array.isArray(message.roundPoints))
                        return "roundPoints: array expected";
                    for (var i = 0; i < message.roundPoints.length; ++i) {
                        var error = $root.hall.RoundPoints.verify(message.roundPoints[i]);
                        if (error)
                            return "roundPoints." + error;
                    }
                }
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    if (!$util.isString(message.buildJson))
                        return "buildJson: string expected";
                return null;
            };
    
            /**
             * Creates a PointsDetailRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PointsDetailRsp} PointsDetailRsp
             */
            PointsDetailRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PointsDetailRsp)
                    return object;
                var message = new $root.hall.PointsDetailRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PointsDetailRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.roundPoints) {
                    if (!Array.isArray(object.roundPoints))
                        throw TypeError(".hall.PointsDetailRsp.roundPoints: array expected");
                    message.roundPoints = [];
                    for (var i = 0; i < object.roundPoints.length; ++i) {
                        if (typeof object.roundPoints[i] !== "object")
                            throw TypeError(".hall.PointsDetailRsp.roundPoints: object expected");
                        message.roundPoints[i] = $root.hall.RoundPoints.fromObject(object.roundPoints[i]);
                    }
                }
                if (object.buildJson != null)
                    message.buildJson = String(object.buildJson);
                return message;
            };
    
            /**
             * Creates a plain object from a PointsDetailRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PointsDetailRsp
             * @static
             * @param {hall.PointsDetailRsp} message PointsDetailRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsDetailRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.roundPoints = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameType = 0;
                    object.time = 0;
                    object.buildJson = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.roundPoints && message.roundPoints.length) {
                    object.roundPoints = [];
                    for (var j = 0; j < message.roundPoints.length; ++j)
                        object.roundPoints[j] = $root.hall.RoundPoints.toObject(message.roundPoints[j], options);
                }
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    object.buildJson = message.buildJson;
                return object;
            };
    
            /**
             * Converts this PointsDetailRsp to JSON.
             * @function toJSON
             * @memberof hall.PointsDetailRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsDetailRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsDetailRsp;
        })();
    
        hall.ProxyWechatReq = (function() {
    
            /**
             * Properties of a ProxyWechatReq.
             * @memberof hall
             * @interface IProxyWechatReq
             * @property {common.IRequest|null} [request] ProxyWechatReq request
             */
    
            /**
             * Constructs a new ProxyWechatReq.
             * @memberof hall
             * @classdesc Represents a ProxyWechatReq.
             * @implements IProxyWechatReq
             * @constructor
             * @param {hall.IProxyWechatReq=} [properties] Properties to set
             */
            function ProxyWechatReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ProxyWechatReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ProxyWechatReq
             * @instance
             */
            ProxyWechatReq.prototype.request = null;
    
            /**
             * Creates a new ProxyWechatReq instance using the specified properties.
             * @function create
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {hall.IProxyWechatReq=} [properties] Properties to set
             * @returns {hall.ProxyWechatReq} ProxyWechatReq instance
             */
            ProxyWechatReq.create = function create(properties) {
                return new ProxyWechatReq(properties);
            };
    
            /**
             * Encodes the specified ProxyWechatReq message. Does not implicitly {@link hall.ProxyWechatReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {hall.IProxyWechatReq} message ProxyWechatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyWechatReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ProxyWechatReq message, length delimited. Does not implicitly {@link hall.ProxyWechatReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {hall.IProxyWechatReq} message ProxyWechatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyWechatReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ProxyWechatReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ProxyWechatReq} ProxyWechatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyWechatReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ProxyWechatReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ProxyWechatReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ProxyWechatReq} ProxyWechatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyWechatReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ProxyWechatReq message.
             * @function verify
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProxyWechatReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ProxyWechatReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ProxyWechatReq} ProxyWechatReq
             */
            ProxyWechatReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ProxyWechatReq)
                    return object;
                var message = new $root.hall.ProxyWechatReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ProxyWechatReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ProxyWechatReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ProxyWechatReq
             * @static
             * @param {hall.ProxyWechatReq} message ProxyWechatReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProxyWechatReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ProxyWechatReq to JSON.
             * @function toJSON
             * @memberof hall.ProxyWechatReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProxyWechatReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ProxyWechatReq;
        })();
    
        hall.WechatInfo = (function() {
    
            /**
             * Properties of a WechatInfo.
             * @memberof hall
             * @interface IWechatInfo
             * @property {string|null} [account] WechatInfo account
             */
    
            /**
             * Constructs a new WechatInfo.
             * @memberof hall
             * @classdesc Represents a WechatInfo.
             * @implements IWechatInfo
             * @constructor
             * @param {hall.IWechatInfo=} [properties] Properties to set
             */
            function WechatInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WechatInfo account.
             * @member {string} account
             * @memberof hall.WechatInfo
             * @instance
             */
            WechatInfo.prototype.account = "";
    
            /**
             * Creates a new WechatInfo instance using the specified properties.
             * @function create
             * @memberof hall.WechatInfo
             * @static
             * @param {hall.IWechatInfo=} [properties] Properties to set
             * @returns {hall.WechatInfo} WechatInfo instance
             */
            WechatInfo.create = function create(properties) {
                return new WechatInfo(properties);
            };
    
            /**
             * Encodes the specified WechatInfo message. Does not implicitly {@link hall.WechatInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.WechatInfo
             * @static
             * @param {hall.IWechatInfo} message WechatInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WechatInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && message.hasOwnProperty("account"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
                return writer;
            };
    
            /**
             * Encodes the specified WechatInfo message, length delimited. Does not implicitly {@link hall.WechatInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.WechatInfo
             * @static
             * @param {hall.IWechatInfo} message WechatInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WechatInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WechatInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.WechatInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.WechatInfo} WechatInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WechatInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.WechatInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.account = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WechatInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.WechatInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.WechatInfo} WechatInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WechatInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WechatInfo message.
             * @function verify
             * @memberof hall.WechatInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WechatInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                return null;
            };
    
            /**
             * Creates a WechatInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.WechatInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.WechatInfo} WechatInfo
             */
            WechatInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.WechatInfo)
                    return object;
                var message = new $root.hall.WechatInfo();
                if (object.account != null)
                    message.account = String(object.account);
                return message;
            };
    
            /**
             * Creates a plain object from a WechatInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.WechatInfo
             * @static
             * @param {hall.WechatInfo} message WechatInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WechatInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.account = "";
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                return object;
            };
    
            /**
             * Converts this WechatInfo to JSON.
             * @function toJSON
             * @memberof hall.WechatInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WechatInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WechatInfo;
        })();
    
        hall.ProxyWechatRsp = (function() {
    
            /**
             * Properties of a ProxyWechatRsp.
             * @memberof hall
             * @interface IProxyWechatRsp
             * @property {common.IResult|null} [result] ProxyWechatRsp result
             * @property {Array.<hall.IWechatInfo>|null} [wechatInfos] ProxyWechatRsp wechatInfos
             */
    
            /**
             * Constructs a new ProxyWechatRsp.
             * @memberof hall
             * @classdesc Represents a ProxyWechatRsp.
             * @implements IProxyWechatRsp
             * @constructor
             * @param {hall.IProxyWechatRsp=} [properties] Properties to set
             */
            function ProxyWechatRsp(properties) {
                this.wechatInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ProxyWechatRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ProxyWechatRsp
             * @instance
             */
            ProxyWechatRsp.prototype.result = null;
    
            /**
             * ProxyWechatRsp wechatInfos.
             * @member {Array.<hall.IWechatInfo>} wechatInfos
             * @memberof hall.ProxyWechatRsp
             * @instance
             */
            ProxyWechatRsp.prototype.wechatInfos = $util.emptyArray;
    
            /**
             * Creates a new ProxyWechatRsp instance using the specified properties.
             * @function create
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {hall.IProxyWechatRsp=} [properties] Properties to set
             * @returns {hall.ProxyWechatRsp} ProxyWechatRsp instance
             */
            ProxyWechatRsp.create = function create(properties) {
                return new ProxyWechatRsp(properties);
            };
    
            /**
             * Encodes the specified ProxyWechatRsp message. Does not implicitly {@link hall.ProxyWechatRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {hall.IProxyWechatRsp} message ProxyWechatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyWechatRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.wechatInfos != null && message.wechatInfos.length)
                    for (var i = 0; i < message.wechatInfos.length; ++i)
                        $root.hall.WechatInfo.encode(message.wechatInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ProxyWechatRsp message, length delimited. Does not implicitly {@link hall.ProxyWechatRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {hall.IProxyWechatRsp} message ProxyWechatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProxyWechatRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ProxyWechatRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ProxyWechatRsp} ProxyWechatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyWechatRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ProxyWechatRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.wechatInfos && message.wechatInfos.length))
                            message.wechatInfos = [];
                        message.wechatInfos.push($root.hall.WechatInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ProxyWechatRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ProxyWechatRsp} ProxyWechatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProxyWechatRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ProxyWechatRsp message.
             * @function verify
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProxyWechatRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.wechatInfos != null && message.hasOwnProperty("wechatInfos")) {
                    if (!Array.isArray(message.wechatInfos))
                        return "wechatInfos: array expected";
                    for (var i = 0; i < message.wechatInfos.length; ++i) {
                        var error = $root.hall.WechatInfo.verify(message.wechatInfos[i]);
                        if (error)
                            return "wechatInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a ProxyWechatRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ProxyWechatRsp} ProxyWechatRsp
             */
            ProxyWechatRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ProxyWechatRsp)
                    return object;
                var message = new $root.hall.ProxyWechatRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ProxyWechatRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.wechatInfos) {
                    if (!Array.isArray(object.wechatInfos))
                        throw TypeError(".hall.ProxyWechatRsp.wechatInfos: array expected");
                    message.wechatInfos = [];
                    for (var i = 0; i < object.wechatInfos.length; ++i) {
                        if (typeof object.wechatInfos[i] !== "object")
                            throw TypeError(".hall.ProxyWechatRsp.wechatInfos: object expected");
                        message.wechatInfos[i] = $root.hall.WechatInfo.fromObject(object.wechatInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ProxyWechatRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ProxyWechatRsp
             * @static
             * @param {hall.ProxyWechatRsp} message ProxyWechatRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProxyWechatRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.wechatInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.wechatInfos && message.wechatInfos.length) {
                    object.wechatInfos = [];
                    for (var j = 0; j < message.wechatInfos.length; ++j)
                        object.wechatInfos[j] = $root.hall.WechatInfo.toObject(message.wechatInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this ProxyWechatRsp to JSON.
             * @function toJSON
             * @memberof hall.ProxyWechatRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProxyWechatRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ProxyWechatRsp;
        })();
    
        hall.BuildReq = (function() {
    
            /**
             * Properties of a BuildReq.
             * @memberof hall
             * @interface IBuildReq
             * @property {common.IRequest|null} [request] BuildReq request
             * @property {hall.IBuildInfo|null} [buildInfo] BuildReq buildInfo
             * @property {boolean|null} [AA] BuildReq AA
             * @property {number|null} [gameType] BuildReq gameType
             * @property {number|null} [clubID] BuildReq clubID
             */
    
            /**
             * Constructs a new BuildReq.
             * @memberof hall
             * @classdesc Represents a BuildReq.
             * @implements IBuildReq
             * @constructor
             * @param {hall.IBuildReq=} [properties] Properties to set
             */
            function BuildReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.BuildReq
             * @instance
             */
            BuildReq.prototype.request = null;
    
            /**
             * BuildReq buildInfo.
             * @member {hall.IBuildInfo|null|undefined} buildInfo
             * @memberof hall.BuildReq
             * @instance
             */
            BuildReq.prototype.buildInfo = null;
    
            /**
             * BuildReq AA.
             * @member {boolean} AA
             * @memberof hall.BuildReq
             * @instance
             */
            BuildReq.prototype.AA = false;
    
            /**
             * BuildReq gameType.
             * @member {number} gameType
             * @memberof hall.BuildReq
             * @instance
             */
            BuildReq.prototype.gameType = 0;
    
            /**
             * BuildReq clubID.
             * @member {number} clubID
             * @memberof hall.BuildReq
             * @instance
             */
            BuildReq.prototype.clubID = 0;
    
            /**
             * Creates a new BuildReq instance using the specified properties.
             * @function create
             * @memberof hall.BuildReq
             * @static
             * @param {hall.IBuildReq=} [properties] Properties to set
             * @returns {hall.BuildReq} BuildReq instance
             */
            BuildReq.create = function create(properties) {
                return new BuildReq(properties);
            };
    
            /**
             * Encodes the specified BuildReq message. Does not implicitly {@link hall.BuildReq.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildReq
             * @static
             * @param {hall.IBuildReq} message BuildReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.hall.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.AA);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameType);
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.clubID);
                return writer;
            };
    
            /**
             * Encodes the specified BuildReq message, length delimited. Does not implicitly {@link hall.BuildReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildReq
             * @static
             * @param {hall.IBuildReq} message BuildReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildReq} BuildReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.buildInfo = $root.hall.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.AA = reader.bool();
                        break;
                    case 4:
                        message.gameType = reader.uint32();
                        break;
                    case 5:
                        message.clubID = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildReq} BuildReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildReq message.
             * @function verify
             * @memberof hall.BuildReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.hall.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    if (!$util.isInteger(message.clubID))
                        return "clubID: integer expected";
                return null;
            };
    
            /**
             * Creates a BuildReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildReq} BuildReq
             */
            BuildReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildReq)
                    return object;
                var message = new $root.hall.BuildReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.BuildReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".hall.BuildReq.buildInfo: object expected");
                    message.buildInfo = $root.hall.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.clubID != null)
                    message.clubID = object.clubID >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BuildReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildReq
             * @static
             * @param {hall.BuildReq} message BuildReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.buildInfo = null;
                    object.AA = false;
                    object.gameType = 0;
                    object.clubID = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.hall.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    object.clubID = message.clubID;
                return object;
            };
    
            /**
             * Converts this BuildReq to JSON.
             * @function toJSON
             * @memberof hall.BuildReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildReq;
        })();
    
        hall.BuildRsp = (function() {
    
            /**
             * Properties of a BuildRsp.
             * @memberof hall
             * @interface IBuildRsp
             * @property {common.IResult|null} [result] BuildRsp result
             * @property {number|null} [code] BuildRsp code
             * @property {number|Long|null} [diamond] BuildRsp diamond
             * @property {boolean|null} [agent] BuildRsp agent
             * @property {number|null} [type] BuildRsp type
             * @property {hall.IAgentRoomInfo|null} [agentRoomInfo] BuildRsp agentRoomInfo
             */
    
            /**
             * Constructs a new BuildRsp.
             * @memberof hall
             * @classdesc Represents a BuildRsp.
             * @implements IBuildRsp
             * @constructor
             * @param {hall.IBuildRsp=} [properties] Properties to set
             */
            function BuildRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.result = null;
    
            /**
             * BuildRsp code.
             * @member {number} code
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.code = 0;
    
            /**
             * BuildRsp diamond.
             * @member {number|Long} diamond
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * BuildRsp agent.
             * @member {boolean} agent
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.agent = false;
    
            /**
             * BuildRsp type.
             * @member {number} type
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.type = 0;
    
            /**
             * BuildRsp agentRoomInfo.
             * @member {hall.IAgentRoomInfo|null|undefined} agentRoomInfo
             * @memberof hall.BuildRsp
             * @instance
             */
            BuildRsp.prototype.agentRoomInfo = null;
    
            /**
             * Creates a new BuildRsp instance using the specified properties.
             * @function create
             * @memberof hall.BuildRsp
             * @static
             * @param {hall.IBuildRsp=} [properties] Properties to set
             * @returns {hall.BuildRsp} BuildRsp instance
             */
            BuildRsp.create = function create(properties) {
                return new BuildRsp(properties);
            };
    
            /**
             * Encodes the specified BuildRsp message. Does not implicitly {@link hall.BuildRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.BuildRsp
             * @static
             * @param {hall.IBuildRsp} message BuildRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.diamond);
                if (message.agent != null && message.hasOwnProperty("agent"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.agent);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.type);
                if (message.agentRoomInfo != null && message.hasOwnProperty("agentRoomInfo"))
                    $root.hall.AgentRoomInfo.encode(message.agentRoomInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BuildRsp message, length delimited. Does not implicitly {@link hall.BuildRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.BuildRsp
             * @static
             * @param {hall.IBuildRsp} message BuildRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.BuildRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.BuildRsp} BuildRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.BuildRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.diamond = reader.uint64();
                        break;
                    case 5:
                        message.agent = reader.bool();
                        break;
                    case 6:
                        message.type = reader.uint32();
                        break;
                    case 7:
                        message.agentRoomInfo = $root.hall.AgentRoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.BuildRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.BuildRsp} BuildRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildRsp message.
             * @function verify
             * @memberof hall.BuildRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                if (message.agent != null && message.hasOwnProperty("agent"))
                    if (typeof message.agent !== "boolean")
                        return "agent: boolean expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.agentRoomInfo != null && message.hasOwnProperty("agentRoomInfo")) {
                    var error = $root.hall.AgentRoomInfo.verify(message.agentRoomInfo);
                    if (error)
                        return "agentRoomInfo." + error;
                }
                return null;
            };
    
            /**
             * Creates a BuildRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.BuildRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.BuildRsp} BuildRsp
             */
            BuildRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.BuildRsp)
                    return object;
                var message = new $root.hall.BuildRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.BuildRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                if (object.agent != null)
                    message.agent = Boolean(object.agent);
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.agentRoomInfo != null) {
                    if (typeof object.agentRoomInfo !== "object")
                        throw TypeError(".hall.BuildRsp.agentRoomInfo: object expected");
                    message.agentRoomInfo = $root.hall.AgentRoomInfo.fromObject(object.agentRoomInfo);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BuildRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.BuildRsp
             * @static
             * @param {hall.BuildRsp} message BuildRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                    object.agent = false;
                    object.type = 0;
                    object.agentRoomInfo = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                if (message.agent != null && message.hasOwnProperty("agent"))
                    object.agent = message.agent;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.agentRoomInfo != null && message.hasOwnProperty("agentRoomInfo"))
                    object.agentRoomInfo = $root.hall.AgentRoomInfo.toObject(message.agentRoomInfo, options);
                return object;
            };
    
            /**
             * Converts this BuildRsp to JSON.
             * @function toJSON
             * @memberof hall.BuildRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildRsp;
        })();
    
        hall.PlaybackInfo = (function() {
    
            /**
             * Properties of a PlaybackInfo.
             * @memberof hall
             * @interface IPlaybackInfo
             * @property {Array.<number>|null} [uids] PlaybackInfo uids
             * @property {number|Long|null} [opTime] PlaybackInfo opTime
             * @property {string|null} [pb] PlaybackInfo pb
             */
    
            /**
             * Constructs a new PlaybackInfo.
             * @memberof hall
             * @classdesc Represents a PlaybackInfo.
             * @implements IPlaybackInfo
             * @constructor
             * @param {hall.IPlaybackInfo=} [properties] Properties to set
             */
            function PlaybackInfo(properties) {
                this.uids = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlaybackInfo uids.
             * @member {Array.<number>} uids
             * @memberof hall.PlaybackInfo
             * @instance
             */
            PlaybackInfo.prototype.uids = $util.emptyArray;
    
            /**
             * PlaybackInfo opTime.
             * @member {number|Long} opTime
             * @memberof hall.PlaybackInfo
             * @instance
             */
            PlaybackInfo.prototype.opTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PlaybackInfo pb.
             * @member {string} pb
             * @memberof hall.PlaybackInfo
             * @instance
             */
            PlaybackInfo.prototype.pb = "";
    
            /**
             * Creates a new PlaybackInfo instance using the specified properties.
             * @function create
             * @memberof hall.PlaybackInfo
             * @static
             * @param {hall.IPlaybackInfo=} [properties] Properties to set
             * @returns {hall.PlaybackInfo} PlaybackInfo instance
             */
            PlaybackInfo.create = function create(properties) {
                return new PlaybackInfo(properties);
            };
    
            /**
             * Encodes the specified PlaybackInfo message. Does not implicitly {@link hall.PlaybackInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.PlaybackInfo
             * @static
             * @param {hall.IPlaybackInfo} message PlaybackInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uids != null && message.uids.length)
                    for (var i = 0; i < message.uids.length; ++i)
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uids[i]);
                if (message.opTime != null && message.hasOwnProperty("opTime"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.opTime);
                if (message.pb != null && message.hasOwnProperty("pb"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.pb);
                return writer;
            };
    
            /**
             * Encodes the specified PlaybackInfo message, length delimited. Does not implicitly {@link hall.PlaybackInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PlaybackInfo
             * @static
             * @param {hall.IPlaybackInfo} message PlaybackInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlaybackInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PlaybackInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PlaybackInfo} PlaybackInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PlaybackInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.uids && message.uids.length))
                            message.uids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.uids.push(reader.uint32());
                        } else
                            message.uids.push(reader.uint32());
                        break;
                    case 2:
                        message.opTime = reader.uint64();
                        break;
                    case 3:
                        message.pb = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlaybackInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PlaybackInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PlaybackInfo} PlaybackInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlaybackInfo message.
             * @function verify
             * @memberof hall.PlaybackInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaybackInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uids != null && message.hasOwnProperty("uids")) {
                    if (!Array.isArray(message.uids))
                        return "uids: array expected";
                    for (var i = 0; i < message.uids.length; ++i)
                        if (!$util.isInteger(message.uids[i]))
                            return "uids: integer[] expected";
                }
                if (message.opTime != null && message.hasOwnProperty("opTime"))
                    if (!$util.isInteger(message.opTime) && !(message.opTime && $util.isInteger(message.opTime.low) && $util.isInteger(message.opTime.high)))
                        return "opTime: integer|Long expected";
                if (message.pb != null && message.hasOwnProperty("pb"))
                    if (!$util.isString(message.pb))
                        return "pb: string expected";
                return null;
            };
    
            /**
             * Creates a PlaybackInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PlaybackInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PlaybackInfo} PlaybackInfo
             */
            PlaybackInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PlaybackInfo)
                    return object;
                var message = new $root.hall.PlaybackInfo();
                if (object.uids) {
                    if (!Array.isArray(object.uids))
                        throw TypeError(".hall.PlaybackInfo.uids: array expected");
                    message.uids = [];
                    for (var i = 0; i < object.uids.length; ++i)
                        message.uids[i] = object.uids[i] >>> 0;
                }
                if (object.opTime != null)
                    if ($util.Long)
                        (message.opTime = $util.Long.fromValue(object.opTime)).unsigned = true;
                    else if (typeof object.opTime === "string")
                        message.opTime = parseInt(object.opTime, 10);
                    else if (typeof object.opTime === "number")
                        message.opTime = object.opTime;
                    else if (typeof object.opTime === "object")
                        message.opTime = new $util.LongBits(object.opTime.low >>> 0, object.opTime.high >>> 0).toNumber(true);
                if (object.pb != null)
                    message.pb = String(object.pb);
                return message;
            };
    
            /**
             * Creates a plain object from a PlaybackInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PlaybackInfo
             * @static
             * @param {hall.PlaybackInfo} message PlaybackInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaybackInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uids = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.opTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.opTime = options.longs === String ? "0" : 0;
                    object.pb = "";
                }
                if (message.uids && message.uids.length) {
                    object.uids = [];
                    for (var j = 0; j < message.uids.length; ++j)
                        object.uids[j] = message.uids[j];
                }
                if (message.opTime != null && message.hasOwnProperty("opTime"))
                    if (typeof message.opTime === "number")
                        object.opTime = options.longs === String ? String(message.opTime) : message.opTime;
                    else
                        object.opTime = options.longs === String ? $util.Long.prototype.toString.call(message.opTime) : options.longs === Number ? new $util.LongBits(message.opTime.low >>> 0, message.opTime.high >>> 0).toNumber(true) : message.opTime;
                if (message.pb != null && message.hasOwnProperty("pb"))
                    object.pb = message.pb;
                return object;
            };
    
            /**
             * Converts this PlaybackInfo to JSON.
             * @function toJSON
             * @memberof hall.PlaybackInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaybackInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlaybackInfo;
        })();
    
        hall.PlaybackReq = (function() {
    
            /**
             * Properties of a PlaybackReq.
             * @memberof hall
             * @interface IPlaybackReq
             * @property {common.IRequest|null} [request] PlaybackReq request
             * @property {string|null} [id] PlaybackReq id
             */
    
            /**
             * Constructs a new PlaybackReq.
             * @memberof hall
             * @classdesc Represents a PlaybackReq.
             * @implements IPlaybackReq
             * @constructor
             * @param {hall.IPlaybackReq=} [properties] Properties to set
             */
            function PlaybackReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlaybackReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.PlaybackReq
             * @instance
             */
            PlaybackReq.prototype.request = null;
    
            /**
             * PlaybackReq id.
             * @member {string} id
             * @memberof hall.PlaybackReq
             * @instance
             */
            PlaybackReq.prototype.id = "";
    
            /**
             * Creates a new PlaybackReq instance using the specified properties.
             * @function create
             * @memberof hall.PlaybackReq
             * @static
             * @param {hall.IPlaybackReq=} [properties] Properties to set
             * @returns {hall.PlaybackReq} PlaybackReq instance
             */
            PlaybackReq.create = function create(properties) {
                return new PlaybackReq(properties);
            };
    
            /**
             * Encodes the specified PlaybackReq message. Does not implicitly {@link hall.PlaybackReq.verify|verify} messages.
             * @function encode
             * @memberof hall.PlaybackReq
             * @static
             * @param {hall.IPlaybackReq} message PlaybackReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified PlaybackReq message, length delimited. Does not implicitly {@link hall.PlaybackReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PlaybackReq
             * @static
             * @param {hall.IPlaybackReq} message PlaybackReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlaybackReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PlaybackReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PlaybackReq} PlaybackReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PlaybackReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlaybackReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PlaybackReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PlaybackReq} PlaybackReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlaybackReq message.
             * @function verify
             * @memberof hall.PlaybackReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaybackReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                return null;
            };
    
            /**
             * Creates a PlaybackReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PlaybackReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PlaybackReq} PlaybackReq
             */
            PlaybackReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PlaybackReq)
                    return object;
                var message = new $root.hall.PlaybackReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.PlaybackReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.id != null)
                    message.id = String(object.id);
                return message;
            };
    
            /**
             * Creates a plain object from a PlaybackReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PlaybackReq
             * @static
             * @param {hall.PlaybackReq} message PlaybackReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaybackReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.id = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this PlaybackReq to JSON.
             * @function toJSON
             * @memberof hall.PlaybackReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaybackReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlaybackReq;
        })();
    
        hall.PlaybackRsp = (function() {
    
            /**
             * Properties of a PlaybackRsp.
             * @memberof hall
             * @interface IPlaybackRsp
             * @property {common.IResult|null} [result] PlaybackRsp result
             * @property {Array.<hall.IPlaybackInfo>|null} [playbackInfos] PlaybackRsp playbackInfos
             * @property {number|null} [uid] PlaybackRsp uid
             */
    
            /**
             * Constructs a new PlaybackRsp.
             * @memberof hall
             * @classdesc Represents a PlaybackRsp.
             * @implements IPlaybackRsp
             * @constructor
             * @param {hall.IPlaybackRsp=} [properties] Properties to set
             */
            function PlaybackRsp(properties) {
                this.playbackInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlaybackRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.PlaybackRsp
             * @instance
             */
            PlaybackRsp.prototype.result = null;
    
            /**
             * PlaybackRsp playbackInfos.
             * @member {Array.<hall.IPlaybackInfo>} playbackInfos
             * @memberof hall.PlaybackRsp
             * @instance
             */
            PlaybackRsp.prototype.playbackInfos = $util.emptyArray;
    
            /**
             * PlaybackRsp uid.
             * @member {number} uid
             * @memberof hall.PlaybackRsp
             * @instance
             */
            PlaybackRsp.prototype.uid = 0;
    
            /**
             * Creates a new PlaybackRsp instance using the specified properties.
             * @function create
             * @memberof hall.PlaybackRsp
             * @static
             * @param {hall.IPlaybackRsp=} [properties] Properties to set
             * @returns {hall.PlaybackRsp} PlaybackRsp instance
             */
            PlaybackRsp.create = function create(properties) {
                return new PlaybackRsp(properties);
            };
    
            /**
             * Encodes the specified PlaybackRsp message. Does not implicitly {@link hall.PlaybackRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.PlaybackRsp
             * @static
             * @param {hall.IPlaybackRsp} message PlaybackRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.playbackInfos != null && message.playbackInfos.length)
                    for (var i = 0; i < message.playbackInfos.length; ++i)
                        $root.hall.PlaybackInfo.encode(message.playbackInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified PlaybackRsp message, length delimited. Does not implicitly {@link hall.PlaybackRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PlaybackRsp
             * @static
             * @param {hall.IPlaybackRsp} message PlaybackRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaybackRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlaybackRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PlaybackRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PlaybackRsp} PlaybackRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PlaybackRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.playbackInfos && message.playbackInfos.length))
                            message.playbackInfos = [];
                        message.playbackInfos.push($root.hall.PlaybackInfo.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlaybackRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PlaybackRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PlaybackRsp} PlaybackRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaybackRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlaybackRsp message.
             * @function verify
             * @memberof hall.PlaybackRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaybackRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.playbackInfos != null && message.hasOwnProperty("playbackInfos")) {
                    if (!Array.isArray(message.playbackInfos))
                        return "playbackInfos: array expected";
                    for (var i = 0; i < message.playbackInfos.length; ++i) {
                        var error = $root.hall.PlaybackInfo.verify(message.playbackInfos[i]);
                        if (error)
                            return "playbackInfos." + error;
                    }
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a PlaybackRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PlaybackRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PlaybackRsp} PlaybackRsp
             */
            PlaybackRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PlaybackRsp)
                    return object;
                var message = new $root.hall.PlaybackRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.PlaybackRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.playbackInfos) {
                    if (!Array.isArray(object.playbackInfos))
                        throw TypeError(".hall.PlaybackRsp.playbackInfos: array expected");
                    message.playbackInfos = [];
                    for (var i = 0; i < object.playbackInfos.length; ++i) {
                        if (typeof object.playbackInfos[i] !== "object")
                            throw TypeError(".hall.PlaybackRsp.playbackInfos: object expected");
                        message.playbackInfos[i] = $root.hall.PlaybackInfo.fromObject(object.playbackInfos[i]);
                    }
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PlaybackRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PlaybackRsp
             * @static
             * @param {hall.PlaybackRsp} message PlaybackRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaybackRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.playbackInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.playbackInfos && message.playbackInfos.length) {
                    object.playbackInfos = [];
                    for (var j = 0; j < message.playbackInfos.length; ++j)
                        object.playbackInfos[j] = $root.hall.PlaybackInfo.toObject(message.playbackInfos[j], options);
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this PlaybackRsp to JSON.
             * @function toJSON
             * @memberof hall.PlaybackRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaybackRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlaybackRsp;
        })();
    
        hall.AgentRoomsReq = (function() {
    
            /**
             * Properties of an AgentRoomsReq.
             * @memberof hall
             * @interface IAgentRoomsReq
             * @property {common.IRequest|null} [request] AgentRoomsReq request
             * @property {Array.<number>|null} [codes] AgentRoomsReq codes
             */
    
            /**
             * Constructs a new AgentRoomsReq.
             * @memberof hall
             * @classdesc Represents an AgentRoomsReq.
             * @implements IAgentRoomsReq
             * @constructor
             * @param {hall.IAgentRoomsReq=} [properties] Properties to set
             */
            function AgentRoomsReq(properties) {
                this.codes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentRoomsReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.AgentRoomsReq
             * @instance
             */
            AgentRoomsReq.prototype.request = null;
    
            /**
             * AgentRoomsReq codes.
             * @member {Array.<number>} codes
             * @memberof hall.AgentRoomsReq
             * @instance
             */
            AgentRoomsReq.prototype.codes = $util.emptyArray;
    
            /**
             * Creates a new AgentRoomsReq instance using the specified properties.
             * @function create
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {hall.IAgentRoomsReq=} [properties] Properties to set
             * @returns {hall.AgentRoomsReq} AgentRoomsReq instance
             */
            AgentRoomsReq.create = function create(properties) {
                return new AgentRoomsReq(properties);
            };
    
            /**
             * Encodes the specified AgentRoomsReq message. Does not implicitly {@link hall.AgentRoomsReq.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {hall.IAgentRoomsReq} message AgentRoomsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.codes != null && message.codes.length)
                    for (var i = 0; i < message.codes.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.codes[i]);
                return writer;
            };
    
            /**
             * Encodes the specified AgentRoomsReq message, length delimited. Does not implicitly {@link hall.AgentRoomsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {hall.IAgentRoomsReq} message AgentRoomsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentRoomsReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentRoomsReq} AgentRoomsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentRoomsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.codes && message.codes.length))
                            message.codes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.codes.push(reader.uint32());
                        } else
                            message.codes.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentRoomsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentRoomsReq} AgentRoomsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentRoomsReq message.
             * @function verify
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentRoomsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.codes != null && message.hasOwnProperty("codes")) {
                    if (!Array.isArray(message.codes))
                        return "codes: array expected";
                    for (var i = 0; i < message.codes.length; ++i)
                        if (!$util.isInteger(message.codes[i]))
                            return "codes: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates an AgentRoomsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentRoomsReq} AgentRoomsReq
             */
            AgentRoomsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentRoomsReq)
                    return object;
                var message = new $root.hall.AgentRoomsReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.AgentRoomsReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.codes) {
                    if (!Array.isArray(object.codes))
                        throw TypeError(".hall.AgentRoomsReq.codes: array expected");
                    message.codes = [];
                    for (var i = 0; i < object.codes.length; ++i)
                        message.codes[i] = object.codes[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AgentRoomsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentRoomsReq
             * @static
             * @param {hall.AgentRoomsReq} message AgentRoomsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentRoomsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.codes = [];
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.codes && message.codes.length) {
                    object.codes = [];
                    for (var j = 0; j < message.codes.length; ++j)
                        object.codes[j] = message.codes[j];
                }
                return object;
            };
    
            /**
             * Converts this AgentRoomsReq to JSON.
             * @function toJSON
             * @memberof hall.AgentRoomsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentRoomsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentRoomsReq;
        })();
    
        hall.AgentPlayer = (function() {
    
            /**
             * Properties of an AgentPlayer.
             * @memberof hall
             * @interface IAgentPlayer
             * @property {common.IPlayerInfo|null} [playerInfo] AgentPlayer playerInfo
             * @property {number|null} [seatId] AgentPlayer seatId
             * @property {number|null} [ip] AgentPlayer ip
             * @property {number|null} [score] AgentPlayer score
             */
    
            /**
             * Constructs a new AgentPlayer.
             * @memberof hall
             * @classdesc Represents an AgentPlayer.
             * @implements IAgentPlayer
             * @constructor
             * @param {hall.IAgentPlayer=} [properties] Properties to set
             */
            function AgentPlayer(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentPlayer playerInfo.
             * @member {common.IPlayerInfo|null|undefined} playerInfo
             * @memberof hall.AgentPlayer
             * @instance
             */
            AgentPlayer.prototype.playerInfo = null;
    
            /**
             * AgentPlayer seatId.
             * @member {number} seatId
             * @memberof hall.AgentPlayer
             * @instance
             */
            AgentPlayer.prototype.seatId = 0;
    
            /**
             * AgentPlayer ip.
             * @member {number} ip
             * @memberof hall.AgentPlayer
             * @instance
             */
            AgentPlayer.prototype.ip = 0;
    
            /**
             * AgentPlayer score.
             * @member {number} score
             * @memberof hall.AgentPlayer
             * @instance
             */
            AgentPlayer.prototype.score = 0;
    
            /**
             * Creates a new AgentPlayer instance using the specified properties.
             * @function create
             * @memberof hall.AgentPlayer
             * @static
             * @param {hall.IAgentPlayer=} [properties] Properties to set
             * @returns {hall.AgentPlayer} AgentPlayer instance
             */
            AgentPlayer.create = function create(properties) {
                return new AgentPlayer(properties);
            };
    
            /**
             * Encodes the specified AgentPlayer message. Does not implicitly {@link hall.AgentPlayer.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentPlayer
             * @static
             * @param {hall.IAgentPlayer} message AgentPlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentPlayer.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    $root.common.PlayerInfo.encode(message.playerInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.seatId);
                if (message.ip != null && message.hasOwnProperty("ip"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ip);
                if (message.score != null && message.hasOwnProperty("score"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.score);
                return writer;
            };
    
            /**
             * Encodes the specified AgentPlayer message, length delimited. Does not implicitly {@link hall.AgentPlayer.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentPlayer
             * @static
             * @param {hall.IAgentPlayer} message AgentPlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentPlayer.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentPlayer message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentPlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentPlayer} AgentPlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentPlayer.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentPlayer();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.playerInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.seatId = reader.uint32();
                        break;
                    case 3:
                        message.ip = reader.uint32();
                        break;
                    case 9:
                        message.score = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentPlayer message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentPlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentPlayer} AgentPlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentPlayer.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentPlayer message.
             * @function verify
             * @memberof hall.AgentPlayer
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentPlayer.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
                    var error = $root.common.PlayerInfo.verify(message.playerInfo);
                    if (error)
                        return "playerInfo." + error;
                }
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    if (!$util.isInteger(message.seatId))
                        return "seatId: integer expected";
                if (message.ip != null && message.hasOwnProperty("ip"))
                    if (!$util.isInteger(message.ip))
                        return "ip: integer expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentPlayer message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentPlayer
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentPlayer} AgentPlayer
             */
            AgentPlayer.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentPlayer)
                    return object;
                var message = new $root.hall.AgentPlayer();
                if (object.playerInfo != null) {
                    if (typeof object.playerInfo !== "object")
                        throw TypeError(".hall.AgentPlayer.playerInfo: object expected");
                    message.playerInfo = $root.common.PlayerInfo.fromObject(object.playerInfo);
                }
                if (object.seatId != null)
                    message.seatId = object.seatId >>> 0;
                if (object.ip != null)
                    message.ip = object.ip >>> 0;
                if (object.score != null)
                    message.score = object.score | 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentPlayer message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentPlayer
             * @static
             * @param {hall.AgentPlayer} message AgentPlayer
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentPlayer.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.playerInfo = null;
                    object.seatId = 0;
                    object.ip = 0;
                    object.score = 0;
                }
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    object.playerInfo = $root.common.PlayerInfo.toObject(message.playerInfo, options);
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    object.seatId = message.seatId;
                if (message.ip != null && message.hasOwnProperty("ip"))
                    object.ip = message.ip;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                return object;
            };
    
            /**
             * Converts this AgentPlayer to JSON.
             * @function toJSON
             * @memberof hall.AgentPlayer
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentPlayer.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentPlayer;
        })();
    
        hall.AgentRoomInfo = (function() {
    
            /**
             * Properties of an AgentRoomInfo.
             * @memberof hall
             * @interface IAgentRoomInfo
             * @property {number|null} [code] AgentRoomInfo code
             * @property {number|null} [createTime] AgentRoomInfo createTime
             * @property {number|null} [curTurn] AgentRoomInfo curTurn
             * @property {hall.IBuildInfo|null} [buildInfo] AgentRoomInfo buildInfo
             * @property {Array.<hall.IAgentPlayer>|null} [playerInfos] AgentRoomInfo playerInfos
             * @property {boolean|null} [gameOver] AgentRoomInfo gameOver
             * @property {number|null} [gameId] AgentRoomInfo gameId
             * @property {boolean|null} [started] AgentRoomInfo started
             * @property {number|null} [clubID] AgentRoomInfo clubID
             * @property {number|null} [masterID] AgentRoomInfo masterID
             * @property {number|null} [capacity] AgentRoomInfo capacity
             * @property {number|null} [status] AgentRoomInfo status
             */
    
            /**
             * Constructs a new AgentRoomInfo.
             * @memberof hall
             * @classdesc Represents an AgentRoomInfo.
             * @implements IAgentRoomInfo
             * @constructor
             * @param {hall.IAgentRoomInfo=} [properties] Properties to set
             */
            function AgentRoomInfo(properties) {
                this.playerInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentRoomInfo code.
             * @member {number} code
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.code = 0;
    
            /**
             * AgentRoomInfo createTime.
             * @member {number} createTime
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.createTime = 0;
    
            /**
             * AgentRoomInfo curTurn.
             * @member {number} curTurn
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.curTurn = 0;
    
            /**
             * AgentRoomInfo buildInfo.
             * @member {hall.IBuildInfo|null|undefined} buildInfo
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.buildInfo = null;
    
            /**
             * AgentRoomInfo playerInfos.
             * @member {Array.<hall.IAgentPlayer>} playerInfos
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.playerInfos = $util.emptyArray;
    
            /**
             * AgentRoomInfo gameOver.
             * @member {boolean} gameOver
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.gameOver = false;
    
            /**
             * AgentRoomInfo gameId.
             * @member {number} gameId
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.gameId = 0;
    
            /**
             * AgentRoomInfo started.
             * @member {boolean} started
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.started = false;
    
            /**
             * AgentRoomInfo clubID.
             * @member {number} clubID
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.clubID = 0;
    
            /**
             * AgentRoomInfo masterID.
             * @member {number} masterID
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.masterID = 0;
    
            /**
             * AgentRoomInfo capacity.
             * @member {number} capacity
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.capacity = 0;
    
            /**
             * AgentRoomInfo status.
             * @member {number} status
             * @memberof hall.AgentRoomInfo
             * @instance
             */
            AgentRoomInfo.prototype.status = 0;
    
            /**
             * Creates a new AgentRoomInfo instance using the specified properties.
             * @function create
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {hall.IAgentRoomInfo=} [properties] Properties to set
             * @returns {hall.AgentRoomInfo} AgentRoomInfo instance
             */
            AgentRoomInfo.create = function create(properties) {
                return new AgentRoomInfo(properties);
            };
    
            /**
             * Encodes the specified AgentRoomInfo message. Does not implicitly {@link hall.AgentRoomInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {hall.IAgentRoomInfo} message AgentRoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.createTime);
                if (message.curTurn != null && message.hasOwnProperty("curTurn"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.curTurn);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.hall.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.playerInfos != null && message.playerInfos.length)
                    for (var i = 0; i < message.playerInfos.length; ++i)
                        $root.hall.AgentPlayer.encode(message.playerInfos[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.gameOver != null && message.hasOwnProperty("gameOver"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.gameOver);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.gameId);
                if (message.started != null && message.hasOwnProperty("started"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.started);
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.clubID);
                if (message.masterID != null && message.hasOwnProperty("masterID"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.masterID);
                if (message.capacity != null && message.hasOwnProperty("capacity"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.capacity);
                if (message.status != null && message.hasOwnProperty("status"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.status);
                return writer;
            };
    
            /**
             * Encodes the specified AgentRoomInfo message, length delimited. Does not implicitly {@link hall.AgentRoomInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {hall.IAgentRoomInfo} message AgentRoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentRoomInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentRoomInfo} AgentRoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentRoomInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        message.createTime = reader.uint32();
                        break;
                    case 3:
                        message.curTurn = reader.uint32();
                        break;
                    case 4:
                        message.buildInfo = $root.hall.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 5:
                        if (!(message.playerInfos && message.playerInfos.length))
                            message.playerInfos = [];
                        message.playerInfos.push($root.hall.AgentPlayer.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        message.gameOver = reader.bool();
                        break;
                    case 7:
                        message.gameId = reader.uint32();
                        break;
                    case 8:
                        message.started = reader.bool();
                        break;
                    case 9:
                        message.clubID = reader.uint32();
                        break;
                    case 10:
                        message.masterID = reader.uint32();
                        break;
                    case 11:
                        message.capacity = reader.uint32();
                        break;
                    case 12:
                        message.status = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentRoomInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentRoomInfo} AgentRoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentRoomInfo message.
             * @function verify
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentRoomInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    if (!$util.isInteger(message.createTime))
                        return "createTime: integer expected";
                if (message.curTurn != null && message.hasOwnProperty("curTurn"))
                    if (!$util.isInteger(message.curTurn))
                        return "curTurn: integer expected";
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.hall.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.playerInfos != null && message.hasOwnProperty("playerInfos")) {
                    if (!Array.isArray(message.playerInfos))
                        return "playerInfos: array expected";
                    for (var i = 0; i < message.playerInfos.length; ++i) {
                        var error = $root.hall.AgentPlayer.verify(message.playerInfos[i]);
                        if (error)
                            return "playerInfos." + error;
                    }
                }
                if (message.gameOver != null && message.hasOwnProperty("gameOver"))
                    if (typeof message.gameOver !== "boolean")
                        return "gameOver: boolean expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.started != null && message.hasOwnProperty("started"))
                    if (typeof message.started !== "boolean")
                        return "started: boolean expected";
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    if (!$util.isInteger(message.clubID))
                        return "clubID: integer expected";
                if (message.masterID != null && message.hasOwnProperty("masterID"))
                    if (!$util.isInteger(message.masterID))
                        return "masterID: integer expected";
                if (message.capacity != null && message.hasOwnProperty("capacity"))
                    if (!$util.isInteger(message.capacity))
                        return "capacity: integer expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentRoomInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentRoomInfo} AgentRoomInfo
             */
            AgentRoomInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentRoomInfo)
                    return object;
                var message = new $root.hall.AgentRoomInfo();
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.createTime != null)
                    message.createTime = object.createTime >>> 0;
                if (object.curTurn != null)
                    message.curTurn = object.curTurn >>> 0;
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".hall.AgentRoomInfo.buildInfo: object expected");
                    message.buildInfo = $root.hall.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.playerInfos) {
                    if (!Array.isArray(object.playerInfos))
                        throw TypeError(".hall.AgentRoomInfo.playerInfos: array expected");
                    message.playerInfos = [];
                    for (var i = 0; i < object.playerInfos.length; ++i) {
                        if (typeof object.playerInfos[i] !== "object")
                            throw TypeError(".hall.AgentRoomInfo.playerInfos: object expected");
                        message.playerInfos[i] = $root.hall.AgentPlayer.fromObject(object.playerInfos[i]);
                    }
                }
                if (object.gameOver != null)
                    message.gameOver = Boolean(object.gameOver);
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.started != null)
                    message.started = Boolean(object.started);
                if (object.clubID != null)
                    message.clubID = object.clubID >>> 0;
                if (object.masterID != null)
                    message.masterID = object.masterID >>> 0;
                if (object.capacity != null)
                    message.capacity = object.capacity >>> 0;
                if (object.status != null)
                    message.status = object.status >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentRoomInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentRoomInfo
             * @static
             * @param {hall.AgentRoomInfo} message AgentRoomInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentRoomInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.playerInfos = [];
                if (options.defaults) {
                    object.code = 0;
                    object.createTime = 0;
                    object.curTurn = 0;
                    object.buildInfo = null;
                    object.gameOver = false;
                    object.gameId = 0;
                    object.started = false;
                    object.clubID = 0;
                    object.masterID = 0;
                    object.capacity = 0;
                    object.status = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    object.createTime = message.createTime;
                if (message.curTurn != null && message.hasOwnProperty("curTurn"))
                    object.curTurn = message.curTurn;
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.hall.BuildInfo.toObject(message.buildInfo, options);
                if (message.playerInfos && message.playerInfos.length) {
                    object.playerInfos = [];
                    for (var j = 0; j < message.playerInfos.length; ++j)
                        object.playerInfos[j] = $root.hall.AgentPlayer.toObject(message.playerInfos[j], options);
                }
                if (message.gameOver != null && message.hasOwnProperty("gameOver"))
                    object.gameOver = message.gameOver;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.started != null && message.hasOwnProperty("started"))
                    object.started = message.started;
                if (message.clubID != null && message.hasOwnProperty("clubID"))
                    object.clubID = message.clubID;
                if (message.masterID != null && message.hasOwnProperty("masterID"))
                    object.masterID = message.masterID;
                if (message.capacity != null && message.hasOwnProperty("capacity"))
                    object.capacity = message.capacity;
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                return object;
            };
    
            /**
             * Converts this AgentRoomInfo to JSON.
             * @function toJSON
             * @memberof hall.AgentRoomInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentRoomInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentRoomInfo;
        })();
    
        hall.AgentRoomsRsp = (function() {
    
            /**
             * Properties of an AgentRoomsRsp.
             * @memberof hall
             * @interface IAgentRoomsRsp
             * @property {common.IResult|null} [result] AgentRoomsRsp result
             * @property {Array.<number>|null} [codes] AgentRoomsRsp codes
             * @property {Array.<hall.IAgentRoomInfo>|null} [agentRoomInfos] AgentRoomsRsp agentRoomInfos
             */
    
            /**
             * Constructs a new AgentRoomsRsp.
             * @memberof hall
             * @classdesc Represents an AgentRoomsRsp.
             * @implements IAgentRoomsRsp
             * @constructor
             * @param {hall.IAgentRoomsRsp=} [properties] Properties to set
             */
            function AgentRoomsRsp(properties) {
                this.codes = [];
                this.agentRoomInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentRoomsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.AgentRoomsRsp
             * @instance
             */
            AgentRoomsRsp.prototype.result = null;
    
            /**
             * AgentRoomsRsp codes.
             * @member {Array.<number>} codes
             * @memberof hall.AgentRoomsRsp
             * @instance
             */
            AgentRoomsRsp.prototype.codes = $util.emptyArray;
    
            /**
             * AgentRoomsRsp agentRoomInfos.
             * @member {Array.<hall.IAgentRoomInfo>} agentRoomInfos
             * @memberof hall.AgentRoomsRsp
             * @instance
             */
            AgentRoomsRsp.prototype.agentRoomInfos = $util.emptyArray;
    
            /**
             * Creates a new AgentRoomsRsp instance using the specified properties.
             * @function create
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {hall.IAgentRoomsRsp=} [properties] Properties to set
             * @returns {hall.AgentRoomsRsp} AgentRoomsRsp instance
             */
            AgentRoomsRsp.create = function create(properties) {
                return new AgentRoomsRsp(properties);
            };
    
            /**
             * Encodes the specified AgentRoomsRsp message. Does not implicitly {@link hall.AgentRoomsRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {hall.IAgentRoomsRsp} message AgentRoomsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.codes != null && message.codes.length)
                    for (var i = 0; i < message.codes.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.codes[i]);
                if (message.agentRoomInfos != null && message.agentRoomInfos.length)
                    for (var i = 0; i < message.agentRoomInfos.length; ++i)
                        $root.hall.AgentRoomInfo.encode(message.agentRoomInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AgentRoomsRsp message, length delimited. Does not implicitly {@link hall.AgentRoomsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {hall.IAgentRoomsRsp} message AgentRoomsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentRoomsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentRoomsRsp} AgentRoomsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentRoomsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.codes && message.codes.length))
                            message.codes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.codes.push(reader.uint32());
                        } else
                            message.codes.push(reader.uint32());
                        break;
                    case 3:
                        if (!(message.agentRoomInfos && message.agentRoomInfos.length))
                            message.agentRoomInfos = [];
                        message.agentRoomInfos.push($root.hall.AgentRoomInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentRoomsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentRoomsRsp} AgentRoomsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentRoomsRsp message.
             * @function verify
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentRoomsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.codes != null && message.hasOwnProperty("codes")) {
                    if (!Array.isArray(message.codes))
                        return "codes: array expected";
                    for (var i = 0; i < message.codes.length; ++i)
                        if (!$util.isInteger(message.codes[i]))
                            return "codes: integer[] expected";
                }
                if (message.agentRoomInfos != null && message.hasOwnProperty("agentRoomInfos")) {
                    if (!Array.isArray(message.agentRoomInfos))
                        return "agentRoomInfos: array expected";
                    for (var i = 0; i < message.agentRoomInfos.length; ++i) {
                        var error = $root.hall.AgentRoomInfo.verify(message.agentRoomInfos[i]);
                        if (error)
                            return "agentRoomInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an AgentRoomsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentRoomsRsp} AgentRoomsRsp
             */
            AgentRoomsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentRoomsRsp)
                    return object;
                var message = new $root.hall.AgentRoomsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.AgentRoomsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.codes) {
                    if (!Array.isArray(object.codes))
                        throw TypeError(".hall.AgentRoomsRsp.codes: array expected");
                    message.codes = [];
                    for (var i = 0; i < object.codes.length; ++i)
                        message.codes[i] = object.codes[i] >>> 0;
                }
                if (object.agentRoomInfos) {
                    if (!Array.isArray(object.agentRoomInfos))
                        throw TypeError(".hall.AgentRoomsRsp.agentRoomInfos: array expected");
                    message.agentRoomInfos = [];
                    for (var i = 0; i < object.agentRoomInfos.length; ++i) {
                        if (typeof object.agentRoomInfos[i] !== "object")
                            throw TypeError(".hall.AgentRoomsRsp.agentRoomInfos: object expected");
                        message.agentRoomInfos[i] = $root.hall.AgentRoomInfo.fromObject(object.agentRoomInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AgentRoomsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentRoomsRsp
             * @static
             * @param {hall.AgentRoomsRsp} message AgentRoomsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentRoomsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.codes = [];
                    object.agentRoomInfos = [];
                }
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.codes && message.codes.length) {
                    object.codes = [];
                    for (var j = 0; j < message.codes.length; ++j)
                        object.codes[j] = message.codes[j];
                }
                if (message.agentRoomInfos && message.agentRoomInfos.length) {
                    object.agentRoomInfos = [];
                    for (var j = 0; j < message.agentRoomInfos.length; ++j)
                        object.agentRoomInfos[j] = $root.hall.AgentRoomInfo.toObject(message.agentRoomInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this AgentRoomsRsp to JSON.
             * @function toJSON
             * @memberof hall.AgentRoomsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentRoomsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentRoomsRsp;
        })();
    
        hall.AgentRoomBillReq = (function() {
    
            /**
             * Properties of an AgentRoomBillReq.
             * @memberof hall
             * @interface IAgentRoomBillReq
             * @property {common.IRequest|null} [request] AgentRoomBillReq request
             * @property {number|null} [code] AgentRoomBillReq code
             */
    
            /**
             * Constructs a new AgentRoomBillReq.
             * @memberof hall
             * @classdesc Represents an AgentRoomBillReq.
             * @implements IAgentRoomBillReq
             * @constructor
             * @param {hall.IAgentRoomBillReq=} [properties] Properties to set
             */
            function AgentRoomBillReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentRoomBillReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.AgentRoomBillReq
             * @instance
             */
            AgentRoomBillReq.prototype.request = null;
    
            /**
             * AgentRoomBillReq code.
             * @member {number} code
             * @memberof hall.AgentRoomBillReq
             * @instance
             */
            AgentRoomBillReq.prototype.code = 0;
    
            /**
             * Creates a new AgentRoomBillReq instance using the specified properties.
             * @function create
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {hall.IAgentRoomBillReq=} [properties] Properties to set
             * @returns {hall.AgentRoomBillReq} AgentRoomBillReq instance
             */
            AgentRoomBillReq.create = function create(properties) {
                return new AgentRoomBillReq(properties);
            };
    
            /**
             * Encodes the specified AgentRoomBillReq message. Does not implicitly {@link hall.AgentRoomBillReq.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {hall.IAgentRoomBillReq} message AgentRoomBillReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomBillReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified AgentRoomBillReq message, length delimited. Does not implicitly {@link hall.AgentRoomBillReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {hall.IAgentRoomBillReq} message AgentRoomBillReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomBillReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentRoomBillReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentRoomBillReq} AgentRoomBillReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomBillReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentRoomBillReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentRoomBillReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentRoomBillReq} AgentRoomBillReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomBillReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentRoomBillReq message.
             * @function verify
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentRoomBillReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentRoomBillReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentRoomBillReq} AgentRoomBillReq
             */
            AgentRoomBillReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentRoomBillReq)
                    return object;
                var message = new $root.hall.AgentRoomBillReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.AgentRoomBillReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentRoomBillReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentRoomBillReq
             * @static
             * @param {hall.AgentRoomBillReq} message AgentRoomBillReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentRoomBillReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this AgentRoomBillReq to JSON.
             * @function toJSON
             * @memberof hall.AgentRoomBillReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentRoomBillReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentRoomBillReq;
        })();
    
        hall.TurnPoint = (function() {
    
            /**
             * Properties of a TurnPoint.
             * @memberof hall
             * @interface ITurnPoint
             * @property {number|null} [turn] TurnPoint turn
             * @property {number|null} [points] TurnPoint points
             */
    
            /**
             * Constructs a new TurnPoint.
             * @memberof hall
             * @classdesc Represents a TurnPoint.
             * @implements ITurnPoint
             * @constructor
             * @param {hall.ITurnPoint=} [properties] Properties to set
             */
            function TurnPoint(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TurnPoint turn.
             * @member {number} turn
             * @memberof hall.TurnPoint
             * @instance
             */
            TurnPoint.prototype.turn = 0;
    
            /**
             * TurnPoint points.
             * @member {number} points
             * @memberof hall.TurnPoint
             * @instance
             */
            TurnPoint.prototype.points = 0;
    
            /**
             * Creates a new TurnPoint instance using the specified properties.
             * @function create
             * @memberof hall.TurnPoint
             * @static
             * @param {hall.ITurnPoint=} [properties] Properties to set
             * @returns {hall.TurnPoint} TurnPoint instance
             */
            TurnPoint.create = function create(properties) {
                return new TurnPoint(properties);
            };
    
            /**
             * Encodes the specified TurnPoint message. Does not implicitly {@link hall.TurnPoint.verify|verify} messages.
             * @function encode
             * @memberof hall.TurnPoint
             * @static
             * @param {hall.ITurnPoint} message TurnPoint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnPoint.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.turn != null && message.hasOwnProperty("turn"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.turn);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.points);
                return writer;
            };
    
            /**
             * Encodes the specified TurnPoint message, length delimited. Does not implicitly {@link hall.TurnPoint.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.TurnPoint
             * @static
             * @param {hall.ITurnPoint} message TurnPoint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnPoint.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TurnPoint message from the specified reader or buffer.
             * @function decode
             * @memberof hall.TurnPoint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.TurnPoint} TurnPoint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnPoint.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.TurnPoint();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.turn = reader.uint32();
                        break;
                    case 2:
                        message.points = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TurnPoint message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.TurnPoint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.TurnPoint} TurnPoint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnPoint.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TurnPoint message.
             * @function verify
             * @memberof hall.TurnPoint
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TurnPoint.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.turn != null && message.hasOwnProperty("turn"))
                    if (!$util.isInteger(message.turn))
                        return "turn: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                return null;
            };
    
            /**
             * Creates a TurnPoint message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.TurnPoint
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.TurnPoint} TurnPoint
             */
            TurnPoint.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.TurnPoint)
                    return object;
                var message = new $root.hall.TurnPoint();
                if (object.turn != null)
                    message.turn = object.turn >>> 0;
                if (object.points != null)
                    message.points = object.points | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TurnPoint message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.TurnPoint
             * @static
             * @param {hall.TurnPoint} message TurnPoint
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TurnPoint.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.turn = 0;
                    object.points = 0;
                }
                if (message.turn != null && message.hasOwnProperty("turn"))
                    object.turn = message.turn;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                return object;
            };
    
            /**
             * Converts this TurnPoint to JSON.
             * @function toJSON
             * @memberof hall.TurnPoint
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TurnPoint.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TurnPoint;
        })();
    
        hall.PlayerBill = (function() {
    
            /**
             * Properties of a PlayerBill.
             * @memberof hall
             * @interface IPlayerBill
             * @property {number|null} [uid] PlayerBill uid
             * @property {Array.<hall.ITurnPoint>|null} [turnPoints] PlayerBill turnPoints
             */
    
            /**
             * Constructs a new PlayerBill.
             * @memberof hall
             * @classdesc Represents a PlayerBill.
             * @implements IPlayerBill
             * @constructor
             * @param {hall.IPlayerBill=} [properties] Properties to set
             */
            function PlayerBill(properties) {
                this.turnPoints = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PlayerBill uid.
             * @member {number} uid
             * @memberof hall.PlayerBill
             * @instance
             */
            PlayerBill.prototype.uid = 0;
    
            /**
             * PlayerBill turnPoints.
             * @member {Array.<hall.ITurnPoint>} turnPoints
             * @memberof hall.PlayerBill
             * @instance
             */
            PlayerBill.prototype.turnPoints = $util.emptyArray;
    
            /**
             * Creates a new PlayerBill instance using the specified properties.
             * @function create
             * @memberof hall.PlayerBill
             * @static
             * @param {hall.IPlayerBill=} [properties] Properties to set
             * @returns {hall.PlayerBill} PlayerBill instance
             */
            PlayerBill.create = function create(properties) {
                return new PlayerBill(properties);
            };
    
            /**
             * Encodes the specified PlayerBill message. Does not implicitly {@link hall.PlayerBill.verify|verify} messages.
             * @function encode
             * @memberof hall.PlayerBill
             * @static
             * @param {hall.IPlayerBill} message PlayerBill message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBill.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.turnPoints != null && message.turnPoints.length)
                    for (var i = 0; i < message.turnPoints.length; ++i)
                        $root.hall.TurnPoint.encode(message.turnPoints[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PlayerBill message, length delimited. Does not implicitly {@link hall.PlayerBill.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.PlayerBill
             * @static
             * @param {hall.IPlayerBill} message PlayerBill message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBill.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PlayerBill message from the specified reader or buffer.
             * @function decode
             * @memberof hall.PlayerBill
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.PlayerBill} PlayerBill
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBill.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.PlayerBill();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        if (!(message.turnPoints && message.turnPoints.length))
                            message.turnPoints = [];
                        message.turnPoints.push($root.hall.TurnPoint.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PlayerBill message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.PlayerBill
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.PlayerBill} PlayerBill
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBill.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PlayerBill message.
             * @function verify
             * @memberof hall.PlayerBill
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerBill.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.turnPoints != null && message.hasOwnProperty("turnPoints")) {
                    if (!Array.isArray(message.turnPoints))
                        return "turnPoints: array expected";
                    for (var i = 0; i < message.turnPoints.length; ++i) {
                        var error = $root.hall.TurnPoint.verify(message.turnPoints[i]);
                        if (error)
                            return "turnPoints." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PlayerBill message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.PlayerBill
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.PlayerBill} PlayerBill
             */
            PlayerBill.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.PlayerBill)
                    return object;
                var message = new $root.hall.PlayerBill();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.turnPoints) {
                    if (!Array.isArray(object.turnPoints))
                        throw TypeError(".hall.PlayerBill.turnPoints: array expected");
                    message.turnPoints = [];
                    for (var i = 0; i < object.turnPoints.length; ++i) {
                        if (typeof object.turnPoints[i] !== "object")
                            throw TypeError(".hall.PlayerBill.turnPoints: object expected");
                        message.turnPoints[i] = $root.hall.TurnPoint.fromObject(object.turnPoints[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PlayerBill message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.PlayerBill
             * @static
             * @param {hall.PlayerBill} message PlayerBill
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerBill.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.turnPoints = [];
                if (options.defaults)
                    object.uid = 0;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.turnPoints && message.turnPoints.length) {
                    object.turnPoints = [];
                    for (var j = 0; j < message.turnPoints.length; ++j)
                        object.turnPoints[j] = $root.hall.TurnPoint.toObject(message.turnPoints[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PlayerBill to JSON.
             * @function toJSON
             * @memberof hall.PlayerBill
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerBill.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PlayerBill;
        })();
    
        hall.AgentRoomBillRsp = (function() {
    
            /**
             * Properties of an AgentRoomBillRsp.
             * @memberof hall
             * @interface IAgentRoomBillRsp
             * @property {common.IResult|null} [result] AgentRoomBillRsp result
             * @property {number|null} [code] AgentRoomBillRsp code
             * @property {Array.<hall.IPlayerBill>|null} [bills] AgentRoomBillRsp bills
             */
    
            /**
             * Constructs a new AgentRoomBillRsp.
             * @memberof hall
             * @classdesc Represents an AgentRoomBillRsp.
             * @implements IAgentRoomBillRsp
             * @constructor
             * @param {hall.IAgentRoomBillRsp=} [properties] Properties to set
             */
            function AgentRoomBillRsp(properties) {
                this.bills = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentRoomBillRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.AgentRoomBillRsp
             * @instance
             */
            AgentRoomBillRsp.prototype.result = null;
    
            /**
             * AgentRoomBillRsp code.
             * @member {number} code
             * @memberof hall.AgentRoomBillRsp
             * @instance
             */
            AgentRoomBillRsp.prototype.code = 0;
    
            /**
             * AgentRoomBillRsp bills.
             * @member {Array.<hall.IPlayerBill>} bills
             * @memberof hall.AgentRoomBillRsp
             * @instance
             */
            AgentRoomBillRsp.prototype.bills = $util.emptyArray;
    
            /**
             * Creates a new AgentRoomBillRsp instance using the specified properties.
             * @function create
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {hall.IAgentRoomBillRsp=} [properties] Properties to set
             * @returns {hall.AgentRoomBillRsp} AgentRoomBillRsp instance
             */
            AgentRoomBillRsp.create = function create(properties) {
                return new AgentRoomBillRsp(properties);
            };
    
            /**
             * Encodes the specified AgentRoomBillRsp message. Does not implicitly {@link hall.AgentRoomBillRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {hall.IAgentRoomBillRsp} message AgentRoomBillRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomBillRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.bills != null && message.bills.length)
                    for (var i = 0; i < message.bills.length; ++i)
                        $root.hall.PlayerBill.encode(message.bills[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified AgentRoomBillRsp message, length delimited. Does not implicitly {@link hall.AgentRoomBillRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {hall.IAgentRoomBillRsp} message AgentRoomBillRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentRoomBillRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentRoomBillRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.AgentRoomBillRsp} AgentRoomBillRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomBillRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.AgentRoomBillRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.code = reader.uint32();
                        break;
                    case 2:
                        if (!(message.bills && message.bills.length))
                            message.bills = [];
                        message.bills.push($root.hall.PlayerBill.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentRoomBillRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.AgentRoomBillRsp} AgentRoomBillRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentRoomBillRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentRoomBillRsp message.
             * @function verify
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentRoomBillRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.bills != null && message.hasOwnProperty("bills")) {
                    if (!Array.isArray(message.bills))
                        return "bills: array expected";
                    for (var i = 0; i < message.bills.length; ++i) {
                        var error = $root.hall.PlayerBill.verify(message.bills[i]);
                        if (error)
                            return "bills." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an AgentRoomBillRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.AgentRoomBillRsp} AgentRoomBillRsp
             */
            AgentRoomBillRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.AgentRoomBillRsp)
                    return object;
                var message = new $root.hall.AgentRoomBillRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.AgentRoomBillRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.bills) {
                    if (!Array.isArray(object.bills))
                        throw TypeError(".hall.AgentRoomBillRsp.bills: array expected");
                    message.bills = [];
                    for (var i = 0; i < object.bills.length; ++i) {
                        if (typeof object.bills[i] !== "object")
                            throw TypeError(".hall.AgentRoomBillRsp.bills: object expected");
                        message.bills[i] = $root.hall.PlayerBill.fromObject(object.bills[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AgentRoomBillRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.AgentRoomBillRsp
             * @static
             * @param {hall.AgentRoomBillRsp} message AgentRoomBillRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentRoomBillRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.bills = [];
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.bills && message.bills.length) {
                    object.bills = [];
                    for (var j = 0; j < message.bills.length; ++j)
                        object.bills[j] = $root.hall.PlayerBill.toObject(message.bills[j], options);
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this AgentRoomBillRsp to JSON.
             * @function toJSON
             * @memberof hall.AgentRoomBillRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentRoomBillRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentRoomBillRsp;
        })();
    
        hall.ParlorLoginReq = (function() {
    
            /**
             * Properties of a ParlorLoginReq.
             * @memberof hall
             * @interface IParlorLoginReq
             * @property {common.IRequest|null} [request] ParlorLoginReq request
             * @property {number|null} [code] ParlorLoginReq code
             */
    
            /**
             * Constructs a new ParlorLoginReq.
             * @memberof hall
             * @classdesc Represents a ParlorLoginReq.
             * @implements IParlorLoginReq
             * @constructor
             * @param {hall.IParlorLoginReq=} [properties] Properties to set
             */
            function ParlorLoginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorLoginReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorLoginReq
             * @instance
             */
            ParlorLoginReq.prototype.request = null;
    
            /**
             * ParlorLoginReq code.
             * @member {number} code
             * @memberof hall.ParlorLoginReq
             * @instance
             */
            ParlorLoginReq.prototype.code = 0;
    
            /**
             * Creates a new ParlorLoginReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {hall.IParlorLoginReq=} [properties] Properties to set
             * @returns {hall.ParlorLoginReq} ParlorLoginReq instance
             */
            ParlorLoginReq.create = function create(properties) {
                return new ParlorLoginReq(properties);
            };
    
            /**
             * Encodes the specified ParlorLoginReq message. Does not implicitly {@link hall.ParlorLoginReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {hall.IParlorLoginReq} message ParlorLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLoginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorLoginReq message, length delimited. Does not implicitly {@link hall.ParlorLoginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {hall.IParlorLoginReq} message ParlorLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLoginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorLoginReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorLoginReq} ParlorLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLoginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorLoginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorLoginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorLoginReq} ParlorLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLoginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorLoginReq message.
             * @function verify
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorLoginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates a ParlorLoginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorLoginReq} ParlorLoginReq
             */
            ParlorLoginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorLoginReq)
                    return object;
                var message = new $root.hall.ParlorLoginReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorLoginReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorLoginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorLoginReq
             * @static
             * @param {hall.ParlorLoginReq} message ParlorLoginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorLoginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this ParlorLoginReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorLoginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorLoginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorLoginReq;
        })();
    
        hall.ParlorLoginRsp = (function() {
    
            /**
             * Properties of a ParlorLoginRsp.
             * @memberof hall
             * @interface IParlorLoginRsp
             * @property {common.IResult|null} [result] ParlorLoginRsp result
             * @property {number|null} [code] ParlorLoginRsp code
             * @property {Array.<hall.IAgentRoomInfo>|null} [agentRoomInfos] ParlorLoginRsp agentRoomInfos
             * @property {common.IPlayerInfo|null} [masterInfo] ParlorLoginRsp masterInfo
             */
    
            /**
             * Constructs a new ParlorLoginRsp.
             * @memberof hall
             * @classdesc Represents a ParlorLoginRsp.
             * @implements IParlorLoginRsp
             * @constructor
             * @param {hall.IParlorLoginRsp=} [properties] Properties to set
             */
            function ParlorLoginRsp(properties) {
                this.agentRoomInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorLoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorLoginRsp
             * @instance
             */
            ParlorLoginRsp.prototype.result = null;
    
            /**
             * ParlorLoginRsp code.
             * @member {number} code
             * @memberof hall.ParlorLoginRsp
             * @instance
             */
            ParlorLoginRsp.prototype.code = 0;
    
            /**
             * ParlorLoginRsp agentRoomInfos.
             * @member {Array.<hall.IAgentRoomInfo>} agentRoomInfos
             * @memberof hall.ParlorLoginRsp
             * @instance
             */
            ParlorLoginRsp.prototype.agentRoomInfos = $util.emptyArray;
    
            /**
             * ParlorLoginRsp masterInfo.
             * @member {common.IPlayerInfo|null|undefined} masterInfo
             * @memberof hall.ParlorLoginRsp
             * @instance
             */
            ParlorLoginRsp.prototype.masterInfo = null;
    
            /**
             * Creates a new ParlorLoginRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {hall.IParlorLoginRsp=} [properties] Properties to set
             * @returns {hall.ParlorLoginRsp} ParlorLoginRsp instance
             */
            ParlorLoginRsp.create = function create(properties) {
                return new ParlorLoginRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorLoginRsp message. Does not implicitly {@link hall.ParlorLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {hall.IParlorLoginRsp} message ParlorLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.agentRoomInfos != null && message.agentRoomInfos.length)
                    for (var i = 0; i < message.agentRoomInfos.length; ++i)
                        $root.hall.AgentRoomInfo.encode(message.agentRoomInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.masterInfo != null && message.hasOwnProperty("masterInfo"))
                    $root.common.PlayerInfo.encode(message.masterInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorLoginRsp message, length delimited. Does not implicitly {@link hall.ParlorLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {hall.IParlorLoginRsp} message ParlorLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorLoginRsp} ParlorLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        if (!(message.agentRoomInfos && message.agentRoomInfos.length))
                            message.agentRoomInfos = [];
                        message.agentRoomInfos.push($root.hall.AgentRoomInfo.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.masterInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorLoginRsp} ParlorLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorLoginRsp message.
             * @function verify
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.agentRoomInfos != null && message.hasOwnProperty("agentRoomInfos")) {
                    if (!Array.isArray(message.agentRoomInfos))
                        return "agentRoomInfos: array expected";
                    for (var i = 0; i < message.agentRoomInfos.length; ++i) {
                        var error = $root.hall.AgentRoomInfo.verify(message.agentRoomInfos[i]);
                        if (error)
                            return "agentRoomInfos." + error;
                    }
                }
                if (message.masterInfo != null && message.hasOwnProperty("masterInfo")) {
                    var error = $root.common.PlayerInfo.verify(message.masterInfo);
                    if (error)
                        return "masterInfo." + error;
                }
                return null;
            };
    
            /**
             * Creates a ParlorLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorLoginRsp} ParlorLoginRsp
             */
            ParlorLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorLoginRsp)
                    return object;
                var message = new $root.hall.ParlorLoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorLoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.agentRoomInfos) {
                    if (!Array.isArray(object.agentRoomInfos))
                        throw TypeError(".hall.ParlorLoginRsp.agentRoomInfos: array expected");
                    message.agentRoomInfos = [];
                    for (var i = 0; i < object.agentRoomInfos.length; ++i) {
                        if (typeof object.agentRoomInfos[i] !== "object")
                            throw TypeError(".hall.ParlorLoginRsp.agentRoomInfos: object expected");
                        message.agentRoomInfos[i] = $root.hall.AgentRoomInfo.fromObject(object.agentRoomInfos[i]);
                    }
                }
                if (object.masterInfo != null) {
                    if (typeof object.masterInfo !== "object")
                        throw TypeError(".hall.ParlorLoginRsp.masterInfo: object expected");
                    message.masterInfo = $root.common.PlayerInfo.fromObject(object.masterInfo);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorLoginRsp
             * @static
             * @param {hall.ParlorLoginRsp} message ParlorLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.agentRoomInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    object.masterInfo = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.agentRoomInfos && message.agentRoomInfos.length) {
                    object.agentRoomInfos = [];
                    for (var j = 0; j < message.agentRoomInfos.length; ++j)
                        object.agentRoomInfos[j] = $root.hall.AgentRoomInfo.toObject(message.agentRoomInfos[j], options);
                }
                if (message.masterInfo != null && message.hasOwnProperty("masterInfo"))
                    object.masterInfo = $root.common.PlayerInfo.toObject(message.masterInfo, options);
                return object;
            };
    
            /**
             * Converts this ParlorLoginRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorLoginRsp;
        })();
    
        hall.ParlorLogoutReq = (function() {
    
            /**
             * Properties of a ParlorLogoutReq.
             * @memberof hall
             * @interface IParlorLogoutReq
             * @property {common.IRequest|null} [request] ParlorLogoutReq request
             */
    
            /**
             * Constructs a new ParlorLogoutReq.
             * @memberof hall
             * @classdesc Represents a ParlorLogoutReq.
             * @implements IParlorLogoutReq
             * @constructor
             * @param {hall.IParlorLogoutReq=} [properties] Properties to set
             */
            function ParlorLogoutReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorLogoutReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorLogoutReq
             * @instance
             */
            ParlorLogoutReq.prototype.request = null;
    
            /**
             * Creates a new ParlorLogoutReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {hall.IParlorLogoutReq=} [properties] Properties to set
             * @returns {hall.ParlorLogoutReq} ParlorLogoutReq instance
             */
            ParlorLogoutReq.create = function create(properties) {
                return new ParlorLogoutReq(properties);
            };
    
            /**
             * Encodes the specified ParlorLogoutReq message. Does not implicitly {@link hall.ParlorLogoutReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {hall.IParlorLogoutReq} message ParlorLogoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLogoutReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorLogoutReq message, length delimited. Does not implicitly {@link hall.ParlorLogoutReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {hall.IParlorLogoutReq} message ParlorLogoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLogoutReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorLogoutReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorLogoutReq} ParlorLogoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLogoutReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorLogoutReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorLogoutReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorLogoutReq} ParlorLogoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLogoutReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorLogoutReq message.
             * @function verify
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorLogoutReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ParlorLogoutReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorLogoutReq} ParlorLogoutReq
             */
            ParlorLogoutReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorLogoutReq)
                    return object;
                var message = new $root.hall.ParlorLogoutReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorLogoutReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorLogoutReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorLogoutReq
             * @static
             * @param {hall.ParlorLogoutReq} message ParlorLogoutReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorLogoutReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ParlorLogoutReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorLogoutReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorLogoutReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorLogoutReq;
        })();
    
        hall.ParlorLogoutRsp = (function() {
    
            /**
             * Properties of a ParlorLogoutRsp.
             * @memberof hall
             * @interface IParlorLogoutRsp
             * @property {common.IResult|null} [result] ParlorLogoutRsp result
             */
    
            /**
             * Constructs a new ParlorLogoutRsp.
             * @memberof hall
             * @classdesc Represents a ParlorLogoutRsp.
             * @implements IParlorLogoutRsp
             * @constructor
             * @param {hall.IParlorLogoutRsp=} [properties] Properties to set
             */
            function ParlorLogoutRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorLogoutRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorLogoutRsp
             * @instance
             */
            ParlorLogoutRsp.prototype.result = null;
    
            /**
             * Creates a new ParlorLogoutRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {hall.IParlorLogoutRsp=} [properties] Properties to set
             * @returns {hall.ParlorLogoutRsp} ParlorLogoutRsp instance
             */
            ParlorLogoutRsp.create = function create(properties) {
                return new ParlorLogoutRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorLogoutRsp message. Does not implicitly {@link hall.ParlorLogoutRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {hall.IParlorLogoutRsp} message ParlorLogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLogoutRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorLogoutRsp message, length delimited. Does not implicitly {@link hall.ParlorLogoutRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {hall.IParlorLogoutRsp} message ParlorLogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorLogoutRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorLogoutRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorLogoutRsp} ParlorLogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLogoutRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorLogoutRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorLogoutRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorLogoutRsp} ParlorLogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorLogoutRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorLogoutRsp message.
             * @function verify
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorLogoutRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a ParlorLogoutRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorLogoutRsp} ParlorLogoutRsp
             */
            ParlorLogoutRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorLogoutRsp)
                    return object;
                var message = new $root.hall.ParlorLogoutRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorLogoutRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorLogoutRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorLogoutRsp
             * @static
             * @param {hall.ParlorLogoutRsp} message ParlorLogoutRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorLogoutRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this ParlorLogoutRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorLogoutRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorLogoutRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorLogoutRsp;
        })();
    
        hall.ParlorRecordReq = (function() {
    
            /**
             * Properties of a ParlorRecordReq.
             * @memberof hall
             * @interface IParlorRecordReq
             * @property {common.IRequest|null} [request] ParlorRecordReq request
             * @property {number|null} [start] ParlorRecordReq start
             * @property {number|null} [max] ParlorRecordReq max
             */
    
            /**
             * Constructs a new ParlorRecordReq.
             * @memberof hall
             * @classdesc Represents a ParlorRecordReq.
             * @implements IParlorRecordReq
             * @constructor
             * @param {hall.IParlorRecordReq=} [properties] Properties to set
             */
            function ParlorRecordReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorRecordReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorRecordReq
             * @instance
             */
            ParlorRecordReq.prototype.request = null;
    
            /**
             * ParlorRecordReq start.
             * @member {number} start
             * @memberof hall.ParlorRecordReq
             * @instance
             */
            ParlorRecordReq.prototype.start = 0;
    
            /**
             * ParlorRecordReq max.
             * @member {number} max
             * @memberof hall.ParlorRecordReq
             * @instance
             */
            ParlorRecordReq.prototype.max = 0;
    
            /**
             * Creates a new ParlorRecordReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {hall.IParlorRecordReq=} [properties] Properties to set
             * @returns {hall.ParlorRecordReq} ParlorRecordReq instance
             */
            ParlorRecordReq.create = function create(properties) {
                return new ParlorRecordReq(properties);
            };
    
            /**
             * Encodes the specified ParlorRecordReq message. Does not implicitly {@link hall.ParlorRecordReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {hall.IParlorRecordReq} message ParlorRecordReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorRecordReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.start != null && message.hasOwnProperty("start"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.start);
                if (message.max != null && message.hasOwnProperty("max"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorRecordReq message, length delimited. Does not implicitly {@link hall.ParlorRecordReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {hall.IParlorRecordReq} message ParlorRecordReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorRecordReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorRecordReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorRecordReq} ParlorRecordReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorRecordReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorRecordReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.start = reader.uint32();
                        break;
                    case 3:
                        message.max = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorRecordReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorRecordReq} ParlorRecordReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorRecordReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorRecordReq message.
             * @function verify
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorRecordReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                    if (!$util.isInteger(message.start))
                        return "start: integer expected";
                if (message.max != null && message.hasOwnProperty("max"))
                    if (!$util.isInteger(message.max))
                        return "max: integer expected";
                return null;
            };
    
            /**
             * Creates a ParlorRecordReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorRecordReq} ParlorRecordReq
             */
            ParlorRecordReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorRecordReq)
                    return object;
                var message = new $root.hall.ParlorRecordReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorRecordReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.start != null)
                    message.start = object.start >>> 0;
                if (object.max != null)
                    message.max = object.max >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorRecordReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorRecordReq
             * @static
             * @param {hall.ParlorRecordReq} message ParlorRecordReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorRecordReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.start = 0;
                    object.max = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.start != null && message.hasOwnProperty("start"))
                    object.start = message.start;
                if (message.max != null && message.hasOwnProperty("max"))
                    object.max = message.max;
                return object;
            };
    
            /**
             * Converts this ParlorRecordReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorRecordReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorRecordReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorRecordReq;
        })();
    
        hall.ParlorRecordRsp = (function() {
    
            /**
             * Properties of a ParlorRecordRsp.
             * @memberof hall
             * @interface IParlorRecordRsp
             * @property {common.IResult|null} [result] ParlorRecordRsp result
             * @property {Array.<hall.IAgentRoomInfo>|null} [agentRoomInfos] ParlorRecordRsp agentRoomInfos
             */
    
            /**
             * Constructs a new ParlorRecordRsp.
             * @memberof hall
             * @classdesc Represents a ParlorRecordRsp.
             * @implements IParlorRecordRsp
             * @constructor
             * @param {hall.IParlorRecordRsp=} [properties] Properties to set
             */
            function ParlorRecordRsp(properties) {
                this.agentRoomInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorRecordRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorRecordRsp
             * @instance
             */
            ParlorRecordRsp.prototype.result = null;
    
            /**
             * ParlorRecordRsp agentRoomInfos.
             * @member {Array.<hall.IAgentRoomInfo>} agentRoomInfos
             * @memberof hall.ParlorRecordRsp
             * @instance
             */
            ParlorRecordRsp.prototype.agentRoomInfos = $util.emptyArray;
    
            /**
             * Creates a new ParlorRecordRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {hall.IParlorRecordRsp=} [properties] Properties to set
             * @returns {hall.ParlorRecordRsp} ParlorRecordRsp instance
             */
            ParlorRecordRsp.create = function create(properties) {
                return new ParlorRecordRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorRecordRsp message. Does not implicitly {@link hall.ParlorRecordRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {hall.IParlorRecordRsp} message ParlorRecordRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorRecordRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.agentRoomInfos != null && message.agentRoomInfos.length)
                    for (var i = 0; i < message.agentRoomInfos.length; ++i)
                        $root.hall.AgentRoomInfo.encode(message.agentRoomInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorRecordRsp message, length delimited. Does not implicitly {@link hall.ParlorRecordRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {hall.IParlorRecordRsp} message ParlorRecordRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorRecordRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorRecordRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorRecordRsp} ParlorRecordRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorRecordRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorRecordRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.agentRoomInfos && message.agentRoomInfos.length))
                            message.agentRoomInfos = [];
                        message.agentRoomInfos.push($root.hall.AgentRoomInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorRecordRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorRecordRsp} ParlorRecordRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorRecordRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorRecordRsp message.
             * @function verify
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorRecordRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.agentRoomInfos != null && message.hasOwnProperty("agentRoomInfos")) {
                    if (!Array.isArray(message.agentRoomInfos))
                        return "agentRoomInfos: array expected";
                    for (var i = 0; i < message.agentRoomInfos.length; ++i) {
                        var error = $root.hall.AgentRoomInfo.verify(message.agentRoomInfos[i]);
                        if (error)
                            return "agentRoomInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a ParlorRecordRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorRecordRsp} ParlorRecordRsp
             */
            ParlorRecordRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorRecordRsp)
                    return object;
                var message = new $root.hall.ParlorRecordRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorRecordRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.agentRoomInfos) {
                    if (!Array.isArray(object.agentRoomInfos))
                        throw TypeError(".hall.ParlorRecordRsp.agentRoomInfos: array expected");
                    message.agentRoomInfos = [];
                    for (var i = 0; i < object.agentRoomInfos.length; ++i) {
                        if (typeof object.agentRoomInfos[i] !== "object")
                            throw TypeError(".hall.ParlorRecordRsp.agentRoomInfos: object expected");
                        message.agentRoomInfos[i] = $root.hall.AgentRoomInfo.fromObject(object.agentRoomInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorRecordRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorRecordRsp
             * @static
             * @param {hall.ParlorRecordRsp} message ParlorRecordRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorRecordRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.agentRoomInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.agentRoomInfos && message.agentRoomInfos.length) {
                    object.agentRoomInfos = [];
                    for (var j = 0; j < message.agentRoomInfos.length; ++j)
                        object.agentRoomInfos[j] = $root.hall.AgentRoomInfo.toObject(message.agentRoomInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this ParlorRecordRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorRecordRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorRecordRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorRecordRsp;
        })();
    
        hall.ParlorBillReq = (function() {
    
            /**
             * Properties of a ParlorBillReq.
             * @memberof hall
             * @interface IParlorBillReq
             * @property {common.IRequest|null} [request] ParlorBillReq request
             * @property {number|null} [code] ParlorBillReq code
             * @property {number|null} [createTime] ParlorBillReq createTime
             */
    
            /**
             * Constructs a new ParlorBillReq.
             * @memberof hall
             * @classdesc Represents a ParlorBillReq.
             * @implements IParlorBillReq
             * @constructor
             * @param {hall.IParlorBillReq=} [properties] Properties to set
             */
            function ParlorBillReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorBillReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorBillReq
             * @instance
             */
            ParlorBillReq.prototype.request = null;
    
            /**
             * ParlorBillReq code.
             * @member {number} code
             * @memberof hall.ParlorBillReq
             * @instance
             */
            ParlorBillReq.prototype.code = 0;
    
            /**
             * ParlorBillReq createTime.
             * @member {number} createTime
             * @memberof hall.ParlorBillReq
             * @instance
             */
            ParlorBillReq.prototype.createTime = 0;
    
            /**
             * Creates a new ParlorBillReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorBillReq
             * @static
             * @param {hall.IParlorBillReq=} [properties] Properties to set
             * @returns {hall.ParlorBillReq} ParlorBillReq instance
             */
            ParlorBillReq.create = function create(properties) {
                return new ParlorBillReq(properties);
            };
    
            /**
             * Encodes the specified ParlorBillReq message. Does not implicitly {@link hall.ParlorBillReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorBillReq
             * @static
             * @param {hall.IParlorBillReq} message ParlorBillReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBillReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.createTime);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorBillReq message, length delimited. Does not implicitly {@link hall.ParlorBillReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorBillReq
             * @static
             * @param {hall.IParlorBillReq} message ParlorBillReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBillReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorBillReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorBillReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorBillReq} ParlorBillReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBillReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorBillReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.createTime = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorBillReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorBillReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorBillReq} ParlorBillReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBillReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorBillReq message.
             * @function verify
             * @memberof hall.ParlorBillReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorBillReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    if (!$util.isInteger(message.createTime))
                        return "createTime: integer expected";
                return null;
            };
    
            /**
             * Creates a ParlorBillReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorBillReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorBillReq} ParlorBillReq
             */
            ParlorBillReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorBillReq)
                    return object;
                var message = new $root.hall.ParlorBillReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorBillReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.createTime != null)
                    message.createTime = object.createTime >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorBillReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorBillReq
             * @static
             * @param {hall.ParlorBillReq} message ParlorBillReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorBillReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                    object.createTime = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    object.createTime = message.createTime;
                return object;
            };
    
            /**
             * Converts this ParlorBillReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorBillReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorBillReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorBillReq;
        })();
    
        hall.ParlorBillRsp = (function() {
    
            /**
             * Properties of a ParlorBillRsp.
             * @memberof hall
             * @interface IParlorBillRsp
             * @property {common.IResult|null} [result] ParlorBillRsp result
             * @property {number|null} [code] ParlorBillRsp code
             * @property {number|null} [createTime] ParlorBillRsp createTime
             * @property {boolean|null} [playing] ParlorBillRsp playing
             * @property {Array.<hall.IPlayerBill>|null} [bills] ParlorBillRsp bills
             */
    
            /**
             * Constructs a new ParlorBillRsp.
             * @memberof hall
             * @classdesc Represents a ParlorBillRsp.
             * @implements IParlorBillRsp
             * @constructor
             * @param {hall.IParlorBillRsp=} [properties] Properties to set
             */
            function ParlorBillRsp(properties) {
                this.bills = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorBillRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorBillRsp
             * @instance
             */
            ParlorBillRsp.prototype.result = null;
    
            /**
             * ParlorBillRsp code.
             * @member {number} code
             * @memberof hall.ParlorBillRsp
             * @instance
             */
            ParlorBillRsp.prototype.code = 0;
    
            /**
             * ParlorBillRsp createTime.
             * @member {number} createTime
             * @memberof hall.ParlorBillRsp
             * @instance
             */
            ParlorBillRsp.prototype.createTime = 0;
    
            /**
             * ParlorBillRsp playing.
             * @member {boolean} playing
             * @memberof hall.ParlorBillRsp
             * @instance
             */
            ParlorBillRsp.prototype.playing = false;
    
            /**
             * ParlorBillRsp bills.
             * @member {Array.<hall.IPlayerBill>} bills
             * @memberof hall.ParlorBillRsp
             * @instance
             */
            ParlorBillRsp.prototype.bills = $util.emptyArray;
    
            /**
             * Creates a new ParlorBillRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {hall.IParlorBillRsp=} [properties] Properties to set
             * @returns {hall.ParlorBillRsp} ParlorBillRsp instance
             */
            ParlorBillRsp.create = function create(properties) {
                return new ParlorBillRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorBillRsp message. Does not implicitly {@link hall.ParlorBillRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {hall.IParlorBillRsp} message ParlorBillRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBillRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.createTime);
                if (message.playing != null && message.hasOwnProperty("playing"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.playing);
                if (message.bills != null && message.bills.length)
                    for (var i = 0; i < message.bills.length; ++i)
                        $root.hall.PlayerBill.encode(message.bills[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorBillRsp message, length delimited. Does not implicitly {@link hall.ParlorBillRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {hall.IParlorBillRsp} message ParlorBillRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBillRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorBillRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorBillRsp} ParlorBillRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBillRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorBillRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.createTime = reader.uint32();
                        break;
                    case 4:
                        message.playing = reader.bool();
                        break;
                    case 5:
                        if (!(message.bills && message.bills.length))
                            message.bills = [];
                        message.bills.push($root.hall.PlayerBill.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorBillRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorBillRsp} ParlorBillRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBillRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorBillRsp message.
             * @function verify
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorBillRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    if (!$util.isInteger(message.createTime))
                        return "createTime: integer expected";
                if (message.playing != null && message.hasOwnProperty("playing"))
                    if (typeof message.playing !== "boolean")
                        return "playing: boolean expected";
                if (message.bills != null && message.hasOwnProperty("bills")) {
                    if (!Array.isArray(message.bills))
                        return "bills: array expected";
                    for (var i = 0; i < message.bills.length; ++i) {
                        var error = $root.hall.PlayerBill.verify(message.bills[i]);
                        if (error)
                            return "bills." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a ParlorBillRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorBillRsp} ParlorBillRsp
             */
            ParlorBillRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorBillRsp)
                    return object;
                var message = new $root.hall.ParlorBillRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorBillRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.createTime != null)
                    message.createTime = object.createTime >>> 0;
                if (object.playing != null)
                    message.playing = Boolean(object.playing);
                if (object.bills) {
                    if (!Array.isArray(object.bills))
                        throw TypeError(".hall.ParlorBillRsp.bills: array expected");
                    message.bills = [];
                    for (var i = 0; i < object.bills.length; ++i) {
                        if (typeof object.bills[i] !== "object")
                            throw TypeError(".hall.ParlorBillRsp.bills: object expected");
                        message.bills[i] = $root.hall.PlayerBill.fromObject(object.bills[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorBillRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorBillRsp
             * @static
             * @param {hall.ParlorBillRsp} message ParlorBillRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorBillRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.bills = [];
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    object.createTime = 0;
                    object.playing = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                    object.createTime = message.createTime;
                if (message.playing != null && message.hasOwnProperty("playing"))
                    object.playing = message.playing;
                if (message.bills && message.bills.length) {
                    object.bills = [];
                    for (var j = 0; j < message.bills.length; ++j)
                        object.bills[j] = $root.hall.PlayerBill.toObject(message.bills[j], options);
                }
                return object;
            };
    
            /**
             * Converts this ParlorBillRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorBillRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorBillRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorBillRsp;
        })();
    
        hall.ParlorResetReq = (function() {
    
            /**
             * Properties of a ParlorResetReq.
             * @memberof hall
             * @interface IParlorResetReq
             * @property {common.IRequest|null} [request] ParlorResetReq request
             */
    
            /**
             * Constructs a new ParlorResetReq.
             * @memberof hall
             * @classdesc Represents a ParlorResetReq.
             * @implements IParlorResetReq
             * @constructor
             * @param {hall.IParlorResetReq=} [properties] Properties to set
             */
            function ParlorResetReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorResetReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorResetReq
             * @instance
             */
            ParlorResetReq.prototype.request = null;
    
            /**
             * Creates a new ParlorResetReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorResetReq
             * @static
             * @param {hall.IParlorResetReq=} [properties] Properties to set
             * @returns {hall.ParlorResetReq} ParlorResetReq instance
             */
            ParlorResetReq.create = function create(properties) {
                return new ParlorResetReq(properties);
            };
    
            /**
             * Encodes the specified ParlorResetReq message. Does not implicitly {@link hall.ParlorResetReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorResetReq
             * @static
             * @param {hall.IParlorResetReq} message ParlorResetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorResetReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ParlorResetReq message, length delimited. Does not implicitly {@link hall.ParlorResetReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorResetReq
             * @static
             * @param {hall.IParlorResetReq} message ParlorResetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorResetReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorResetReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorResetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorResetReq} ParlorResetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorResetReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorResetReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorResetReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorResetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorResetReq} ParlorResetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorResetReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorResetReq message.
             * @function verify
             * @memberof hall.ParlorResetReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorResetReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ParlorResetReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorResetReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorResetReq} ParlorResetReq
             */
            ParlorResetReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorResetReq)
                    return object;
                var message = new $root.hall.ParlorResetReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorResetReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorResetReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorResetReq
             * @static
             * @param {hall.ParlorResetReq} message ParlorResetReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorResetReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ParlorResetReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorResetReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorResetReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorResetReq;
        })();
    
        hall.ParlorResetRsp = (function() {
    
            /**
             * Properties of a ParlorResetRsp.
             * @memberof hall
             * @interface IParlorResetRsp
             * @property {common.IResult|null} [result] ParlorResetRsp result
             * @property {number|null} [code] ParlorResetRsp code
             */
    
            /**
             * Constructs a new ParlorResetRsp.
             * @memberof hall
             * @classdesc Represents a ParlorResetRsp.
             * @implements IParlorResetRsp
             * @constructor
             * @param {hall.IParlorResetRsp=} [properties] Properties to set
             */
            function ParlorResetRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorResetRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorResetRsp
             * @instance
             */
            ParlorResetRsp.prototype.result = null;
    
            /**
             * ParlorResetRsp code.
             * @member {number} code
             * @memberof hall.ParlorResetRsp
             * @instance
             */
            ParlorResetRsp.prototype.code = 0;
    
            /**
             * Creates a new ParlorResetRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {hall.IParlorResetRsp=} [properties] Properties to set
             * @returns {hall.ParlorResetRsp} ParlorResetRsp instance
             */
            ParlorResetRsp.create = function create(properties) {
                return new ParlorResetRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorResetRsp message. Does not implicitly {@link hall.ParlorResetRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {hall.IParlorResetRsp} message ParlorResetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorResetRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorResetRsp message, length delimited. Does not implicitly {@link hall.ParlorResetRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {hall.IParlorResetRsp} message ParlorResetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorResetRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorResetRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorResetRsp} ParlorResetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorResetRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorResetRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorResetRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorResetRsp} ParlorResetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorResetRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorResetRsp message.
             * @function verify
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorResetRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates a ParlorResetRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorResetRsp} ParlorResetRsp
             */
            ParlorResetRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorResetRsp)
                    return object;
                var message = new $root.hall.ParlorResetRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorResetRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorResetRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorResetRsp
             * @static
             * @param {hall.ParlorResetRsp} message ParlorResetRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorResetRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this ParlorResetRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorResetRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorResetRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorResetRsp;
        })();
    
        hall.ParlorBulletScreenReq = (function() {
    
            /**
             * Properties of a ParlorBulletScreenReq.
             * @memberof hall
             * @interface IParlorBulletScreenReq
             * @property {common.IRequest|null} [request] ParlorBulletScreenReq request
             * @property {number|null} [code] ParlorBulletScreenReq code
             * @property {string|null} [msg] ParlorBulletScreenReq msg
             */
    
            /**
             * Constructs a new ParlorBulletScreenReq.
             * @memberof hall
             * @classdesc Represents a ParlorBulletScreenReq.
             * @implements IParlorBulletScreenReq
             * @constructor
             * @param {hall.IParlorBulletScreenReq=} [properties] Properties to set
             */
            function ParlorBulletScreenReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorBulletScreenReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ParlorBulletScreenReq
             * @instance
             */
            ParlorBulletScreenReq.prototype.request = null;
    
            /**
             * ParlorBulletScreenReq code.
             * @member {number} code
             * @memberof hall.ParlorBulletScreenReq
             * @instance
             */
            ParlorBulletScreenReq.prototype.code = 0;
    
            /**
             * ParlorBulletScreenReq msg.
             * @member {string} msg
             * @memberof hall.ParlorBulletScreenReq
             * @instance
             */
            ParlorBulletScreenReq.prototype.msg = "";
    
            /**
             * Creates a new ParlorBulletScreenReq instance using the specified properties.
             * @function create
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {hall.IParlorBulletScreenReq=} [properties] Properties to set
             * @returns {hall.ParlorBulletScreenReq} ParlorBulletScreenReq instance
             */
            ParlorBulletScreenReq.create = function create(properties) {
                return new ParlorBulletScreenReq(properties);
            };
    
            /**
             * Encodes the specified ParlorBulletScreenReq message. Does not implicitly {@link hall.ParlorBulletScreenReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {hall.IParlorBulletScreenReq} message ParlorBulletScreenReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBulletScreenReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorBulletScreenReq message, length delimited. Does not implicitly {@link hall.ParlorBulletScreenReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {hall.IParlorBulletScreenReq} message ParlorBulletScreenReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBulletScreenReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorBulletScreenReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorBulletScreenReq} ParlorBulletScreenReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBulletScreenReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorBulletScreenReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.msg = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorBulletScreenReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorBulletScreenReq} ParlorBulletScreenReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBulletScreenReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorBulletScreenReq message.
             * @function verify
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorBulletScreenReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                return null;
            };
    
            /**
             * Creates a ParlorBulletScreenReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorBulletScreenReq} ParlorBulletScreenReq
             */
            ParlorBulletScreenReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorBulletScreenReq)
                    return object;
                var message = new $root.hall.ParlorBulletScreenReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ParlorBulletScreenReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.msg != null)
                    message.msg = String(object.msg);
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorBulletScreenReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorBulletScreenReq
             * @static
             * @param {hall.ParlorBulletScreenReq} message ParlorBulletScreenReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorBulletScreenReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                    object.msg = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                return object;
            };
    
            /**
             * Converts this ParlorBulletScreenReq to JSON.
             * @function toJSON
             * @memberof hall.ParlorBulletScreenReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorBulletScreenReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorBulletScreenReq;
        })();
    
        hall.ParlorBulletScreenRsp = (function() {
    
            /**
             * Properties of a ParlorBulletScreenRsp.
             * @memberof hall
             * @interface IParlorBulletScreenRsp
             * @property {common.IResult|null} [result] ParlorBulletScreenRsp result
             * @property {number|null} [code] ParlorBulletScreenRsp code
             * @property {number|null} [uid] ParlorBulletScreenRsp uid
             * @property {string|null} [msg] ParlorBulletScreenRsp msg
             */
    
            /**
             * Constructs a new ParlorBulletScreenRsp.
             * @memberof hall
             * @classdesc Represents a ParlorBulletScreenRsp.
             * @implements IParlorBulletScreenRsp
             * @constructor
             * @param {hall.IParlorBulletScreenRsp=} [properties] Properties to set
             */
            function ParlorBulletScreenRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ParlorBulletScreenRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ParlorBulletScreenRsp
             * @instance
             */
            ParlorBulletScreenRsp.prototype.result = null;
    
            /**
             * ParlorBulletScreenRsp code.
             * @member {number} code
             * @memberof hall.ParlorBulletScreenRsp
             * @instance
             */
            ParlorBulletScreenRsp.prototype.code = 0;
    
            /**
             * ParlorBulletScreenRsp uid.
             * @member {number} uid
             * @memberof hall.ParlorBulletScreenRsp
             * @instance
             */
            ParlorBulletScreenRsp.prototype.uid = 0;
    
            /**
             * ParlorBulletScreenRsp msg.
             * @member {string} msg
             * @memberof hall.ParlorBulletScreenRsp
             * @instance
             */
            ParlorBulletScreenRsp.prototype.msg = "";
    
            /**
             * Creates a new ParlorBulletScreenRsp instance using the specified properties.
             * @function create
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {hall.IParlorBulletScreenRsp=} [properties] Properties to set
             * @returns {hall.ParlorBulletScreenRsp} ParlorBulletScreenRsp instance
             */
            ParlorBulletScreenRsp.create = function create(properties) {
                return new ParlorBulletScreenRsp(properties);
            };
    
            /**
             * Encodes the specified ParlorBulletScreenRsp message. Does not implicitly {@link hall.ParlorBulletScreenRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {hall.IParlorBulletScreenRsp} message ParlorBulletScreenRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBulletScreenRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.uid);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.msg);
                return writer;
            };
    
            /**
             * Encodes the specified ParlorBulletScreenRsp message, length delimited. Does not implicitly {@link hall.ParlorBulletScreenRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {hall.IParlorBulletScreenRsp} message ParlorBulletScreenRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParlorBulletScreenRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ParlorBulletScreenRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ParlorBulletScreenRsp} ParlorBulletScreenRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBulletScreenRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ParlorBulletScreenRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.int32();
                        break;
                    case 3:
                        message.uid = reader.int32();
                        break;
                    case 4:
                        message.msg = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ParlorBulletScreenRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ParlorBulletScreenRsp} ParlorBulletScreenRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParlorBulletScreenRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ParlorBulletScreenRsp message.
             * @function verify
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParlorBulletScreenRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                return null;
            };
    
            /**
             * Creates a ParlorBulletScreenRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ParlorBulletScreenRsp} ParlorBulletScreenRsp
             */
            ParlorBulletScreenRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ParlorBulletScreenRsp)
                    return object;
                var message = new $root.hall.ParlorBulletScreenRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ParlorBulletScreenRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.uid != null)
                    message.uid = object.uid | 0;
                if (object.msg != null)
                    message.msg = String(object.msg);
                return message;
            };
    
            /**
             * Creates a plain object from a ParlorBulletScreenRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ParlorBulletScreenRsp
             * @static
             * @param {hall.ParlorBulletScreenRsp} message ParlorBulletScreenRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParlorBulletScreenRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    object.uid = 0;
                    object.msg = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                return object;
            };
    
            /**
             * Converts this ParlorBulletScreenRsp to JSON.
             * @function toJSON
             * @memberof hall.ParlorBulletScreenRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParlorBulletScreenRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParlorBulletScreenRsp;
        })();
    
        hall.ShopLoginReq = (function() {
    
            /**
             * Properties of a ShopLoginReq.
             * @memberof hall
             * @interface IShopLoginReq
             * @property {common.IRequest|null} [request] ShopLoginReq request
             */
    
            /**
             * Constructs a new ShopLoginReq.
             * @memberof hall
             * @classdesc Represents a ShopLoginReq.
             * @implements IShopLoginReq
             * @constructor
             * @param {hall.IShopLoginReq=} [properties] Properties to set
             */
            function ShopLoginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ShopLoginReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ShopLoginReq
             * @instance
             */
            ShopLoginReq.prototype.request = null;
    
            /**
             * Creates a new ShopLoginReq instance using the specified properties.
             * @function create
             * @memberof hall.ShopLoginReq
             * @static
             * @param {hall.IShopLoginReq=} [properties] Properties to set
             * @returns {hall.ShopLoginReq} ShopLoginReq instance
             */
            ShopLoginReq.create = function create(properties) {
                return new ShopLoginReq(properties);
            };
    
            /**
             * Encodes the specified ShopLoginReq message. Does not implicitly {@link hall.ShopLoginReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ShopLoginReq
             * @static
             * @param {hall.IShopLoginReq} message ShopLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShopLoginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ShopLoginReq message, length delimited. Does not implicitly {@link hall.ShopLoginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ShopLoginReq
             * @static
             * @param {hall.IShopLoginReq} message ShopLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShopLoginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ShopLoginReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ShopLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ShopLoginReq} ShopLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShopLoginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ShopLoginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ShopLoginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ShopLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ShopLoginReq} ShopLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShopLoginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ShopLoginReq message.
             * @function verify
             * @memberof hall.ShopLoginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ShopLoginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ShopLoginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ShopLoginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ShopLoginReq} ShopLoginReq
             */
            ShopLoginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ShopLoginReq)
                    return object;
                var message = new $root.hall.ShopLoginReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ShopLoginReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ShopLoginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ShopLoginReq
             * @static
             * @param {hall.ShopLoginReq} message ShopLoginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ShopLoginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ShopLoginReq to JSON.
             * @function toJSON
             * @memberof hall.ShopLoginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ShopLoginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ShopLoginReq;
        })();
    
        hall.ShopLoginRsp = (function() {
    
            /**
             * Properties of a ShopLoginRsp.
             * @memberof hall
             * @interface IShopLoginRsp
             * @property {common.IResult|null} [result] ShopLoginRsp result
             * @property {string|null} [url] ShopLoginRsp url
             */
    
            /**
             * Constructs a new ShopLoginRsp.
             * @memberof hall
             * @classdesc Represents a ShopLoginRsp.
             * @implements IShopLoginRsp
             * @constructor
             * @param {hall.IShopLoginRsp=} [properties] Properties to set
             */
            function ShopLoginRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ShopLoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ShopLoginRsp
             * @instance
             */
            ShopLoginRsp.prototype.result = null;
    
            /**
             * ShopLoginRsp url.
             * @member {string} url
             * @memberof hall.ShopLoginRsp
             * @instance
             */
            ShopLoginRsp.prototype.url = "";
    
            /**
             * Creates a new ShopLoginRsp instance using the specified properties.
             * @function create
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {hall.IShopLoginRsp=} [properties] Properties to set
             * @returns {hall.ShopLoginRsp} ShopLoginRsp instance
             */
            ShopLoginRsp.create = function create(properties) {
                return new ShopLoginRsp(properties);
            };
    
            /**
             * Encodes the specified ShopLoginRsp message. Does not implicitly {@link hall.ShopLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {hall.IShopLoginRsp} message ShopLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShopLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.url != null && message.hasOwnProperty("url"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                return writer;
            };
    
            /**
             * Encodes the specified ShopLoginRsp message, length delimited. Does not implicitly {@link hall.ShopLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {hall.IShopLoginRsp} message ShopLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ShopLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ShopLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ShopLoginRsp} ShopLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShopLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ShopLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.url = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ShopLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ShopLoginRsp} ShopLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ShopLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ShopLoginRsp message.
             * @function verify
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ShopLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.url != null && message.hasOwnProperty("url"))
                    if (!$util.isString(message.url))
                        return "url: string expected";
                return null;
            };
    
            /**
             * Creates a ShopLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ShopLoginRsp} ShopLoginRsp
             */
            ShopLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ShopLoginRsp)
                    return object;
                var message = new $root.hall.ShopLoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ShopLoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.url != null)
                    message.url = String(object.url);
                return message;
            };
    
            /**
             * Creates a plain object from a ShopLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ShopLoginRsp
             * @static
             * @param {hall.ShopLoginRsp} message ShopLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ShopLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.url = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.url != null && message.hasOwnProperty("url"))
                    object.url = message.url;
                return object;
            };
    
            /**
             * Converts this ShopLoginRsp to JSON.
             * @function toJSON
             * @memberof hall.ShopLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ShopLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ShopLoginRsp;
        })();
    
        hall.ConfigReq = (function() {
    
            /**
             * Properties of a ConfigReq.
             * @memberof hall
             * @interface IConfigReq
             * @property {common.IRequest|null} [request] ConfigReq request
             */
    
            /**
             * Constructs a new ConfigReq.
             * @memberof hall
             * @classdesc Represents a ConfigReq.
             * @implements IConfigReq
             * @constructor
             * @param {hall.IConfigReq=} [properties] Properties to set
             */
            function ConfigReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConfigReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ConfigReq
             * @instance
             */
            ConfigReq.prototype.request = null;
    
            /**
             * Creates a new ConfigReq instance using the specified properties.
             * @function create
             * @memberof hall.ConfigReq
             * @static
             * @param {hall.IConfigReq=} [properties] Properties to set
             * @returns {hall.ConfigReq} ConfigReq instance
             */
            ConfigReq.create = function create(properties) {
                return new ConfigReq(properties);
            };
    
            /**
             * Encodes the specified ConfigReq message. Does not implicitly {@link hall.ConfigReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ConfigReq
             * @static
             * @param {hall.IConfigReq} message ConfigReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfigReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ConfigReq message, length delimited. Does not implicitly {@link hall.ConfigReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ConfigReq
             * @static
             * @param {hall.IConfigReq} message ConfigReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfigReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConfigReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ConfigReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ConfigReq} ConfigReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfigReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ConfigReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConfigReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ConfigReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ConfigReq} ConfigReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfigReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConfigReq message.
             * @function verify
             * @memberof hall.ConfigReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConfigReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ConfigReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ConfigReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ConfigReq} ConfigReq
             */
            ConfigReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ConfigReq)
                    return object;
                var message = new $root.hall.ConfigReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ConfigReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ConfigReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ConfigReq
             * @static
             * @param {hall.ConfigReq} message ConfigReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConfigReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ConfigReq to JSON.
             * @function toJSON
             * @memberof hall.ConfigReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConfigReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ConfigReq;
        })();
    
        hall.Desktop = (function() {
    
            /**
             * Properties of a Desktop.
             * @memberof hall
             * @interface IDesktop
             * @property {Array.<number>|null} [ownIds] Desktop ownIds
             * @property {number|null} [currentId] Desktop currentId
             */
    
            /**
             * Constructs a new Desktop.
             * @memberof hall
             * @classdesc Represents a Desktop.
             * @implements IDesktop
             * @constructor
             * @param {hall.IDesktop=} [properties] Properties to set
             */
            function Desktop(properties) {
                this.ownIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Desktop ownIds.
             * @member {Array.<number>} ownIds
             * @memberof hall.Desktop
             * @instance
             */
            Desktop.prototype.ownIds = $util.emptyArray;
    
            /**
             * Desktop currentId.
             * @member {number} currentId
             * @memberof hall.Desktop
             * @instance
             */
            Desktop.prototype.currentId = 0;
    
            /**
             * Creates a new Desktop instance using the specified properties.
             * @function create
             * @memberof hall.Desktop
             * @static
             * @param {hall.IDesktop=} [properties] Properties to set
             * @returns {hall.Desktop} Desktop instance
             */
            Desktop.create = function create(properties) {
                return new Desktop(properties);
            };
    
            /**
             * Encodes the specified Desktop message. Does not implicitly {@link hall.Desktop.verify|verify} messages.
             * @function encode
             * @memberof hall.Desktop
             * @static
             * @param {hall.IDesktop} message Desktop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Desktop.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ownIds != null && message.ownIds.length)
                    for (var i = 0; i < message.ownIds.length; ++i)
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ownIds[i]);
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.currentId);
                return writer;
            };
    
            /**
             * Encodes the specified Desktop message, length delimited. Does not implicitly {@link hall.Desktop.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.Desktop
             * @static
             * @param {hall.IDesktop} message Desktop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Desktop.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Desktop message from the specified reader or buffer.
             * @function decode
             * @memberof hall.Desktop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.Desktop} Desktop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Desktop.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.Desktop();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.ownIds && message.ownIds.length))
                            message.ownIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ownIds.push(reader.uint32());
                        } else
                            message.ownIds.push(reader.uint32());
                        break;
                    case 2:
                        message.currentId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Desktop message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.Desktop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.Desktop} Desktop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Desktop.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Desktop message.
             * @function verify
             * @memberof hall.Desktop
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Desktop.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ownIds != null && message.hasOwnProperty("ownIds")) {
                    if (!Array.isArray(message.ownIds))
                        return "ownIds: array expected";
                    for (var i = 0; i < message.ownIds.length; ++i)
                        if (!$util.isInteger(message.ownIds[i]))
                            return "ownIds: integer[] expected";
                }
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    if (!$util.isInteger(message.currentId))
                        return "currentId: integer expected";
                return null;
            };
    
            /**
             * Creates a Desktop message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.Desktop
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.Desktop} Desktop
             */
            Desktop.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.Desktop)
                    return object;
                var message = new $root.hall.Desktop();
                if (object.ownIds) {
                    if (!Array.isArray(object.ownIds))
                        throw TypeError(".hall.Desktop.ownIds: array expected");
                    message.ownIds = [];
                    for (var i = 0; i < object.ownIds.length; ++i)
                        message.ownIds[i] = object.ownIds[i] >>> 0;
                }
                if (object.currentId != null)
                    message.currentId = object.currentId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Desktop message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.Desktop
             * @static
             * @param {hall.Desktop} message Desktop
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Desktop.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.ownIds = [];
                if (options.defaults)
                    object.currentId = 0;
                if (message.ownIds && message.ownIds.length) {
                    object.ownIds = [];
                    for (var j = 0; j < message.ownIds.length; ++j)
                        object.ownIds[j] = message.ownIds[j];
                }
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    object.currentId = message.currentId;
                return object;
            };
    
            /**
             * Converts this Desktop to JSON.
             * @function toJSON
             * @memberof hall.Desktop
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Desktop.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Desktop;
        })();
    
        hall.DesktopReq = (function() {
    
            /**
             * Properties of a DesktopReq.
             * @memberof hall
             * @interface IDesktopReq
             * @property {common.IRequest|null} [request] DesktopReq request
             * @property {number|null} [currentId] DesktopReq currentId
             */
    
            /**
             * Constructs a new DesktopReq.
             * @memberof hall
             * @classdesc Represents a DesktopReq.
             * @implements IDesktopReq
             * @constructor
             * @param {hall.IDesktopReq=} [properties] Properties to set
             */
            function DesktopReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DesktopReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.DesktopReq
             * @instance
             */
            DesktopReq.prototype.request = null;
    
            /**
             * DesktopReq currentId.
             * @member {number} currentId
             * @memberof hall.DesktopReq
             * @instance
             */
            DesktopReq.prototype.currentId = 0;
    
            /**
             * Creates a new DesktopReq instance using the specified properties.
             * @function create
             * @memberof hall.DesktopReq
             * @static
             * @param {hall.IDesktopReq=} [properties] Properties to set
             * @returns {hall.DesktopReq} DesktopReq instance
             */
            DesktopReq.create = function create(properties) {
                return new DesktopReq(properties);
            };
    
            /**
             * Encodes the specified DesktopReq message. Does not implicitly {@link hall.DesktopReq.verify|verify} messages.
             * @function encode
             * @memberof hall.DesktopReq
             * @static
             * @param {hall.IDesktopReq} message DesktopReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DesktopReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.currentId);
                return writer;
            };
    
            /**
             * Encodes the specified DesktopReq message, length delimited. Does not implicitly {@link hall.DesktopReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.DesktopReq
             * @static
             * @param {hall.IDesktopReq} message DesktopReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DesktopReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DesktopReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.DesktopReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.DesktopReq} DesktopReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DesktopReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.DesktopReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.currentId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DesktopReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.DesktopReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.DesktopReq} DesktopReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DesktopReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DesktopReq message.
             * @function verify
             * @memberof hall.DesktopReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DesktopReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    if (!$util.isInteger(message.currentId))
                        return "currentId: integer expected";
                return null;
            };
    
            /**
             * Creates a DesktopReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.DesktopReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.DesktopReq} DesktopReq
             */
            DesktopReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.DesktopReq)
                    return object;
                var message = new $root.hall.DesktopReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.DesktopReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.currentId != null)
                    message.currentId = object.currentId | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a DesktopReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.DesktopReq
             * @static
             * @param {hall.DesktopReq} message DesktopReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DesktopReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.currentId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.currentId != null && message.hasOwnProperty("currentId"))
                    object.currentId = message.currentId;
                return object;
            };
    
            /**
             * Converts this DesktopReq to JSON.
             * @function toJSON
             * @memberof hall.DesktopReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DesktopReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DesktopReq;
        })();
    
        hall.DesktopRsp = (function() {
    
            /**
             * Properties of a DesktopRsp.
             * @memberof hall
             * @interface IDesktopRsp
             * @property {common.IResult|null} [result] DesktopRsp result
             * @property {hall.IDesktop|null} [desktop] DesktopRsp desktop
             */
    
            /**
             * Constructs a new DesktopRsp.
             * @memberof hall
             * @classdesc Represents a DesktopRsp.
             * @implements IDesktopRsp
             * @constructor
             * @param {hall.IDesktopRsp=} [properties] Properties to set
             */
            function DesktopRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DesktopRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.DesktopRsp
             * @instance
             */
            DesktopRsp.prototype.result = null;
    
            /**
             * DesktopRsp desktop.
             * @member {hall.IDesktop|null|undefined} desktop
             * @memberof hall.DesktopRsp
             * @instance
             */
            DesktopRsp.prototype.desktop = null;
    
            /**
             * Creates a new DesktopRsp instance using the specified properties.
             * @function create
             * @memberof hall.DesktopRsp
             * @static
             * @param {hall.IDesktopRsp=} [properties] Properties to set
             * @returns {hall.DesktopRsp} DesktopRsp instance
             */
            DesktopRsp.create = function create(properties) {
                return new DesktopRsp(properties);
            };
    
            /**
             * Encodes the specified DesktopRsp message. Does not implicitly {@link hall.DesktopRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.DesktopRsp
             * @static
             * @param {hall.IDesktopRsp} message DesktopRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DesktopRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.desktop != null && message.hasOwnProperty("desktop"))
                    $root.hall.Desktop.encode(message.desktop, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DesktopRsp message, length delimited. Does not implicitly {@link hall.DesktopRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.DesktopRsp
             * @static
             * @param {hall.IDesktopRsp} message DesktopRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DesktopRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DesktopRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.DesktopRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.DesktopRsp} DesktopRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DesktopRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.DesktopRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.desktop = $root.hall.Desktop.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DesktopRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.DesktopRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.DesktopRsp} DesktopRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DesktopRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DesktopRsp message.
             * @function verify
             * @memberof hall.DesktopRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DesktopRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.desktop != null && message.hasOwnProperty("desktop")) {
                    var error = $root.hall.Desktop.verify(message.desktop);
                    if (error)
                        return "desktop." + error;
                }
                return null;
            };
    
            /**
             * Creates a DesktopRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.DesktopRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.DesktopRsp} DesktopRsp
             */
            DesktopRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.DesktopRsp)
                    return object;
                var message = new $root.hall.DesktopRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.DesktopRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.desktop != null) {
                    if (typeof object.desktop !== "object")
                        throw TypeError(".hall.DesktopRsp.desktop: object expected");
                    message.desktop = $root.hall.Desktop.fromObject(object.desktop);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DesktopRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.DesktopRsp
             * @static
             * @param {hall.DesktopRsp} message DesktopRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DesktopRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.desktop = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.desktop != null && message.hasOwnProperty("desktop"))
                    object.desktop = $root.hall.Desktop.toObject(message.desktop, options);
                return object;
            };
    
            /**
             * Converts this DesktopRsp to JSON.
             * @function toJSON
             * @memberof hall.DesktopRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DesktopRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DesktopRsp;
        })();
    
        hall.ActivityEntry = (function() {
    
            /**
             * Properties of an ActivityEntry.
             * @memberof hall
             * @interface IActivityEntry
             * @property {number|null} [id] ActivityEntry id
             * @property {string|null} [content] ActivityEntry content
             * @property {number|null} [order] ActivityEntry order
             * @property {number|null} [isDefault] ActivityEntry isDefault
             */
    
            /**
             * Constructs a new ActivityEntry.
             * @memberof hall
             * @classdesc Represents an ActivityEntry.
             * @implements IActivityEntry
             * @constructor
             * @param {hall.IActivityEntry=} [properties] Properties to set
             */
            function ActivityEntry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ActivityEntry id.
             * @member {number} id
             * @memberof hall.ActivityEntry
             * @instance
             */
            ActivityEntry.prototype.id = 0;
    
            /**
             * ActivityEntry content.
             * @member {string} content
             * @memberof hall.ActivityEntry
             * @instance
             */
            ActivityEntry.prototype.content = "";
    
            /**
             * ActivityEntry order.
             * @member {number} order
             * @memberof hall.ActivityEntry
             * @instance
             */
            ActivityEntry.prototype.order = 0;
    
            /**
             * ActivityEntry isDefault.
             * @member {number} isDefault
             * @memberof hall.ActivityEntry
             * @instance
             */
            ActivityEntry.prototype.isDefault = 0;
    
            /**
             * Creates a new ActivityEntry instance using the specified properties.
             * @function create
             * @memberof hall.ActivityEntry
             * @static
             * @param {hall.IActivityEntry=} [properties] Properties to set
             * @returns {hall.ActivityEntry} ActivityEntry instance
             */
            ActivityEntry.create = function create(properties) {
                return new ActivityEntry(properties);
            };
    
            /**
             * Encodes the specified ActivityEntry message. Does not implicitly {@link hall.ActivityEntry.verify|verify} messages.
             * @function encode
             * @memberof hall.ActivityEntry
             * @static
             * @param {hall.IActivityEntry} message ActivityEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                if (message.order != null && message.hasOwnProperty("order"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.order);
                if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.isDefault);
                return writer;
            };
    
            /**
             * Encodes the specified ActivityEntry message, length delimited. Does not implicitly {@link hall.ActivityEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ActivityEntry
             * @static
             * @param {hall.IActivityEntry} message ActivityEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ActivityEntry message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ActivityEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ActivityEntry} ActivityEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ActivityEntry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.content = reader.string();
                        break;
                    case 3:
                        message.order = reader.uint32();
                        break;
                    case 4:
                        message.isDefault = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ActivityEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ActivityEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ActivityEntry} ActivityEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ActivityEntry message.
             * @function verify
             * @memberof hall.ActivityEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActivityEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                if (message.order != null && message.hasOwnProperty("order"))
                    if (!$util.isInteger(message.order))
                        return "order: integer expected";
                if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                    if (!$util.isInteger(message.isDefault))
                        return "isDefault: integer expected";
                return null;
            };
    
            /**
             * Creates an ActivityEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ActivityEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ActivityEntry} ActivityEntry
             */
            ActivityEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ActivityEntry)
                    return object;
                var message = new $root.hall.ActivityEntry();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.content != null)
                    message.content = String(object.content);
                if (object.order != null)
                    message.order = object.order >>> 0;
                if (object.isDefault != null)
                    message.isDefault = object.isDefault >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an ActivityEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ActivityEntry
             * @static
             * @param {hall.ActivityEntry} message ActivityEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActivityEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.content = "";
                    object.order = 0;
                    object.isDefault = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.order != null && message.hasOwnProperty("order"))
                    object.order = message.order;
                if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                    object.isDefault = message.isDefault;
                return object;
            };
    
            /**
             * Converts this ActivityEntry to JSON.
             * @function toJSON
             * @memberof hall.ActivityEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActivityEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ActivityEntry;
        })();
    
        hall.ActivityInfo = (function() {
    
            /**
             * Properties of an ActivityInfo.
             * @memberof hall
             * @interface IActivityInfo
             * @property {Array.<hall.IActivityEntry>|null} [entryList] ActivityInfo entryList
             * @property {number|null} [showInterval] ActivityInfo showInterval
             */
    
            /**
             * Constructs a new ActivityInfo.
             * @memberof hall
             * @classdesc Represents an ActivityInfo.
             * @implements IActivityInfo
             * @constructor
             * @param {hall.IActivityInfo=} [properties] Properties to set
             */
            function ActivityInfo(properties) {
                this.entryList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ActivityInfo entryList.
             * @member {Array.<hall.IActivityEntry>} entryList
             * @memberof hall.ActivityInfo
             * @instance
             */
            ActivityInfo.prototype.entryList = $util.emptyArray;
    
            /**
             * ActivityInfo showInterval.
             * @member {number} showInterval
             * @memberof hall.ActivityInfo
             * @instance
             */
            ActivityInfo.prototype.showInterval = 0;
    
            /**
             * Creates a new ActivityInfo instance using the specified properties.
             * @function create
             * @memberof hall.ActivityInfo
             * @static
             * @param {hall.IActivityInfo=} [properties] Properties to set
             * @returns {hall.ActivityInfo} ActivityInfo instance
             */
            ActivityInfo.create = function create(properties) {
                return new ActivityInfo(properties);
            };
    
            /**
             * Encodes the specified ActivityInfo message. Does not implicitly {@link hall.ActivityInfo.verify|verify} messages.
             * @function encode
             * @memberof hall.ActivityInfo
             * @static
             * @param {hall.IActivityInfo} message ActivityInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.entryList != null && message.entryList.length)
                    for (var i = 0; i < message.entryList.length; ++i)
                        $root.hall.ActivityEntry.encode(message.entryList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.showInterval);
                return writer;
            };
    
            /**
             * Encodes the specified ActivityInfo message, length delimited. Does not implicitly {@link hall.ActivityInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ActivityInfo
             * @static
             * @param {hall.IActivityInfo} message ActivityInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ActivityInfo message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ActivityInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ActivityInfo} ActivityInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ActivityInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.entryList && message.entryList.length))
                            message.entryList = [];
                        message.entryList.push($root.hall.ActivityEntry.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.showInterval = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ActivityInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ActivityInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ActivityInfo} ActivityInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ActivityInfo message.
             * @function verify
             * @memberof hall.ActivityInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActivityInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.entryList != null && message.hasOwnProperty("entryList")) {
                    if (!Array.isArray(message.entryList))
                        return "entryList: array expected";
                    for (var i = 0; i < message.entryList.length; ++i) {
                        var error = $root.hall.ActivityEntry.verify(message.entryList[i]);
                        if (error)
                            return "entryList." + error;
                    }
                }
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    if (!$util.isInteger(message.showInterval))
                        return "showInterval: integer expected";
                return null;
            };
    
            /**
             * Creates an ActivityInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ActivityInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ActivityInfo} ActivityInfo
             */
            ActivityInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ActivityInfo)
                    return object;
                var message = new $root.hall.ActivityInfo();
                if (object.entryList) {
                    if (!Array.isArray(object.entryList))
                        throw TypeError(".hall.ActivityInfo.entryList: array expected");
                    message.entryList = [];
                    for (var i = 0; i < object.entryList.length; ++i) {
                        if (typeof object.entryList[i] !== "object")
                            throw TypeError(".hall.ActivityInfo.entryList: object expected");
                        message.entryList[i] = $root.hall.ActivityEntry.fromObject(object.entryList[i]);
                    }
                }
                if (object.showInterval != null)
                    message.showInterval = object.showInterval >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an ActivityInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ActivityInfo
             * @static
             * @param {hall.ActivityInfo} message ActivityInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActivityInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.entryList = [];
                if (options.defaults)
                    object.showInterval = 0;
                if (message.entryList && message.entryList.length) {
                    object.entryList = [];
                    for (var j = 0; j < message.entryList.length; ++j)
                        object.entryList[j] = $root.hall.ActivityEntry.toObject(message.entryList[j], options);
                }
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    object.showInterval = message.showInterval;
                return object;
            };
    
            /**
             * Converts this ActivityInfo to JSON.
             * @function toJSON
             * @memberof hall.ActivityInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActivityInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ActivityInfo;
        })();
    
        hall.ActivityReq = (function() {
    
            /**
             * Properties of an ActivityReq.
             * @memberof hall
             * @interface IActivityReq
             * @property {common.IRequest|null} [request] ActivityReq request
             */
    
            /**
             * Constructs a new ActivityReq.
             * @memberof hall
             * @classdesc Represents an ActivityReq.
             * @implements IActivityReq
             * @constructor
             * @param {hall.IActivityReq=} [properties] Properties to set
             */
            function ActivityReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ActivityReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ActivityReq
             * @instance
             */
            ActivityReq.prototype.request = null;
    
            /**
             * Creates a new ActivityReq instance using the specified properties.
             * @function create
             * @memberof hall.ActivityReq
             * @static
             * @param {hall.IActivityReq=} [properties] Properties to set
             * @returns {hall.ActivityReq} ActivityReq instance
             */
            ActivityReq.create = function create(properties) {
                return new ActivityReq(properties);
            };
    
            /**
             * Encodes the specified ActivityReq message. Does not implicitly {@link hall.ActivityReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ActivityReq
             * @static
             * @param {hall.IActivityReq} message ActivityReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ActivityReq message, length delimited. Does not implicitly {@link hall.ActivityReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ActivityReq
             * @static
             * @param {hall.IActivityReq} message ActivityReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ActivityReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ActivityReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ActivityReq} ActivityReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ActivityReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ActivityReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ActivityReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ActivityReq} ActivityReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ActivityReq message.
             * @function verify
             * @memberof hall.ActivityReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActivityReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates an ActivityReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ActivityReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ActivityReq} ActivityReq
             */
            ActivityReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ActivityReq)
                    return object;
                var message = new $root.hall.ActivityReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ActivityReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an ActivityReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ActivityReq
             * @static
             * @param {hall.ActivityReq} message ActivityReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActivityReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ActivityReq to JSON.
             * @function toJSON
             * @memberof hall.ActivityReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActivityReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ActivityReq;
        })();
    
        hall.ActivityRsp = (function() {
    
            /**
             * Properties of an ActivityRsp.
             * @memberof hall
             * @interface IActivityRsp
             * @property {common.IResult|null} [result] ActivityRsp result
             * @property {Array.<hall.IActivityEntry>|null} [entryList] ActivityRsp entryList
             * @property {number|null} [showInterval] ActivityRsp showInterval
             */
    
            /**
             * Constructs a new ActivityRsp.
             * @memberof hall
             * @classdesc Represents an ActivityRsp.
             * @implements IActivityRsp
             * @constructor
             * @param {hall.IActivityRsp=} [properties] Properties to set
             */
            function ActivityRsp(properties) {
                this.entryList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ActivityRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ActivityRsp
             * @instance
             */
            ActivityRsp.prototype.result = null;
    
            /**
             * ActivityRsp entryList.
             * @member {Array.<hall.IActivityEntry>} entryList
             * @memberof hall.ActivityRsp
             * @instance
             */
            ActivityRsp.prototype.entryList = $util.emptyArray;
    
            /**
             * ActivityRsp showInterval.
             * @member {number} showInterval
             * @memberof hall.ActivityRsp
             * @instance
             */
            ActivityRsp.prototype.showInterval = 0;
    
            /**
             * Creates a new ActivityRsp instance using the specified properties.
             * @function create
             * @memberof hall.ActivityRsp
             * @static
             * @param {hall.IActivityRsp=} [properties] Properties to set
             * @returns {hall.ActivityRsp} ActivityRsp instance
             */
            ActivityRsp.create = function create(properties) {
                return new ActivityRsp(properties);
            };
    
            /**
             * Encodes the specified ActivityRsp message. Does not implicitly {@link hall.ActivityRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ActivityRsp
             * @static
             * @param {hall.IActivityRsp} message ActivityRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.entryList != null && message.entryList.length)
                    for (var i = 0; i < message.entryList.length; ++i)
                        $root.hall.ActivityEntry.encode(message.entryList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.showInterval);
                return writer;
            };
    
            /**
             * Encodes the specified ActivityRsp message, length delimited. Does not implicitly {@link hall.ActivityRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ActivityRsp
             * @static
             * @param {hall.IActivityRsp} message ActivityRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivityRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ActivityRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ActivityRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ActivityRsp} ActivityRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ActivityRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.entryList && message.entryList.length))
                            message.entryList = [];
                        message.entryList.push($root.hall.ActivityEntry.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.showInterval = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ActivityRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ActivityRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ActivityRsp} ActivityRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivityRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ActivityRsp message.
             * @function verify
             * @memberof hall.ActivityRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActivityRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.entryList != null && message.hasOwnProperty("entryList")) {
                    if (!Array.isArray(message.entryList))
                        return "entryList: array expected";
                    for (var i = 0; i < message.entryList.length; ++i) {
                        var error = $root.hall.ActivityEntry.verify(message.entryList[i]);
                        if (error)
                            return "entryList." + error;
                    }
                }
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    if (!$util.isInteger(message.showInterval))
                        return "showInterval: integer expected";
                return null;
            };
    
            /**
             * Creates an ActivityRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ActivityRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ActivityRsp} ActivityRsp
             */
            ActivityRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ActivityRsp)
                    return object;
                var message = new $root.hall.ActivityRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ActivityRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.entryList) {
                    if (!Array.isArray(object.entryList))
                        throw TypeError(".hall.ActivityRsp.entryList: array expected");
                    message.entryList = [];
                    for (var i = 0; i < object.entryList.length; ++i) {
                        if (typeof object.entryList[i] !== "object")
                            throw TypeError(".hall.ActivityRsp.entryList: object expected");
                        message.entryList[i] = $root.hall.ActivityEntry.fromObject(object.entryList[i]);
                    }
                }
                if (object.showInterval != null)
                    message.showInterval = object.showInterval >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an ActivityRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ActivityRsp
             * @static
             * @param {hall.ActivityRsp} message ActivityRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActivityRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.entryList = [];
                if (options.defaults) {
                    object.result = null;
                    object.showInterval = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.entryList && message.entryList.length) {
                    object.entryList = [];
                    for (var j = 0; j < message.entryList.length; ++j)
                        object.entryList[j] = $root.hall.ActivityEntry.toObject(message.entryList[j], options);
                }
                if (message.showInterval != null && message.hasOwnProperty("showInterval"))
                    object.showInterval = message.showInterval;
                return object;
            };
    
            /**
             * Converts this ActivityRsp to JSON.
             * @function toJSON
             * @memberof hall.ActivityRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActivityRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ActivityRsp;
        })();
    
        hall.JoinClubRsp = (function() {
    
            /**
             * Properties of a JoinClubRsp.
             * @memberof hall
             * @interface IJoinClubRsp
             * @property {common.IResult|null} [result] JoinClubRsp result
             * @property {number|null} [clubId] JoinClubRsp clubId
             * @property {string|null} [clubName] JoinClubRsp clubName
             * @property {number|null} [userId] JoinClubRsp userId
             */
    
            /**
             * Constructs a new JoinClubRsp.
             * @memberof hall
             * @classdesc Represents a JoinClubRsp.
             * @implements IJoinClubRsp
             * @constructor
             * @param {hall.IJoinClubRsp=} [properties] Properties to set
             */
            function JoinClubRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JoinClubRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.JoinClubRsp
             * @instance
             */
            JoinClubRsp.prototype.result = null;
    
            /**
             * JoinClubRsp clubId.
             * @member {number} clubId
             * @memberof hall.JoinClubRsp
             * @instance
             */
            JoinClubRsp.prototype.clubId = 0;
    
            /**
             * JoinClubRsp clubName.
             * @member {string} clubName
             * @memberof hall.JoinClubRsp
             * @instance
             */
            JoinClubRsp.prototype.clubName = "";
    
            /**
             * JoinClubRsp userId.
             * @member {number} userId
             * @memberof hall.JoinClubRsp
             * @instance
             */
            JoinClubRsp.prototype.userId = 0;
    
            /**
             * Creates a new JoinClubRsp instance using the specified properties.
             * @function create
             * @memberof hall.JoinClubRsp
             * @static
             * @param {hall.IJoinClubRsp=} [properties] Properties to set
             * @returns {hall.JoinClubRsp} JoinClubRsp instance
             */
            JoinClubRsp.create = function create(properties) {
                return new JoinClubRsp(properties);
            };
    
            /**
             * Encodes the specified JoinClubRsp message. Does not implicitly {@link hall.JoinClubRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.JoinClubRsp
             * @static
             * @param {hall.IJoinClubRsp} message JoinClubRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinClubRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clubId);
                if (message.clubName != null && message.hasOwnProperty("clubName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.clubName);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified JoinClubRsp message, length delimited. Does not implicitly {@link hall.JoinClubRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.JoinClubRsp
             * @static
             * @param {hall.IJoinClubRsp} message JoinClubRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinClubRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JoinClubRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.JoinClubRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.JoinClubRsp} JoinClubRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinClubRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.JoinClubRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clubId = reader.uint32();
                        break;
                    case 3:
                        message.clubName = reader.string();
                        break;
                    case 4:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JoinClubRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.JoinClubRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.JoinClubRsp} JoinClubRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinClubRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JoinClubRsp message.
             * @function verify
             * @memberof hall.JoinClubRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JoinClubRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                if (message.clubName != null && message.hasOwnProperty("clubName"))
                    if (!$util.isString(message.clubName))
                        return "clubName: string expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a JoinClubRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.JoinClubRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.JoinClubRsp} JoinClubRsp
             */
            JoinClubRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.JoinClubRsp)
                    return object;
                var message = new $root.hall.JoinClubRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.JoinClubRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.clubId != null)
                    message.clubId = object.clubId >>> 0;
                if (object.clubName != null)
                    message.clubName = String(object.clubName);
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a JoinClubRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.JoinClubRsp
             * @static
             * @param {hall.JoinClubRsp} message JoinClubRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JoinClubRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.clubId = 0;
                    object.clubName = "";
                    object.userId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                if (message.clubName != null && message.hasOwnProperty("clubName"))
                    object.clubName = message.clubName;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this JoinClubRsp to JSON.
             * @function toJSON
             * @memberof hall.JoinClubRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JoinClubRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JoinClubRsp;
        })();
    
        hall.ClubCardInfoReq = (function() {
    
            /**
             * Properties of a ClubCardInfoReq.
             * @memberof hall
             * @interface IClubCardInfoReq
             * @property {common.IRequest|null} [request] ClubCardInfoReq request
             * @property {number|null} [clubId] ClubCardInfoReq clubId
             */
    
            /**
             * Constructs a new ClubCardInfoReq.
             * @memberof hall
             * @classdesc Represents a ClubCardInfoReq.
             * @implements IClubCardInfoReq
             * @constructor
             * @param {hall.IClubCardInfoReq=} [properties] Properties to set
             */
            function ClubCardInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ClubCardInfoReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof hall.ClubCardInfoReq
             * @instance
             */
            ClubCardInfoReq.prototype.request = null;
    
            /**
             * ClubCardInfoReq clubId.
             * @member {number} clubId
             * @memberof hall.ClubCardInfoReq
             * @instance
             */
            ClubCardInfoReq.prototype.clubId = 0;
    
            /**
             * Creates a new ClubCardInfoReq instance using the specified properties.
             * @function create
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {hall.IClubCardInfoReq=} [properties] Properties to set
             * @returns {hall.ClubCardInfoReq} ClubCardInfoReq instance
             */
            ClubCardInfoReq.create = function create(properties) {
                return new ClubCardInfoReq(properties);
            };
    
            /**
             * Encodes the specified ClubCardInfoReq message. Does not implicitly {@link hall.ClubCardInfoReq.verify|verify} messages.
             * @function encode
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {hall.IClubCardInfoReq} message ClubCardInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubCardInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clubId);
                return writer;
            };
    
            /**
             * Encodes the specified ClubCardInfoReq message, length delimited. Does not implicitly {@link hall.ClubCardInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {hall.IClubCardInfoReq} message ClubCardInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubCardInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ClubCardInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ClubCardInfoReq} ClubCardInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubCardInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ClubCardInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clubId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ClubCardInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ClubCardInfoReq} ClubCardInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubCardInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ClubCardInfoReq message.
             * @function verify
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClubCardInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                return null;
            };
    
            /**
             * Creates a ClubCardInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ClubCardInfoReq} ClubCardInfoReq
             */
            ClubCardInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ClubCardInfoReq)
                    return object;
                var message = new $root.hall.ClubCardInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".hall.ClubCardInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.clubId != null)
                    message.clubId = object.clubId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ClubCardInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ClubCardInfoReq
             * @static
             * @param {hall.ClubCardInfoReq} message ClubCardInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClubCardInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.clubId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                return object;
            };
    
            /**
             * Converts this ClubCardInfoReq to JSON.
             * @function toJSON
             * @memberof hall.ClubCardInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClubCardInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ClubCardInfoReq;
        })();
    
        hall.ClubCardInfoRsp = (function() {
    
            /**
             * Properties of a ClubCardInfoRsp.
             * @memberof hall
             * @interface IClubCardInfoRsp
             * @property {common.IResult|null} [result] ClubCardInfoRsp result
             * @property {number|null} [clubId] ClubCardInfoRsp clubId
             * @property {number|null} [cardCount] ClubCardInfoRsp cardCount
             */
    
            /**
             * Constructs a new ClubCardInfoRsp.
             * @memberof hall
             * @classdesc Represents a ClubCardInfoRsp.
             * @implements IClubCardInfoRsp
             * @constructor
             * @param {hall.IClubCardInfoRsp=} [properties] Properties to set
             */
            function ClubCardInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ClubCardInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof hall.ClubCardInfoRsp
             * @instance
             */
            ClubCardInfoRsp.prototype.result = null;
    
            /**
             * ClubCardInfoRsp clubId.
             * @member {number} clubId
             * @memberof hall.ClubCardInfoRsp
             * @instance
             */
            ClubCardInfoRsp.prototype.clubId = 0;
    
            /**
             * ClubCardInfoRsp cardCount.
             * @member {number} cardCount
             * @memberof hall.ClubCardInfoRsp
             * @instance
             */
            ClubCardInfoRsp.prototype.cardCount = 0;
    
            /**
             * Creates a new ClubCardInfoRsp instance using the specified properties.
             * @function create
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {hall.IClubCardInfoRsp=} [properties] Properties to set
             * @returns {hall.ClubCardInfoRsp} ClubCardInfoRsp instance
             */
            ClubCardInfoRsp.create = function create(properties) {
                return new ClubCardInfoRsp(properties);
            };
    
            /**
             * Encodes the specified ClubCardInfoRsp message. Does not implicitly {@link hall.ClubCardInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {hall.IClubCardInfoRsp} message ClubCardInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubCardInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clubId);
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cardCount);
                return writer;
            };
    
            /**
             * Encodes the specified ClubCardInfoRsp message, length delimited. Does not implicitly {@link hall.ClubCardInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {hall.IClubCardInfoRsp} message ClubCardInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClubCardInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ClubCardInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {hall.ClubCardInfoRsp} ClubCardInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubCardInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.ClubCardInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clubId = reader.uint32();
                        break;
                    case 3:
                        message.cardCount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ClubCardInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {hall.ClubCardInfoRsp} ClubCardInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClubCardInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ClubCardInfoRsp message.
             * @function verify
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClubCardInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    if (!$util.isInteger(message.cardCount))
                        return "cardCount: integer expected";
                return null;
            };
    
            /**
             * Creates a ClubCardInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {hall.ClubCardInfoRsp} ClubCardInfoRsp
             */
            ClubCardInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.hall.ClubCardInfoRsp)
                    return object;
                var message = new $root.hall.ClubCardInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".hall.ClubCardInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.clubId != null)
                    message.clubId = object.clubId >>> 0;
                if (object.cardCount != null)
                    message.cardCount = object.cardCount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ClubCardInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof hall.ClubCardInfoRsp
             * @static
             * @param {hall.ClubCardInfoRsp} message ClubCardInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClubCardInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.clubId = 0;
                    object.cardCount = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    object.cardCount = message.cardCount;
                return object;
            };
    
            /**
             * Converts this ClubCardInfoRsp to JSON.
             * @function toJSON
             * @memberof hall.ClubCardInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClubCardInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ClubCardInfoRsp;
        })();
    
        return hall;
    })();
    
    $root.room = (function() {
    
        /**
         * Namespace room.
         * @exports room
         * @namespace
         */
        var room = {};
    
        room.Player = (function() {
    
            /**
             * Properties of a Player.
             * @memberof room
             * @interface IPlayer
             * @property {common.IPlayerInfo|null} [playerInfo] Player playerInfo
             * @property {number|null} [seatId] Player seatId
             */
    
            /**
             * Constructs a new Player.
             * @memberof room
             * @classdesc Represents a Player.
             * @implements IPlayer
             * @constructor
             * @param {room.IPlayer=} [properties] Properties to set
             */
            function Player(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Player playerInfo.
             * @member {common.IPlayerInfo|null|undefined} playerInfo
             * @memberof room.Player
             * @instance
             */
            Player.prototype.playerInfo = null;
    
            /**
             * Player seatId.
             * @member {number} seatId
             * @memberof room.Player
             * @instance
             */
            Player.prototype.seatId = 0;
    
            /**
             * Creates a new Player instance using the specified properties.
             * @function create
             * @memberof room.Player
             * @static
             * @param {room.IPlayer=} [properties] Properties to set
             * @returns {room.Player} Player instance
             */
            Player.create = function create(properties) {
                return new Player(properties);
            };
    
            /**
             * Encodes the specified Player message. Does not implicitly {@link room.Player.verify|verify} messages.
             * @function encode
             * @memberof room.Player
             * @static
             * @param {room.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    $root.common.PlayerInfo.encode(message.playerInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.seatId);
                return writer;
            };
    
            /**
             * Encodes the specified Player message, length delimited. Does not implicitly {@link room.Player.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.Player
             * @static
             * @param {room.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer.
             * @function decode
             * @memberof room.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.Player();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.playerInfo = $root.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.seatId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Player message.
             * @function verify
             * @memberof room.Player
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Player.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
                    var error = $root.common.PlayerInfo.verify(message.playerInfo);
                    if (error)
                        return "playerInfo." + error;
                }
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    if (!$util.isInteger(message.seatId))
                        return "seatId: integer expected";
                return null;
            };
    
            /**
             * Creates a Player message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.Player
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.Player} Player
             */
            Player.fromObject = function fromObject(object) {
                if (object instanceof $root.room.Player)
                    return object;
                var message = new $root.room.Player();
                if (object.playerInfo != null) {
                    if (typeof object.playerInfo !== "object")
                        throw TypeError(".room.Player.playerInfo: object expected");
                    message.playerInfo = $root.common.PlayerInfo.fromObject(object.playerInfo);
                }
                if (object.seatId != null)
                    message.seatId = object.seatId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Player message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.Player
             * @static
             * @param {room.Player} message Player
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Player.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.playerInfo = null;
                    object.seatId = 0;
                }
                if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
                    object.playerInfo = $root.common.PlayerInfo.toObject(message.playerInfo, options);
                if (message.seatId != null && message.hasOwnProperty("seatId"))
                    object.seatId = message.seatId;
                return object;
            };
    
            /**
             * Converts this Player to JSON.
             * @function toJSON
             * @memberof room.Player
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Player.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Player;
        })();
    
        room.LoginReq = (function() {
    
            /**
             * Properties of a LoginReq.
             * @memberof room
             * @interface ILoginReq
             * @property {common.IRequest} request LoginReq request
             * @property {number|null} [gameId] LoginReq gameId
             * @property {number|null} [roomId] LoginReq roomId
             * @property {number|null} [tableId] LoginReq tableId
             * @property {number|null} [code] LoginReq code
             * @property {string|null} [jsonStr] LoginReq jsonStr
             */
    
            /**
             * Constructs a new LoginReq.
             * @memberof room
             * @classdesc Represents a LoginReq.
             * @implements ILoginReq
             * @constructor
             * @param {room.ILoginReq=} [properties] Properties to set
             */
            function LoginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LoginReq request.
             * @member {common.IRequest} request
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.request = null;
    
            /**
             * LoginReq gameId.
             * @member {number} gameId
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.gameId = 0;
    
            /**
             * LoginReq roomId.
             * @member {number} roomId
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.roomId = 0;
    
            /**
             * LoginReq tableId.
             * @member {number} tableId
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.tableId = 0;
    
            /**
             * LoginReq code.
             * @member {number} code
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.code = 0;
    
            /**
             * LoginReq jsonStr.
             * @member {string} jsonStr
             * @memberof room.LoginReq
             * @instance
             */
            LoginReq.prototype.jsonStr = "";
    
            /**
             * Creates a new LoginReq instance using the specified properties.
             * @function create
             * @memberof room.LoginReq
             * @static
             * @param {room.ILoginReq=} [properties] Properties to set
             * @returns {room.LoginReq} LoginReq instance
             */
            LoginReq.create = function create(properties) {
                return new LoginReq(properties);
            };
    
            /**
             * Encodes the specified LoginReq message. Does not implicitly {@link room.LoginReq.verify|verify} messages.
             * @function encode
             * @memberof room.LoginReq
             * @static
             * @param {room.ILoginReq} message LoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tableId);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.code);
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.jsonStr);
                return writer;
            };
    
            /**
             * Encodes the specified LoginReq message, length delimited. Does not implicitly {@link room.LoginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LoginReq
             * @static
             * @param {room.ILoginReq} message LoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LoginReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.LoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LoginReq} LoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LoginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.uint32();
                        break;
                    case 3:
                        message.roomId = reader.uint32();
                        break;
                    case 4:
                        message.tableId = reader.uint32();
                        break;
                    case 5:
                        message.code = reader.uint32();
                        break;
                    case 6:
                        message.jsonStr = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a LoginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LoginReq} LoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LoginReq message.
             * @function verify
             * @memberof room.LoginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    if (!$util.isString(message.jsonStr))
                        return "jsonStr: string expected";
                return null;
            };
    
            /**
             * Creates a LoginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LoginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LoginReq} LoginReq
             */
            LoginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LoginReq)
                    return object;
                var message = new $root.room.LoginReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.LoginReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.jsonStr != null)
                    message.jsonStr = String(object.jsonStr);
                return message;
            };
    
            /**
             * Creates a plain object from a LoginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LoginReq
             * @static
             * @param {room.LoginReq} message LoginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                    object.code = 0;
                    object.jsonStr = "";
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.jsonStr != null && message.hasOwnProperty("jsonStr"))
                    object.jsonStr = message.jsonStr;
                return object;
            };
    
            /**
             * Converts this LoginReq to JSON.
             * @function toJSON
             * @memberof room.LoginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LoginReq;
        })();
    
        room.LoginRsp = (function() {
    
            /**
             * Properties of a LoginRsp.
             * @memberof room
             * @interface ILoginRsp
             * @property {common.IResult|null} [result] LoginRsp result
             * @property {number|null} [gameId] LoginRsp gameId
             * @property {number|null} [roomId] LoginRsp roomId
             * @property {number|null} [tableId] LoginRsp tableId
             */
    
            /**
             * Constructs a new LoginRsp.
             * @memberof room
             * @classdesc Represents a LoginRsp.
             * @implements ILoginRsp
             * @constructor
             * @param {room.ILoginRsp=} [properties] Properties to set
             */
            function LoginRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.LoginRsp
             * @instance
             */
            LoginRsp.prototype.result = null;
    
            /**
             * LoginRsp gameId.
             * @member {number} gameId
             * @memberof room.LoginRsp
             * @instance
             */
            LoginRsp.prototype.gameId = 0;
    
            /**
             * LoginRsp roomId.
             * @member {number} roomId
             * @memberof room.LoginRsp
             * @instance
             */
            LoginRsp.prototype.roomId = 0;
    
            /**
             * LoginRsp tableId.
             * @member {number} tableId
             * @memberof room.LoginRsp
             * @instance
             */
            LoginRsp.prototype.tableId = 0;
    
            /**
             * Creates a new LoginRsp instance using the specified properties.
             * @function create
             * @memberof room.LoginRsp
             * @static
             * @param {room.ILoginRsp=} [properties] Properties to set
             * @returns {room.LoginRsp} LoginRsp instance
             */
            LoginRsp.create = function create(properties) {
                return new LoginRsp(properties);
            };
    
            /**
             * Encodes the specified LoginRsp message. Does not implicitly {@link room.LoginRsp.verify|verify} messages.
             * @function encode
             * @memberof room.LoginRsp
             * @static
             * @param {room.ILoginRsp} message LoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tableId);
                return writer;
            };
    
            /**
             * Encodes the specified LoginRsp message, length delimited. Does not implicitly {@link room.LoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LoginRsp
             * @static
             * @param {room.ILoginRsp} message LoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.LoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LoginRsp} LoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.uint32();
                        break;
                    case 3:
                        message.roomId = reader.uint32();
                        break;
                    case 4:
                        message.tableId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LoginRsp} LoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LoginRsp message.
             * @function verify
             * @memberof room.LoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                return null;
            };
    
            /**
             * Creates a LoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LoginRsp} LoginRsp
             */
            LoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LoginRsp)
                    return object;
                var message = new $root.room.LoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.LoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LoginRsp
             * @static
             * @param {room.LoginRsp} message LoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                return object;
            };
    
            /**
             * Converts this LoginRsp to JSON.
             * @function toJSON
             * @memberof room.LoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LoginRsp;
        })();
    
        room.BroadcastLoginRsp = (function() {
    
            /**
             * Properties of a BroadcastLoginRsp.
             * @memberof room
             * @interface IBroadcastLoginRsp
             * @property {common.IResult|null} [result] BroadcastLoginRsp result
             * @property {Array.<room.IPlayer>|null} [players] BroadcastLoginRsp players
             */
    
            /**
             * Constructs a new BroadcastLoginRsp.
             * @memberof room
             * @classdesc Represents a BroadcastLoginRsp.
             * @implements IBroadcastLoginRsp
             * @constructor
             * @param {room.IBroadcastLoginRsp=} [properties] Properties to set
             */
            function BroadcastLoginRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BroadcastLoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BroadcastLoginRsp
             * @instance
             */
            BroadcastLoginRsp.prototype.result = null;
    
            /**
             * BroadcastLoginRsp players.
             * @member {Array.<room.IPlayer>} players
             * @memberof room.BroadcastLoginRsp
             * @instance
             */
            BroadcastLoginRsp.prototype.players = $util.emptyArray;
    
            /**
             * Creates a new BroadcastLoginRsp instance using the specified properties.
             * @function create
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {room.IBroadcastLoginRsp=} [properties] Properties to set
             * @returns {room.BroadcastLoginRsp} BroadcastLoginRsp instance
             */
            BroadcastLoginRsp.create = function create(properties) {
                return new BroadcastLoginRsp(properties);
            };
    
            /**
             * Encodes the specified BroadcastLoginRsp message. Does not implicitly {@link room.BroadcastLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {room.IBroadcastLoginRsp} message BroadcastLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BroadcastLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.room.Player.encode(message.players[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BroadcastLoginRsp message, length delimited. Does not implicitly {@link room.BroadcastLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {room.IBroadcastLoginRsp} message BroadcastLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BroadcastLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BroadcastLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BroadcastLoginRsp} BroadcastLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BroadcastLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BroadcastLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.room.Player.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BroadcastLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BroadcastLoginRsp} BroadcastLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BroadcastLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BroadcastLoginRsp message.
             * @function verify
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BroadcastLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.room.Player.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a BroadcastLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BroadcastLoginRsp} BroadcastLoginRsp
             */
            BroadcastLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BroadcastLoginRsp)
                    return object;
                var message = new $root.room.BroadcastLoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BroadcastLoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".room.BroadcastLoginRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".room.BroadcastLoginRsp.players: object expected");
                        message.players[i] = $root.room.Player.fromObject(object.players[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BroadcastLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BroadcastLoginRsp
             * @static
             * @param {room.BroadcastLoginRsp} message BroadcastLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BroadcastLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.room.Player.toObject(message.players[j], options);
                }
                return object;
            };
    
            /**
             * Converts this BroadcastLoginRsp to JSON.
             * @function toJSON
             * @memberof room.BroadcastLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BroadcastLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BroadcastLoginRsp;
        })();
    
        room.LogoutReq = (function() {
    
            /**
             * Properties of a LogoutReq.
             * @memberof room
             * @interface ILogoutReq
             * @property {common.IRequest} request LogoutReq request
             */
    
            /**
             * Constructs a new LogoutReq.
             * @memberof room
             * @classdesc Represents a LogoutReq.
             * @implements ILogoutReq
             * @constructor
             * @param {room.ILogoutReq=} [properties] Properties to set
             */
            function LogoutReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LogoutReq request.
             * @member {common.IRequest} request
             * @memberof room.LogoutReq
             * @instance
             */
            LogoutReq.prototype.request = null;
    
            /**
             * Creates a new LogoutReq instance using the specified properties.
             * @function create
             * @memberof room.LogoutReq
             * @static
             * @param {room.ILogoutReq=} [properties] Properties to set
             * @returns {room.LogoutReq} LogoutReq instance
             */
            LogoutReq.create = function create(properties) {
                return new LogoutReq(properties);
            };
    
            /**
             * Encodes the specified LogoutReq message. Does not implicitly {@link room.LogoutReq.verify|verify} messages.
             * @function encode
             * @memberof room.LogoutReq
             * @static
             * @param {room.ILogoutReq} message LogoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LogoutReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified LogoutReq message, length delimited. Does not implicitly {@link room.LogoutReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LogoutReq
             * @static
             * @param {room.ILogoutReq} message LogoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LogoutReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LogoutReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.LogoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LogoutReq} LogoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LogoutReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LogoutReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a LogoutReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LogoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LogoutReq} LogoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LogoutReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LogoutReq message.
             * @function verify
             * @memberof room.LogoutReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LogoutReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a LogoutReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LogoutReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LogoutReq} LogoutReq
             */
            LogoutReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LogoutReq)
                    return object;
                var message = new $root.room.LogoutReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.LogoutReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a LogoutReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LogoutReq
             * @static
             * @param {room.LogoutReq} message LogoutReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LogoutReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this LogoutReq to JSON.
             * @function toJSON
             * @memberof room.LogoutReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LogoutReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LogoutReq;
        })();
    
        room.LogoutRsp = (function() {
    
            /**
             * Properties of a LogoutRsp.
             * @memberof room
             * @interface ILogoutRsp
             * @property {common.IResult|null} [result] LogoutRsp result
             */
    
            /**
             * Constructs a new LogoutRsp.
             * @memberof room
             * @classdesc Represents a LogoutRsp.
             * @implements ILogoutRsp
             * @constructor
             * @param {room.ILogoutRsp=} [properties] Properties to set
             */
            function LogoutRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LogoutRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.LogoutRsp
             * @instance
             */
            LogoutRsp.prototype.result = null;
    
            /**
             * Creates a new LogoutRsp instance using the specified properties.
             * @function create
             * @memberof room.LogoutRsp
             * @static
             * @param {room.ILogoutRsp=} [properties] Properties to set
             * @returns {room.LogoutRsp} LogoutRsp instance
             */
            LogoutRsp.create = function create(properties) {
                return new LogoutRsp(properties);
            };
    
            /**
             * Encodes the specified LogoutRsp message. Does not implicitly {@link room.LogoutRsp.verify|verify} messages.
             * @function encode
             * @memberof room.LogoutRsp
             * @static
             * @param {room.ILogoutRsp} message LogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LogoutRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified LogoutRsp message, length delimited. Does not implicitly {@link room.LogoutRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LogoutRsp
             * @static
             * @param {room.ILogoutRsp} message LogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LogoutRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LogoutRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.LogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LogoutRsp} LogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LogoutRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LogoutRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LogoutRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LogoutRsp} LogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LogoutRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LogoutRsp message.
             * @function verify
             * @memberof room.LogoutRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LogoutRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a LogoutRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LogoutRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LogoutRsp} LogoutRsp
             */
            LogoutRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LogoutRsp)
                    return object;
                var message = new $root.room.LogoutRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.LogoutRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a LogoutRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LogoutRsp
             * @static
             * @param {room.LogoutRsp} message LogoutRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LogoutRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this LogoutRsp to JSON.
             * @function toJSON
             * @memberof room.LogoutRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LogoutRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LogoutRsp;
        })();
    
        room.BroadcastLogoutRsp = (function() {
    
            /**
             * Properties of a BroadcastLogoutRsp.
             * @memberof room
             * @interface IBroadcastLogoutRsp
             * @property {common.IResult|null} [result] BroadcastLogoutRsp result
             * @property {Array.<number>|null} [uids] BroadcastLogoutRsp uids
             */
    
            /**
             * Constructs a new BroadcastLogoutRsp.
             * @memberof room
             * @classdesc Represents a BroadcastLogoutRsp.
             * @implements IBroadcastLogoutRsp
             * @constructor
             * @param {room.IBroadcastLogoutRsp=} [properties] Properties to set
             */
            function BroadcastLogoutRsp(properties) {
                this.uids = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BroadcastLogoutRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BroadcastLogoutRsp
             * @instance
             */
            BroadcastLogoutRsp.prototype.result = null;
    
            /**
             * BroadcastLogoutRsp uids.
             * @member {Array.<number>} uids
             * @memberof room.BroadcastLogoutRsp
             * @instance
             */
            BroadcastLogoutRsp.prototype.uids = $util.emptyArray;
    
            /**
             * Creates a new BroadcastLogoutRsp instance using the specified properties.
             * @function create
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {room.IBroadcastLogoutRsp=} [properties] Properties to set
             * @returns {room.BroadcastLogoutRsp} BroadcastLogoutRsp instance
             */
            BroadcastLogoutRsp.create = function create(properties) {
                return new BroadcastLogoutRsp(properties);
            };
    
            /**
             * Encodes the specified BroadcastLogoutRsp message. Does not implicitly {@link room.BroadcastLogoutRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {room.IBroadcastLogoutRsp} message BroadcastLogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BroadcastLogoutRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uids != null && message.uids.length)
                    for (var i = 0; i < message.uids.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uids[i]);
                return writer;
            };
    
            /**
             * Encodes the specified BroadcastLogoutRsp message, length delimited. Does not implicitly {@link room.BroadcastLogoutRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {room.IBroadcastLogoutRsp} message BroadcastLogoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BroadcastLogoutRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BroadcastLogoutRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BroadcastLogoutRsp} BroadcastLogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BroadcastLogoutRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BroadcastLogoutRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.uids && message.uids.length))
                            message.uids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.uids.push(reader.uint32());
                        } else
                            message.uids.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BroadcastLogoutRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BroadcastLogoutRsp} BroadcastLogoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BroadcastLogoutRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BroadcastLogoutRsp message.
             * @function verify
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BroadcastLogoutRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uids != null && message.hasOwnProperty("uids")) {
                    if (!Array.isArray(message.uids))
                        return "uids: array expected";
                    for (var i = 0; i < message.uids.length; ++i)
                        if (!$util.isInteger(message.uids[i]))
                            return "uids: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a BroadcastLogoutRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BroadcastLogoutRsp} BroadcastLogoutRsp
             */
            BroadcastLogoutRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BroadcastLogoutRsp)
                    return object;
                var message = new $root.room.BroadcastLogoutRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BroadcastLogoutRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uids) {
                    if (!Array.isArray(object.uids))
                        throw TypeError(".room.BroadcastLogoutRsp.uids: array expected");
                    message.uids = [];
                    for (var i = 0; i < object.uids.length; ++i)
                        message.uids[i] = object.uids[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BroadcastLogoutRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BroadcastLogoutRsp
             * @static
             * @param {room.BroadcastLogoutRsp} message BroadcastLogoutRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BroadcastLogoutRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uids = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uids && message.uids.length) {
                    object.uids = [];
                    for (var j = 0; j < message.uids.length; ++j)
                        object.uids[j] = message.uids[j];
                }
                return object;
            };
    
            /**
             * Converts this BroadcastLogoutRsp to JSON.
             * @function toJSON
             * @memberof room.BroadcastLogoutRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BroadcastLogoutRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BroadcastLogoutRsp;
        })();
    
        room.KickoutReq = (function() {
    
            /**
             * Properties of a KickoutReq.
             * @memberof room
             * @interface IKickoutReq
             * @property {common.IRequest} request KickoutReq request
             * @property {number|null} [uid] KickoutReq uid
             */
    
            /**
             * Constructs a new KickoutReq.
             * @memberof room
             * @classdesc Represents a KickoutReq.
             * @implements IKickoutReq
             * @constructor
             * @param {room.IKickoutReq=} [properties] Properties to set
             */
            function KickoutReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KickoutReq request.
             * @member {common.IRequest} request
             * @memberof room.KickoutReq
             * @instance
             */
            KickoutReq.prototype.request = null;
    
            /**
             * KickoutReq uid.
             * @member {number} uid
             * @memberof room.KickoutReq
             * @instance
             */
            KickoutReq.prototype.uid = 0;
    
            /**
             * Creates a new KickoutReq instance using the specified properties.
             * @function create
             * @memberof room.KickoutReq
             * @static
             * @param {room.IKickoutReq=} [properties] Properties to set
             * @returns {room.KickoutReq} KickoutReq instance
             */
            KickoutReq.create = function create(properties) {
                return new KickoutReq(properties);
            };
    
            /**
             * Encodes the specified KickoutReq message. Does not implicitly {@link room.KickoutReq.verify|verify} messages.
             * @function encode
             * @memberof room.KickoutReq
             * @static
             * @param {room.IKickoutReq} message KickoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KickoutReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified KickoutReq message, length delimited. Does not implicitly {@link room.KickoutReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.KickoutReq
             * @static
             * @param {room.IKickoutReq} message KickoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KickoutReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KickoutReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.KickoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.KickoutReq} KickoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KickoutReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.KickoutReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a KickoutReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.KickoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.KickoutReq} KickoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KickoutReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KickoutReq message.
             * @function verify
             * @memberof room.KickoutReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KickoutReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a KickoutReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.KickoutReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.KickoutReq} KickoutReq
             */
            KickoutReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.KickoutReq)
                    return object;
                var message = new $root.room.KickoutReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.KickoutReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a KickoutReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.KickoutReq
             * @static
             * @param {room.KickoutReq} message KickoutReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KickoutReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.uid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this KickoutReq to JSON.
             * @function toJSON
             * @memberof room.KickoutReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KickoutReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KickoutReq;
        })();
    
        room.KickoutRsp = (function() {
    
            /**
             * Properties of a KickoutRsp.
             * @memberof room
             * @interface IKickoutRsp
             * @property {common.IResult|null} [result] KickoutRsp result
             */
    
            /**
             * Constructs a new KickoutRsp.
             * @memberof room
             * @classdesc Represents a KickoutRsp.
             * @implements IKickoutRsp
             * @constructor
             * @param {room.IKickoutRsp=} [properties] Properties to set
             */
            function KickoutRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KickoutRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.KickoutRsp
             * @instance
             */
            KickoutRsp.prototype.result = null;
    
            /**
             * Creates a new KickoutRsp instance using the specified properties.
             * @function create
             * @memberof room.KickoutRsp
             * @static
             * @param {room.IKickoutRsp=} [properties] Properties to set
             * @returns {room.KickoutRsp} KickoutRsp instance
             */
            KickoutRsp.create = function create(properties) {
                return new KickoutRsp(properties);
            };
    
            /**
             * Encodes the specified KickoutRsp message. Does not implicitly {@link room.KickoutRsp.verify|verify} messages.
             * @function encode
             * @memberof room.KickoutRsp
             * @static
             * @param {room.IKickoutRsp} message KickoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KickoutRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified KickoutRsp message, length delimited. Does not implicitly {@link room.KickoutRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.KickoutRsp
             * @static
             * @param {room.IKickoutRsp} message KickoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KickoutRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KickoutRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.KickoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.KickoutRsp} KickoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KickoutRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.KickoutRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KickoutRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.KickoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.KickoutRsp} KickoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KickoutRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KickoutRsp message.
             * @function verify
             * @memberof room.KickoutRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KickoutRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a KickoutRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.KickoutRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.KickoutRsp} KickoutRsp
             */
            KickoutRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.KickoutRsp)
                    return object;
                var message = new $root.room.KickoutRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.KickoutRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a KickoutRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.KickoutRsp
             * @static
             * @param {room.KickoutRsp} message KickoutRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KickoutRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this KickoutRsp to JSON.
             * @function toJSON
             * @memberof room.KickoutRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KickoutRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KickoutRsp;
        })();
    
        room.RoomInfoReq = (function() {
    
            /**
             * Properties of a RoomInfoReq.
             * @memberof room
             * @interface IRoomInfoReq
             * @property {common.IRequest} request RoomInfoReq request
             */
    
            /**
             * Constructs a new RoomInfoReq.
             * @memberof room
             * @classdesc Represents a RoomInfoReq.
             * @implements IRoomInfoReq
             * @constructor
             * @param {room.IRoomInfoReq=} [properties] Properties to set
             */
            function RoomInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomInfoReq request.
             * @member {common.IRequest} request
             * @memberof room.RoomInfoReq
             * @instance
             */
            RoomInfoReq.prototype.request = null;
    
            /**
             * Creates a new RoomInfoReq instance using the specified properties.
             * @function create
             * @memberof room.RoomInfoReq
             * @static
             * @param {room.IRoomInfoReq=} [properties] Properties to set
             * @returns {room.RoomInfoReq} RoomInfoReq instance
             */
            RoomInfoReq.create = function create(properties) {
                return new RoomInfoReq(properties);
            };
    
            /**
             * Encodes the specified RoomInfoReq message. Does not implicitly {@link room.RoomInfoReq.verify|verify} messages.
             * @function encode
             * @memberof room.RoomInfoReq
             * @static
             * @param {room.IRoomInfoReq} message RoomInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RoomInfoReq message, length delimited. Does not implicitly {@link room.RoomInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomInfoReq
             * @static
             * @param {room.IRoomInfoReq} message RoomInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomInfoReq} RoomInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RoomInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomInfoReq} RoomInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomInfoReq message.
             * @function verify
             * @memberof room.RoomInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a RoomInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomInfoReq} RoomInfoReq
             */
            RoomInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomInfoReq)
                    return object;
                var message = new $root.room.RoomInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.RoomInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RoomInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomInfoReq
             * @static
             * @param {room.RoomInfoReq} message RoomInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this RoomInfoReq to JSON.
             * @function toJSON
             * @memberof room.RoomInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomInfoReq;
        })();
    
        room.RoomInfo = (function() {
    
            /**
             * Properties of a RoomInfo.
             * @memberof room
             * @interface IRoomInfo
             * @property {number|null} [id] RoomInfo id
             * @property {number|null} [limit] RoomInfo limit
             * @property {number|null} [ante] RoomInfo ante
             * @property {number|null} [online] RoomInfo online
             */
    
            /**
             * Constructs a new RoomInfo.
             * @memberof room
             * @classdesc Represents a RoomInfo.
             * @implements IRoomInfo
             * @constructor
             * @param {room.IRoomInfo=} [properties] Properties to set
             */
            function RoomInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomInfo id.
             * @member {number} id
             * @memberof room.RoomInfo
             * @instance
             */
            RoomInfo.prototype.id = 0;
    
            /**
             * RoomInfo limit.
             * @member {number} limit
             * @memberof room.RoomInfo
             * @instance
             */
            RoomInfo.prototype.limit = 0;
    
            /**
             * RoomInfo ante.
             * @member {number} ante
             * @memberof room.RoomInfo
             * @instance
             */
            RoomInfo.prototype.ante = 0;
    
            /**
             * RoomInfo online.
             * @member {number} online
             * @memberof room.RoomInfo
             * @instance
             */
            RoomInfo.prototype.online = 0;
    
            /**
             * Creates a new RoomInfo instance using the specified properties.
             * @function create
             * @memberof room.RoomInfo
             * @static
             * @param {room.IRoomInfo=} [properties] Properties to set
             * @returns {room.RoomInfo} RoomInfo instance
             */
            RoomInfo.create = function create(properties) {
                return new RoomInfo(properties);
            };
    
            /**
             * Encodes the specified RoomInfo message. Does not implicitly {@link room.RoomInfo.verify|verify} messages.
             * @function encode
             * @memberof room.RoomInfo
             * @static
             * @param {room.IRoomInfo} message RoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.limit != null && message.hasOwnProperty("limit"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.limit);
                if (message.ante != null && message.hasOwnProperty("ante"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ante);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.online);
                return writer;
            };
    
            /**
             * Encodes the specified RoomInfo message, length delimited. Does not implicitly {@link room.RoomInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomInfo
             * @static
             * @param {room.IRoomInfo} message RoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomInfo message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomInfo} RoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.limit = reader.uint32();
                        break;
                    case 3:
                        message.ante = reader.uint32();
                        break;
                    case 4:
                        message.online = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoomInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomInfo} RoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomInfo message.
             * @function verify
             * @memberof room.RoomInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.limit != null && message.hasOwnProperty("limit"))
                    if (!$util.isInteger(message.limit))
                        return "limit: integer expected";
                if (message.ante != null && message.hasOwnProperty("ante"))
                    if (!$util.isInteger(message.ante))
                        return "ante: integer expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (!$util.isInteger(message.online))
                        return "online: integer expected";
                return null;
            };
    
            /**
             * Creates a RoomInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomInfo} RoomInfo
             */
            RoomInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomInfo)
                    return object;
                var message = new $root.room.RoomInfo();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.limit != null)
                    message.limit = object.limit >>> 0;
                if (object.ante != null)
                    message.ante = object.ante >>> 0;
                if (object.online != null)
                    message.online = object.online >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RoomInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomInfo
             * @static
             * @param {room.RoomInfo} message RoomInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.limit = 0;
                    object.ante = 0;
                    object.online = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.limit != null && message.hasOwnProperty("limit"))
                    object.limit = message.limit;
                if (message.ante != null && message.hasOwnProperty("ante"))
                    object.ante = message.ante;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                return object;
            };
    
            /**
             * Converts this RoomInfo to JSON.
             * @function toJSON
             * @memberof room.RoomInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomInfo;
        })();
    
        room.RoomInfoRsp = (function() {
    
            /**
             * Properties of a RoomInfoRsp.
             * @memberof room
             * @interface IRoomInfoRsp
             * @property {common.IResult|null} [result] RoomInfoRsp result
             * @property {number} gameId RoomInfoRsp gameId
             * @property {Array.<room.IRoomInfo>|null} [info] RoomInfoRsp info
             */
    
            /**
             * Constructs a new RoomInfoRsp.
             * @memberof room
             * @classdesc Represents a RoomInfoRsp.
             * @implements IRoomInfoRsp
             * @constructor
             * @param {room.IRoomInfoRsp=} [properties] Properties to set
             */
            function RoomInfoRsp(properties) {
                this.info = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.RoomInfoRsp
             * @instance
             */
            RoomInfoRsp.prototype.result = null;
    
            /**
             * RoomInfoRsp gameId.
             * @member {number} gameId
             * @memberof room.RoomInfoRsp
             * @instance
             */
            RoomInfoRsp.prototype.gameId = 0;
    
            /**
             * RoomInfoRsp info.
             * @member {Array.<room.IRoomInfo>} info
             * @memberof room.RoomInfoRsp
             * @instance
             */
            RoomInfoRsp.prototype.info = $util.emptyArray;
    
            /**
             * Creates a new RoomInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.RoomInfoRsp
             * @static
             * @param {room.IRoomInfoRsp=} [properties] Properties to set
             * @returns {room.RoomInfoRsp} RoomInfoRsp instance
             */
            RoomInfoRsp.create = function create(properties) {
                return new RoomInfoRsp(properties);
            };
    
            /**
             * Encodes the specified RoomInfoRsp message. Does not implicitly {@link room.RoomInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.RoomInfoRsp
             * @static
             * @param {room.IRoomInfoRsp} message RoomInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameId);
                if (message.info != null && message.info.length)
                    for (var i = 0; i < message.info.length; ++i)
                        $root.room.RoomInfo.encode(message.info[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RoomInfoRsp message, length delimited. Does not implicitly {@link room.RoomInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomInfoRsp
             * @static
             * @param {room.IRoomInfoRsp} message RoomInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomInfoRsp} RoomInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.uint32();
                        break;
                    case 3:
                        if (!(message.info && message.info.length))
                            message.info = [];
                        message.info.push($root.room.RoomInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("gameId"))
                    throw $util.ProtocolError("missing required 'gameId'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RoomInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomInfoRsp} RoomInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomInfoRsp message.
             * @function verify
             * @memberof room.RoomInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
                if (message.info != null && message.hasOwnProperty("info")) {
                    if (!Array.isArray(message.info))
                        return "info: array expected";
                    for (var i = 0; i < message.info.length; ++i) {
                        var error = $root.room.RoomInfo.verify(message.info[i]);
                        if (error)
                            return "info." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a RoomInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomInfoRsp} RoomInfoRsp
             */
            RoomInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomInfoRsp)
                    return object;
                var message = new $root.room.RoomInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.RoomInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.info) {
                    if (!Array.isArray(object.info))
                        throw TypeError(".room.RoomInfoRsp.info: array expected");
                    message.info = [];
                    for (var i = 0; i < object.info.length; ++i) {
                        if (typeof object.info[i] !== "object")
                            throw TypeError(".room.RoomInfoRsp.info: object expected");
                        message.info[i] = $root.room.RoomInfo.fromObject(object.info[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RoomInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomInfoRsp
             * @static
             * @param {room.RoomInfoRsp} message RoomInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.info = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.info && message.info.length) {
                    object.info = [];
                    for (var j = 0; j < message.info.length; ++j)
                        object.info[j] = $root.room.RoomInfo.toObject(message.info[j], options);
                }
                return object;
            };
    
            /**
             * Converts this RoomInfoRsp to JSON.
             * @function toJSON
             * @memberof room.RoomInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomInfoRsp;
        })();
    
        room.RoomOnlineReq = (function() {
    
            /**
             * Properties of a RoomOnlineReq.
             * @memberof room
             * @interface IRoomOnlineReq
             * @property {common.IRequest} request RoomOnlineReq request
             * @property {number|null} [gameId] RoomOnlineReq gameId
             */
    
            /**
             * Constructs a new RoomOnlineReq.
             * @memberof room
             * @classdesc Represents a RoomOnlineReq.
             * @implements IRoomOnlineReq
             * @constructor
             * @param {room.IRoomOnlineReq=} [properties] Properties to set
             */
            function RoomOnlineReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomOnlineReq request.
             * @member {common.IRequest} request
             * @memberof room.RoomOnlineReq
             * @instance
             */
            RoomOnlineReq.prototype.request = null;
    
            /**
             * RoomOnlineReq gameId.
             * @member {number} gameId
             * @memberof room.RoomOnlineReq
             * @instance
             */
            RoomOnlineReq.prototype.gameId = 0;
    
            /**
             * Creates a new RoomOnlineReq instance using the specified properties.
             * @function create
             * @memberof room.RoomOnlineReq
             * @static
             * @param {room.IRoomOnlineReq=} [properties] Properties to set
             * @returns {room.RoomOnlineReq} RoomOnlineReq instance
             */
            RoomOnlineReq.create = function create(properties) {
                return new RoomOnlineReq(properties);
            };
    
            /**
             * Encodes the specified RoomOnlineReq message. Does not implicitly {@link room.RoomOnlineReq.verify|verify} messages.
             * @function encode
             * @memberof room.RoomOnlineReq
             * @static
             * @param {room.IRoomOnlineReq} message RoomOnlineReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnlineReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameId);
                return writer;
            };
    
            /**
             * Encodes the specified RoomOnlineReq message, length delimited. Does not implicitly {@link room.RoomOnlineReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomOnlineReq
             * @static
             * @param {room.IRoomOnlineReq} message RoomOnlineReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnlineReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomOnlineReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomOnlineReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomOnlineReq} RoomOnlineReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnlineReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomOnlineReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RoomOnlineReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomOnlineReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomOnlineReq} RoomOnlineReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnlineReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomOnlineReq message.
             * @function verify
             * @memberof room.RoomOnlineReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomOnlineReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                return null;
            };
    
            /**
             * Creates a RoomOnlineReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomOnlineReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomOnlineReq} RoomOnlineReq
             */
            RoomOnlineReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomOnlineReq)
                    return object;
                var message = new $root.room.RoomOnlineReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.RoomOnlineReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RoomOnlineReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomOnlineReq
             * @static
             * @param {room.RoomOnlineReq} message RoomOnlineReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomOnlineReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.gameId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                return object;
            };
    
            /**
             * Converts this RoomOnlineReq to JSON.
             * @function toJSON
             * @memberof room.RoomOnlineReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomOnlineReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomOnlineReq;
        })();
    
        room.RoomOnline = (function() {
    
            /**
             * Properties of a RoomOnline.
             * @memberof room
             * @interface IRoomOnline
             * @property {number|null} [id] RoomOnline id
             * @property {number|null} [online] RoomOnline online
             */
    
            /**
             * Constructs a new RoomOnline.
             * @memberof room
             * @classdesc Represents a RoomOnline.
             * @implements IRoomOnline
             * @constructor
             * @param {room.IRoomOnline=} [properties] Properties to set
             */
            function RoomOnline(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomOnline id.
             * @member {number} id
             * @memberof room.RoomOnline
             * @instance
             */
            RoomOnline.prototype.id = 0;
    
            /**
             * RoomOnline online.
             * @member {number} online
             * @memberof room.RoomOnline
             * @instance
             */
            RoomOnline.prototype.online = 0;
    
            /**
             * Creates a new RoomOnline instance using the specified properties.
             * @function create
             * @memberof room.RoomOnline
             * @static
             * @param {room.IRoomOnline=} [properties] Properties to set
             * @returns {room.RoomOnline} RoomOnline instance
             */
            RoomOnline.create = function create(properties) {
                return new RoomOnline(properties);
            };
    
            /**
             * Encodes the specified RoomOnline message. Does not implicitly {@link room.RoomOnline.verify|verify} messages.
             * @function encode
             * @memberof room.RoomOnline
             * @static
             * @param {room.IRoomOnline} message RoomOnline message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnline.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.online);
                return writer;
            };
    
            /**
             * Encodes the specified RoomOnline message, length delimited. Does not implicitly {@link room.RoomOnline.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomOnline
             * @static
             * @param {room.IRoomOnline} message RoomOnline message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnline.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomOnline message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomOnline
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomOnline} RoomOnline
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnline.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomOnline();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.online = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoomOnline message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomOnline
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomOnline} RoomOnline
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnline.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomOnline message.
             * @function verify
             * @memberof room.RoomOnline
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomOnline.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (!$util.isInteger(message.online))
                        return "online: integer expected";
                return null;
            };
    
            /**
             * Creates a RoomOnline message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomOnline
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomOnline} RoomOnline
             */
            RoomOnline.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomOnline)
                    return object;
                var message = new $root.room.RoomOnline();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.online != null)
                    message.online = object.online >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RoomOnline message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomOnline
             * @static
             * @param {room.RoomOnline} message RoomOnline
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomOnline.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.online = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                return object;
            };
    
            /**
             * Converts this RoomOnline to JSON.
             * @function toJSON
             * @memberof room.RoomOnline
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomOnline.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomOnline;
        })();
    
        room.RoomOnlineRsp = (function() {
    
            /**
             * Properties of a RoomOnlineRsp.
             * @memberof room
             * @interface IRoomOnlineRsp
             * @property {common.IResult|null} [result] RoomOnlineRsp result
             * @property {number|null} [gameId] RoomOnlineRsp gameId
             * @property {Array.<room.IRoomOnline>|null} [onlines] RoomOnlineRsp onlines
             */
    
            /**
             * Constructs a new RoomOnlineRsp.
             * @memberof room
             * @classdesc Represents a RoomOnlineRsp.
             * @implements IRoomOnlineRsp
             * @constructor
             * @param {room.IRoomOnlineRsp=} [properties] Properties to set
             */
            function RoomOnlineRsp(properties) {
                this.onlines = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomOnlineRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.RoomOnlineRsp
             * @instance
             */
            RoomOnlineRsp.prototype.result = null;
    
            /**
             * RoomOnlineRsp gameId.
             * @member {number} gameId
             * @memberof room.RoomOnlineRsp
             * @instance
             */
            RoomOnlineRsp.prototype.gameId = 0;
    
            /**
             * RoomOnlineRsp onlines.
             * @member {Array.<room.IRoomOnline>} onlines
             * @memberof room.RoomOnlineRsp
             * @instance
             */
            RoomOnlineRsp.prototype.onlines = $util.emptyArray;
    
            /**
             * Creates a new RoomOnlineRsp instance using the specified properties.
             * @function create
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {room.IRoomOnlineRsp=} [properties] Properties to set
             * @returns {room.RoomOnlineRsp} RoomOnlineRsp instance
             */
            RoomOnlineRsp.create = function create(properties) {
                return new RoomOnlineRsp(properties);
            };
    
            /**
             * Encodes the specified RoomOnlineRsp message. Does not implicitly {@link room.RoomOnlineRsp.verify|verify} messages.
             * @function encode
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {room.IRoomOnlineRsp} message RoomOnlineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnlineRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameId);
                if (message.onlines != null && message.onlines.length)
                    for (var i = 0; i < message.onlines.length; ++i)
                        $root.room.RoomOnline.encode(message.onlines[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RoomOnlineRsp message, length delimited. Does not implicitly {@link room.RoomOnlineRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {room.IRoomOnlineRsp} message RoomOnlineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOnlineRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomOnlineRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomOnlineRsp} RoomOnlineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnlineRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomOnlineRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.uint32();
                        break;
                    case 3:
                        if (!(message.onlines && message.onlines.length))
                            message.onlines = [];
                        message.onlines.push($root.room.RoomOnline.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoomOnlineRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomOnlineRsp} RoomOnlineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOnlineRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomOnlineRsp message.
             * @function verify
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomOnlineRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.onlines != null && message.hasOwnProperty("onlines")) {
                    if (!Array.isArray(message.onlines))
                        return "onlines: array expected";
                    for (var i = 0; i < message.onlines.length; ++i) {
                        var error = $root.room.RoomOnline.verify(message.onlines[i]);
                        if (error)
                            return "onlines." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a RoomOnlineRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomOnlineRsp} RoomOnlineRsp
             */
            RoomOnlineRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomOnlineRsp)
                    return object;
                var message = new $root.room.RoomOnlineRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.RoomOnlineRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.onlines) {
                    if (!Array.isArray(object.onlines))
                        throw TypeError(".room.RoomOnlineRsp.onlines: array expected");
                    message.onlines = [];
                    for (var i = 0; i < object.onlines.length; ++i) {
                        if (typeof object.onlines[i] !== "object")
                            throw TypeError(".room.RoomOnlineRsp.onlines: object expected");
                        message.onlines[i] = $root.room.RoomOnline.fromObject(object.onlines[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RoomOnlineRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomOnlineRsp
             * @static
             * @param {room.RoomOnlineRsp} message RoomOnlineRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomOnlineRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.onlines = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.onlines && message.onlines.length) {
                    object.onlines = [];
                    for (var j = 0; j < message.onlines.length; ++j)
                        object.onlines[j] = $root.room.RoomOnline.toObject(message.onlines[j], options);
                }
                return object;
            };
    
            /**
             * Converts this RoomOnlineRsp to JSON.
             * @function toJSON
             * @memberof room.RoomOnlineRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomOnlineRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomOnlineRsp;
        })();
    
        room.RoomChatReq = (function() {
    
            /**
             * Properties of a RoomChatReq.
             * @memberof room
             * @interface IRoomChatReq
             * @property {common.IRequest} request RoomChatReq request
             * @property {number} type RoomChatReq type
             * @property {string} message RoomChatReq message
             * @property {number|null} [destID] RoomChatReq destID
             */
    
            /**
             * Constructs a new RoomChatReq.
             * @memberof room
             * @classdesc Represents a RoomChatReq.
             * @implements IRoomChatReq
             * @constructor
             * @param {room.IRoomChatReq=} [properties] Properties to set
             */
            function RoomChatReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomChatReq request.
             * @member {common.IRequest} request
             * @memberof room.RoomChatReq
             * @instance
             */
            RoomChatReq.prototype.request = null;
    
            /**
             * RoomChatReq type.
             * @member {number} type
             * @memberof room.RoomChatReq
             * @instance
             */
            RoomChatReq.prototype.type = 0;
    
            /**
             * RoomChatReq message.
             * @member {string} message
             * @memberof room.RoomChatReq
             * @instance
             */
            RoomChatReq.prototype.message = "";
    
            /**
             * RoomChatReq destID.
             * @member {number} destID
             * @memberof room.RoomChatReq
             * @instance
             */
            RoomChatReq.prototype.destID = 0;
    
            /**
             * Creates a new RoomChatReq instance using the specified properties.
             * @function create
             * @memberof room.RoomChatReq
             * @static
             * @param {room.IRoomChatReq=} [properties] Properties to set
             * @returns {room.RoomChatReq} RoomChatReq instance
             */
            RoomChatReq.create = function create(properties) {
                return new RoomChatReq(properties);
            };
    
            /**
             * Encodes the specified RoomChatReq message. Does not implicitly {@link room.RoomChatReq.verify|verify} messages.
             * @function encode
             * @memberof room.RoomChatReq
             * @static
             * @param {room.IRoomChatReq} message RoomChatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomChatReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                if (message.destID != null && message.hasOwnProperty("destID"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.destID);
                return writer;
            };
    
            /**
             * Encodes the specified RoomChatReq message, length delimited. Does not implicitly {@link room.RoomChatReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomChatReq
             * @static
             * @param {room.IRoomChatReq} message RoomChatReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomChatReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomChatReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomChatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomChatReq} RoomChatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomChatReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomChatReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.uint32();
                        break;
                    case 3:
                        message.message = reader.string();
                        break;
                    case 4:
                        message.destID = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                if (!message.hasOwnProperty("type"))
                    throw $util.ProtocolError("missing required 'type'", { instance: message });
                if (!message.hasOwnProperty("message"))
                    throw $util.ProtocolError("missing required 'message'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RoomChatReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomChatReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomChatReq} RoomChatReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomChatReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomChatReq message.
             * @function verify
             * @memberof room.RoomChatReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomChatReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
                if (!$util.isString(message.message))
                    return "message: string expected";
                if (message.destID != null && message.hasOwnProperty("destID"))
                    if (!$util.isInteger(message.destID))
                        return "destID: integer expected";
                return null;
            };
    
            /**
             * Creates a RoomChatReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomChatReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomChatReq} RoomChatReq
             */
            RoomChatReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomChatReq)
                    return object;
                var message = new $root.room.RoomChatReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.RoomChatReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.message != null)
                    message.message = String(object.message);
                if (object.destID != null)
                    message.destID = object.destID >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RoomChatReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomChatReq
             * @static
             * @param {room.RoomChatReq} message RoomChatReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomChatReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.type = 0;
                    object.message = "";
                    object.destID = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.destID != null && message.hasOwnProperty("destID"))
                    object.destID = message.destID;
                return object;
            };
    
            /**
             * Converts this RoomChatReq to JSON.
             * @function toJSON
             * @memberof room.RoomChatReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomChatReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomChatReq;
        })();
    
        room.RoomChatRsp = (function() {
    
            /**
             * Properties of a RoomChatRsp.
             * @memberof room
             * @interface IRoomChatRsp
             * @property {common.IResult|null} [result] RoomChatRsp result
             * @property {number} uid RoomChatRsp uid
             * @property {number} type RoomChatRsp type
             * @property {string} message RoomChatRsp message
             * @property {number|null} [destID] RoomChatRsp destID
             */
    
            /**
             * Constructs a new RoomChatRsp.
             * @memberof room
             * @classdesc Represents a RoomChatRsp.
             * @implements IRoomChatRsp
             * @constructor
             * @param {room.IRoomChatRsp=} [properties] Properties to set
             */
            function RoomChatRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoomChatRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.RoomChatRsp
             * @instance
             */
            RoomChatRsp.prototype.result = null;
    
            /**
             * RoomChatRsp uid.
             * @member {number} uid
             * @memberof room.RoomChatRsp
             * @instance
             */
            RoomChatRsp.prototype.uid = 0;
    
            /**
             * RoomChatRsp type.
             * @member {number} type
             * @memberof room.RoomChatRsp
             * @instance
             */
            RoomChatRsp.prototype.type = 0;
    
            /**
             * RoomChatRsp message.
             * @member {string} message
             * @memberof room.RoomChatRsp
             * @instance
             */
            RoomChatRsp.prototype.message = "";
    
            /**
             * RoomChatRsp destID.
             * @member {number} destID
             * @memberof room.RoomChatRsp
             * @instance
             */
            RoomChatRsp.prototype.destID = 0;
    
            /**
             * Creates a new RoomChatRsp instance using the specified properties.
             * @function create
             * @memberof room.RoomChatRsp
             * @static
             * @param {room.IRoomChatRsp=} [properties] Properties to set
             * @returns {room.RoomChatRsp} RoomChatRsp instance
             */
            RoomChatRsp.create = function create(properties) {
                return new RoomChatRsp(properties);
            };
    
            /**
             * Encodes the specified RoomChatRsp message. Does not implicitly {@link room.RoomChatRsp.verify|verify} messages.
             * @function encode
             * @memberof room.RoomChatRsp
             * @static
             * @param {room.IRoomChatRsp} message RoomChatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomChatRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.message);
                if (message.destID != null && message.hasOwnProperty("destID"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.destID);
                return writer;
            };
    
            /**
             * Encodes the specified RoomChatRsp message, length delimited. Does not implicitly {@link room.RoomChatRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.RoomChatRsp
             * @static
             * @param {room.IRoomChatRsp} message RoomChatRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomChatRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoomChatRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.RoomChatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.RoomChatRsp} RoomChatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomChatRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.RoomChatRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.type = reader.uint32();
                        break;
                    case 4:
                        message.message = reader.string();
                        break;
                    case 5:
                        message.destID = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("uid"))
                    throw $util.ProtocolError("missing required 'uid'", { instance: message });
                if (!message.hasOwnProperty("type"))
                    throw $util.ProtocolError("missing required 'type'", { instance: message });
                if (!message.hasOwnProperty("message"))
                    throw $util.ProtocolError("missing required 'message'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a RoomChatRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.RoomChatRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.RoomChatRsp} RoomChatRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomChatRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoomChatRsp message.
             * @function verify
             * @memberof room.RoomChatRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomChatRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
                if (!$util.isString(message.message))
                    return "message: string expected";
                if (message.destID != null && message.hasOwnProperty("destID"))
                    if (!$util.isInteger(message.destID))
                        return "destID: integer expected";
                return null;
            };
    
            /**
             * Creates a RoomChatRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.RoomChatRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.RoomChatRsp} RoomChatRsp
             */
            RoomChatRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.RoomChatRsp)
                    return object;
                var message = new $root.room.RoomChatRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.RoomChatRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.type != null)
                    message.type = object.type >>> 0;
                if (object.message != null)
                    message.message = String(object.message);
                if (object.destID != null)
                    message.destID = object.destID >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RoomChatRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.RoomChatRsp
             * @static
             * @param {room.RoomChatRsp} message RoomChatRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomChatRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.type = 0;
                    object.message = "";
                    object.destID = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.destID != null && message.hasOwnProperty("destID"))
                    object.destID = message.destID;
                return object;
            };
    
            /**
             * Converts this RoomChatRsp to JSON.
             * @function toJSON
             * @memberof room.RoomChatRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomChatRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoomChatRsp;
        })();
    
        room.BankruptcyRsp = (function() {
    
            /**
             * Properties of a BankruptcyRsp.
             * @memberof room
             * @interface IBankruptcyRsp
             * @property {common.IResult|null} [result] BankruptcyRsp result
             * @property {number} uid BankruptcyRsp uid
             * @property {string|null} [message] BankruptcyRsp message
             */
    
            /**
             * Constructs a new BankruptcyRsp.
             * @memberof room
             * @classdesc Represents a BankruptcyRsp.
             * @implements IBankruptcyRsp
             * @constructor
             * @param {room.IBankruptcyRsp=} [properties] Properties to set
             */
            function BankruptcyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BankruptcyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BankruptcyRsp
             * @instance
             */
            BankruptcyRsp.prototype.result = null;
    
            /**
             * BankruptcyRsp uid.
             * @member {number} uid
             * @memberof room.BankruptcyRsp
             * @instance
             */
            BankruptcyRsp.prototype.uid = 0;
    
            /**
             * BankruptcyRsp message.
             * @member {string} message
             * @memberof room.BankruptcyRsp
             * @instance
             */
            BankruptcyRsp.prototype.message = "";
    
            /**
             * Creates a new BankruptcyRsp instance using the specified properties.
             * @function create
             * @memberof room.BankruptcyRsp
             * @static
             * @param {room.IBankruptcyRsp=} [properties] Properties to set
             * @returns {room.BankruptcyRsp} BankruptcyRsp instance
             */
            BankruptcyRsp.create = function create(properties) {
                return new BankruptcyRsp(properties);
            };
    
            /**
             * Encodes the specified BankruptcyRsp message. Does not implicitly {@link room.BankruptcyRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BankruptcyRsp
             * @static
             * @param {room.IBankruptcyRsp} message BankruptcyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptcyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.message != null && message.hasOwnProperty("message"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.message);
                return writer;
            };
    
            /**
             * Encodes the specified BankruptcyRsp message, length delimited. Does not implicitly {@link room.BankruptcyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BankruptcyRsp
             * @static
             * @param {room.IBankruptcyRsp} message BankruptcyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BankruptcyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BankruptcyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BankruptcyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BankruptcyRsp} BankruptcyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptcyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BankruptcyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 4:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("uid"))
                    throw $util.ProtocolError("missing required 'uid'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a BankruptcyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BankruptcyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BankruptcyRsp} BankruptcyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BankruptcyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BankruptcyRsp message.
             * @function verify
             * @memberof room.BankruptcyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BankruptcyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };
    
            /**
             * Creates a BankruptcyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BankruptcyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BankruptcyRsp} BankruptcyRsp
             */
            BankruptcyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BankruptcyRsp)
                    return object;
                var message = new $root.room.BankruptcyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BankruptcyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };
    
            /**
             * Creates a plain object from a BankruptcyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BankruptcyRsp
             * @static
             * @param {room.BankruptcyRsp} message BankruptcyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BankruptcyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.message = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };
    
            /**
             * Converts this BankruptcyRsp to JSON.
             * @function toJSON
             * @memberof room.BankruptcyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BankruptcyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BankruptcyRsp;
        })();
    
        room.TimeAwardReq = (function() {
    
            /**
             * Properties of a TimeAwardReq.
             * @memberof room
             * @interface ITimeAwardReq
             * @property {common.IRequest} request TimeAwardReq request
             * @property {number} time TimeAwardReq time
             */
    
            /**
             * Constructs a new TimeAwardReq.
             * @memberof room
             * @classdesc Represents a TimeAwardReq.
             * @implements ITimeAwardReq
             * @constructor
             * @param {room.ITimeAwardReq=} [properties] Properties to set
             */
            function TimeAwardReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TimeAwardReq request.
             * @member {common.IRequest} request
             * @memberof room.TimeAwardReq
             * @instance
             */
            TimeAwardReq.prototype.request = null;
    
            /**
             * TimeAwardReq time.
             * @member {number} time
             * @memberof room.TimeAwardReq
             * @instance
             */
            TimeAwardReq.prototype.time = 0;
    
            /**
             * Creates a new TimeAwardReq instance using the specified properties.
             * @function create
             * @memberof room.TimeAwardReq
             * @static
             * @param {room.ITimeAwardReq=} [properties] Properties to set
             * @returns {room.TimeAwardReq} TimeAwardReq instance
             */
            TimeAwardReq.create = function create(properties) {
                return new TimeAwardReq(properties);
            };
    
            /**
             * Encodes the specified TimeAwardReq message. Does not implicitly {@link room.TimeAwardReq.verify|verify} messages.
             * @function encode
             * @memberof room.TimeAwardReq
             * @static
             * @param {room.ITimeAwardReq} message TimeAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeAwardReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                return writer;
            };
    
            /**
             * Encodes the specified TimeAwardReq message, length delimited. Does not implicitly {@link room.TimeAwardReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TimeAwardReq
             * @static
             * @param {room.ITimeAwardReq} message TimeAwardReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeAwardReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TimeAwardReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.TimeAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TimeAwardReq} TimeAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeAwardReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TimeAwardReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                if (!message.hasOwnProperty("time"))
                    throw $util.ProtocolError("missing required 'time'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a TimeAwardReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TimeAwardReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TimeAwardReq} TimeAwardReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeAwardReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TimeAwardReq message.
             * @function verify
             * @memberof room.TimeAwardReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimeAwardReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
                return null;
            };
    
            /**
             * Creates a TimeAwardReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TimeAwardReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TimeAwardReq} TimeAwardReq
             */
            TimeAwardReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TimeAwardReq)
                    return object;
                var message = new $root.room.TimeAwardReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.TimeAwardReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.time != null)
                    message.time = object.time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TimeAwardReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TimeAwardReq
             * @static
             * @param {room.TimeAwardReq} message TimeAwardReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimeAwardReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.time = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                return object;
            };
    
            /**
             * Converts this TimeAwardReq to JSON.
             * @function toJSON
             * @memberof room.TimeAwardReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimeAwardReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TimeAwardReq;
        })();
    
        room.TimeAwardRsp = (function() {
    
            /**
             * Properties of a TimeAwardRsp.
             * @memberof room
             * @interface ITimeAwardRsp
             * @property {common.IResult|null} [result] TimeAwardRsp result
             * @property {number} money TimeAwardRsp money
             * @property {number} nextTime TimeAwardRsp nextTime
             */
    
            /**
             * Constructs a new TimeAwardRsp.
             * @memberof room
             * @classdesc Represents a TimeAwardRsp.
             * @implements ITimeAwardRsp
             * @constructor
             * @param {room.ITimeAwardRsp=} [properties] Properties to set
             */
            function TimeAwardRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TimeAwardRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.TimeAwardRsp
             * @instance
             */
            TimeAwardRsp.prototype.result = null;
    
            /**
             * TimeAwardRsp money.
             * @member {number} money
             * @memberof room.TimeAwardRsp
             * @instance
             */
            TimeAwardRsp.prototype.money = 0;
    
            /**
             * TimeAwardRsp nextTime.
             * @member {number} nextTime
             * @memberof room.TimeAwardRsp
             * @instance
             */
            TimeAwardRsp.prototype.nextTime = 0;
    
            /**
             * Creates a new TimeAwardRsp instance using the specified properties.
             * @function create
             * @memberof room.TimeAwardRsp
             * @static
             * @param {room.ITimeAwardRsp=} [properties] Properties to set
             * @returns {room.TimeAwardRsp} TimeAwardRsp instance
             */
            TimeAwardRsp.create = function create(properties) {
                return new TimeAwardRsp(properties);
            };
    
            /**
             * Encodes the specified TimeAwardRsp message. Does not implicitly {@link room.TimeAwardRsp.verify|verify} messages.
             * @function encode
             * @memberof room.TimeAwardRsp
             * @static
             * @param {room.ITimeAwardRsp} message TimeAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeAwardRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.money);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.nextTime);
                return writer;
            };
    
            /**
             * Encodes the specified TimeAwardRsp message, length delimited. Does not implicitly {@link room.TimeAwardRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TimeAwardRsp
             * @static
             * @param {room.ITimeAwardRsp} message TimeAwardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimeAwardRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TimeAwardRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.TimeAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TimeAwardRsp} TimeAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeAwardRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TimeAwardRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.money = reader.uint32();
                        break;
                    case 3:
                        message.nextTime = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("money"))
                    throw $util.ProtocolError("missing required 'money'", { instance: message });
                if (!message.hasOwnProperty("nextTime"))
                    throw $util.ProtocolError("missing required 'nextTime'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a TimeAwardRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TimeAwardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TimeAwardRsp} TimeAwardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimeAwardRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TimeAwardRsp message.
             * @function verify
             * @memberof room.TimeAwardRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimeAwardRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
                if (!$util.isInteger(message.nextTime))
                    return "nextTime: integer expected";
                return null;
            };
    
            /**
             * Creates a TimeAwardRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TimeAwardRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TimeAwardRsp} TimeAwardRsp
             */
            TimeAwardRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TimeAwardRsp)
                    return object;
                var message = new $root.room.TimeAwardRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.TimeAwardRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.money != null)
                    message.money = object.money >>> 0;
                if (object.nextTime != null)
                    message.nextTime = object.nextTime >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TimeAwardRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TimeAwardRsp
             * @static
             * @param {room.TimeAwardRsp} message TimeAwardRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimeAwardRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.money = 0;
                    object.nextTime = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.money != null && message.hasOwnProperty("money"))
                    object.money = message.money;
                if (message.nextTime != null && message.hasOwnProperty("nextTime"))
                    object.nextTime = message.nextTime;
                return object;
            };
    
            /**
             * Converts this TimeAwardRsp to JSON.
             * @function toJSON
             * @memberof room.TimeAwardRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimeAwardRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TimeAwardRsp;
        })();
    
        room.SendPropReq = (function() {
    
            /**
             * Properties of a SendPropReq.
             * @memberof room
             * @interface ISendPropReq
             * @property {common.IRequest} request SendPropReq request
             * @property {number} recvId SendPropReq recvId
             * @property {number} pid SendPropReq pid
             */
    
            /**
             * Constructs a new SendPropReq.
             * @memberof room
             * @classdesc Represents a SendPropReq.
             * @implements ISendPropReq
             * @constructor
             * @param {room.ISendPropReq=} [properties] Properties to set
             */
            function SendPropReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SendPropReq request.
             * @member {common.IRequest} request
             * @memberof room.SendPropReq
             * @instance
             */
            SendPropReq.prototype.request = null;
    
            /**
             * SendPropReq recvId.
             * @member {number} recvId
             * @memberof room.SendPropReq
             * @instance
             */
            SendPropReq.prototype.recvId = 0;
    
            /**
             * SendPropReq pid.
             * @member {number} pid
             * @memberof room.SendPropReq
             * @instance
             */
            SendPropReq.prototype.pid = 0;
    
            /**
             * Creates a new SendPropReq instance using the specified properties.
             * @function create
             * @memberof room.SendPropReq
             * @static
             * @param {room.ISendPropReq=} [properties] Properties to set
             * @returns {room.SendPropReq} SendPropReq instance
             */
            SendPropReq.create = function create(properties) {
                return new SendPropReq(properties);
            };
    
            /**
             * Encodes the specified SendPropReq message. Does not implicitly {@link room.SendPropReq.verify|verify} messages.
             * @function encode
             * @memberof room.SendPropReq
             * @static
             * @param {room.ISendPropReq} message SendPropReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPropReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.recvId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pid);
                return writer;
            };
    
            /**
             * Encodes the specified SendPropReq message, length delimited. Does not implicitly {@link room.SendPropReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.SendPropReq
             * @static
             * @param {room.ISendPropReq} message SendPropReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPropReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SendPropReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.SendPropReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.SendPropReq} SendPropReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPropReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.SendPropReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.recvId = reader.uint32();
                        break;
                    case 3:
                        message.pid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                if (!message.hasOwnProperty("recvId"))
                    throw $util.ProtocolError("missing required 'recvId'", { instance: message });
                if (!message.hasOwnProperty("pid"))
                    throw $util.ProtocolError("missing required 'pid'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SendPropReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.SendPropReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.SendPropReq} SendPropReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPropReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SendPropReq message.
             * @function verify
             * @memberof room.SendPropReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendPropReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (!$util.isInteger(message.recvId))
                    return "recvId: integer expected";
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
                return null;
            };
    
            /**
             * Creates a SendPropReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.SendPropReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.SendPropReq} SendPropReq
             */
            SendPropReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.SendPropReq)
                    return object;
                var message = new $root.room.SendPropReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.SendPropReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.recvId != null)
                    message.recvId = object.recvId >>> 0;
                if (object.pid != null)
                    message.pid = object.pid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SendPropReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.SendPropReq
             * @static
             * @param {room.SendPropReq} message SendPropReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendPropReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.recvId = 0;
                    object.pid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.recvId != null && message.hasOwnProperty("recvId"))
                    object.recvId = message.recvId;
                if (message.pid != null && message.hasOwnProperty("pid"))
                    object.pid = message.pid;
                return object;
            };
    
            /**
             * Converts this SendPropReq to JSON.
             * @function toJSON
             * @memberof room.SendPropReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendPropReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SendPropReq;
        })();
    
        room.SendPropRsp = (function() {
    
            /**
             * Properties of a SendPropRsp.
             * @memberof room
             * @interface ISendPropRsp
             * @property {common.IResult|null} [result] SendPropRsp result
             * @property {number} sendId SendPropRsp sendId
             * @property {Array.<number>|null} [recvIds] SendPropRsp recvIds
             * @property {number} pid SendPropRsp pid
             * @property {number} money SendPropRsp money
             * @property {number} charm SendPropRsp charm
             */
    
            /**
             * Constructs a new SendPropRsp.
             * @memberof room
             * @classdesc Represents a SendPropRsp.
             * @implements ISendPropRsp
             * @constructor
             * @param {room.ISendPropRsp=} [properties] Properties to set
             */
            function SendPropRsp(properties) {
                this.recvIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SendPropRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.result = null;
    
            /**
             * SendPropRsp sendId.
             * @member {number} sendId
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.sendId = 0;
    
            /**
             * SendPropRsp recvIds.
             * @member {Array.<number>} recvIds
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.recvIds = $util.emptyArray;
    
            /**
             * SendPropRsp pid.
             * @member {number} pid
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.pid = 0;
    
            /**
             * SendPropRsp money.
             * @member {number} money
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.money = 0;
    
            /**
             * SendPropRsp charm.
             * @member {number} charm
             * @memberof room.SendPropRsp
             * @instance
             */
            SendPropRsp.prototype.charm = 0;
    
            /**
             * Creates a new SendPropRsp instance using the specified properties.
             * @function create
             * @memberof room.SendPropRsp
             * @static
             * @param {room.ISendPropRsp=} [properties] Properties to set
             * @returns {room.SendPropRsp} SendPropRsp instance
             */
            SendPropRsp.create = function create(properties) {
                return new SendPropRsp(properties);
            };
    
            /**
             * Encodes the specified SendPropRsp message. Does not implicitly {@link room.SendPropRsp.verify|verify} messages.
             * @function encode
             * @memberof room.SendPropRsp
             * @static
             * @param {room.ISendPropRsp} message SendPropRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPropRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sendId);
                if (message.recvIds != null && message.recvIds.length)
                    for (var i = 0; i < message.recvIds.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.recvIds[i]);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pid);
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.money);
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.charm);
                return writer;
            };
    
            /**
             * Encodes the specified SendPropRsp message, length delimited. Does not implicitly {@link room.SendPropRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.SendPropRsp
             * @static
             * @param {room.ISendPropRsp} message SendPropRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPropRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SendPropRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.SendPropRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.SendPropRsp} SendPropRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPropRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.SendPropRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.sendId = reader.uint32();
                        break;
                    case 3:
                        if (!(message.recvIds && message.recvIds.length))
                            message.recvIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.recvIds.push(reader.uint32());
                        } else
                            message.recvIds.push(reader.uint32());
                        break;
                    case 4:
                        message.pid = reader.uint32();
                        break;
                    case 5:
                        message.money = reader.int32();
                        break;
                    case 6:
                        message.charm = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("sendId"))
                    throw $util.ProtocolError("missing required 'sendId'", { instance: message });
                if (!message.hasOwnProperty("pid"))
                    throw $util.ProtocolError("missing required 'pid'", { instance: message });
                if (!message.hasOwnProperty("money"))
                    throw $util.ProtocolError("missing required 'money'", { instance: message });
                if (!message.hasOwnProperty("charm"))
                    throw $util.ProtocolError("missing required 'charm'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a SendPropRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.SendPropRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.SendPropRsp} SendPropRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPropRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SendPropRsp message.
             * @function verify
             * @memberof room.SendPropRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendPropRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.sendId))
                    return "sendId: integer expected";
                if (message.recvIds != null && message.hasOwnProperty("recvIds")) {
                    if (!Array.isArray(message.recvIds))
                        return "recvIds: array expected";
                    for (var i = 0; i < message.recvIds.length; ++i)
                        if (!$util.isInteger(message.recvIds[i]))
                            return "recvIds: integer[] expected";
                }
                if (!$util.isInteger(message.pid))
                    return "pid: integer expected";
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
                if (!$util.isInteger(message.charm))
                    return "charm: integer expected";
                return null;
            };
    
            /**
             * Creates a SendPropRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.SendPropRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.SendPropRsp} SendPropRsp
             */
            SendPropRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.SendPropRsp)
                    return object;
                var message = new $root.room.SendPropRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.SendPropRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.sendId != null)
                    message.sendId = object.sendId >>> 0;
                if (object.recvIds) {
                    if (!Array.isArray(object.recvIds))
                        throw TypeError(".room.SendPropRsp.recvIds: array expected");
                    message.recvIds = [];
                    for (var i = 0; i < object.recvIds.length; ++i)
                        message.recvIds[i] = object.recvIds[i] >>> 0;
                }
                if (object.pid != null)
                    message.pid = object.pid >>> 0;
                if (object.money != null)
                    message.money = object.money | 0;
                if (object.charm != null)
                    message.charm = object.charm | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SendPropRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.SendPropRsp
             * @static
             * @param {room.SendPropRsp} message SendPropRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendPropRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.recvIds = [];
                if (options.defaults) {
                    object.result = null;
                    object.sendId = 0;
                    object.pid = 0;
                    object.money = 0;
                    object.charm = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.sendId != null && message.hasOwnProperty("sendId"))
                    object.sendId = message.sendId;
                if (message.recvIds && message.recvIds.length) {
                    object.recvIds = [];
                    for (var j = 0; j < message.recvIds.length; ++j)
                        object.recvIds[j] = message.recvIds[j];
                }
                if (message.pid != null && message.hasOwnProperty("pid"))
                    object.pid = message.pid;
                if (message.money != null && message.hasOwnProperty("money"))
                    object.money = message.money;
                if (message.charm != null && message.hasOwnProperty("charm"))
                    object.charm = message.charm;
                return object;
            };
    
            /**
             * Converts this SendPropRsp to JSON.
             * @function toJSON
             * @memberof room.SendPropRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendPropRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SendPropRsp;
        })();
    
        room.PropInfoReq = (function() {
    
            /**
             * Properties of a PropInfoReq.
             * @memberof room
             * @interface IPropInfoReq
             * @property {common.IRequest} request PropInfoReq request
             */
    
            /**
             * Constructs a new PropInfoReq.
             * @memberof room
             * @classdesc Represents a PropInfoReq.
             * @implements IPropInfoReq
             * @constructor
             * @param {room.IPropInfoReq=} [properties] Properties to set
             */
            function PropInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PropInfoReq request.
             * @member {common.IRequest} request
             * @memberof room.PropInfoReq
             * @instance
             */
            PropInfoReq.prototype.request = null;
    
            /**
             * Creates a new PropInfoReq instance using the specified properties.
             * @function create
             * @memberof room.PropInfoReq
             * @static
             * @param {room.IPropInfoReq=} [properties] Properties to set
             * @returns {room.PropInfoReq} PropInfoReq instance
             */
            PropInfoReq.create = function create(properties) {
                return new PropInfoReq(properties);
            };
    
            /**
             * Encodes the specified PropInfoReq message. Does not implicitly {@link room.PropInfoReq.verify|verify} messages.
             * @function encode
             * @memberof room.PropInfoReq
             * @static
             * @param {room.IPropInfoReq} message PropInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PropInfoReq message, length delimited. Does not implicitly {@link room.PropInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PropInfoReq
             * @static
             * @param {room.IPropInfoReq} message PropInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PropInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.PropInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PropInfoReq} PropInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PropInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a PropInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PropInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PropInfoReq} PropInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PropInfoReq message.
             * @function verify
             * @memberof room.PropInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PropInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a PropInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PropInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PropInfoReq} PropInfoReq
             */
            PropInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PropInfoReq)
                    return object;
                var message = new $root.room.PropInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.PropInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PropInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PropInfoReq
             * @static
             * @param {room.PropInfoReq} message PropInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PropInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this PropInfoReq to JSON.
             * @function toJSON
             * @memberof room.PropInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PropInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PropInfoReq;
        })();
    
        room.PropInfo = (function() {
    
            /**
             * Properties of a PropInfo.
             * @memberof room
             * @interface IPropInfo
             * @property {common.IResult|null} [result] PropInfo result
             * @property {string} name PropInfo name
             * @property {number} id PropInfo id
             * @property {number} money PropInfo money
             * @property {number} charm PropInfo charm
             * @property {number} vipLimit PropInfo vipLimit
             */
    
            /**
             * Constructs a new PropInfo.
             * @memberof room
             * @classdesc Represents a PropInfo.
             * @implements IPropInfo
             * @constructor
             * @param {room.IPropInfo=} [properties] Properties to set
             */
            function PropInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PropInfo result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.result = null;
    
            /**
             * PropInfo name.
             * @member {string} name
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.name = "";
    
            /**
             * PropInfo id.
             * @member {number} id
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.id = 0;
    
            /**
             * PropInfo money.
             * @member {number} money
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.money = 0;
    
            /**
             * PropInfo charm.
             * @member {number} charm
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.charm = 0;
    
            /**
             * PropInfo vipLimit.
             * @member {number} vipLimit
             * @memberof room.PropInfo
             * @instance
             */
            PropInfo.prototype.vipLimit = 0;
    
            /**
             * Creates a new PropInfo instance using the specified properties.
             * @function create
             * @memberof room.PropInfo
             * @static
             * @param {room.IPropInfo=} [properties] Properties to set
             * @returns {room.PropInfo} PropInfo instance
             */
            PropInfo.create = function create(properties) {
                return new PropInfo(properties);
            };
    
            /**
             * Encodes the specified PropInfo message. Does not implicitly {@link room.PropInfo.verify|verify} messages.
             * @function encode
             * @memberof room.PropInfo
             * @static
             * @param {room.IPropInfo} message PropInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.money);
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.charm);
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.vipLimit);
                return writer;
            };
    
            /**
             * Encodes the specified PropInfo message, length delimited. Does not implicitly {@link room.PropInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PropInfo
             * @static
             * @param {room.IPropInfo} message PropInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PropInfo message from the specified reader or buffer.
             * @function decode
             * @memberof room.PropInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PropInfo} PropInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PropInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.id = reader.uint32();
                        break;
                    case 4:
                        message.money = reader.int32();
                        break;
                    case 5:
                        message.charm = reader.int32();
                        break;
                    case 6:
                        message.vipLimit = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("name"))
                    throw $util.ProtocolError("missing required 'name'", { instance: message });
                if (!message.hasOwnProperty("id"))
                    throw $util.ProtocolError("missing required 'id'", { instance: message });
                if (!message.hasOwnProperty("money"))
                    throw $util.ProtocolError("missing required 'money'", { instance: message });
                if (!message.hasOwnProperty("charm"))
                    throw $util.ProtocolError("missing required 'charm'", { instance: message });
                if (!message.hasOwnProperty("vipLimit"))
                    throw $util.ProtocolError("missing required 'vipLimit'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a PropInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PropInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PropInfo} PropInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PropInfo message.
             * @function verify
             * @memberof room.PropInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PropInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isString(message.name))
                    return "name: string expected";
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
                if (!$util.isInteger(message.money))
                    return "money: integer expected";
                if (!$util.isInteger(message.charm))
                    return "charm: integer expected";
                if (!$util.isInteger(message.vipLimit))
                    return "vipLimit: integer expected";
                return null;
            };
    
            /**
             * Creates a PropInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PropInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PropInfo} PropInfo
             */
            PropInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PropInfo)
                    return object;
                var message = new $root.room.PropInfo();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.PropInfo.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.name != null)
                    message.name = String(object.name);
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.money != null)
                    message.money = object.money | 0;
                if (object.charm != null)
                    message.charm = object.charm | 0;
                if (object.vipLimit != null)
                    message.vipLimit = object.vipLimit | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PropInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PropInfo
             * @static
             * @param {room.PropInfo} message PropInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PropInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.name = "";
                    object.id = 0;
                    object.money = 0;
                    object.charm = 0;
                    object.vipLimit = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.money != null && message.hasOwnProperty("money"))
                    object.money = message.money;
                if (message.charm != null && message.hasOwnProperty("charm"))
                    object.charm = message.charm;
                if (message.vipLimit != null && message.hasOwnProperty("vipLimit"))
                    object.vipLimit = message.vipLimit;
                return object;
            };
    
            /**
             * Converts this PropInfo to JSON.
             * @function toJSON
             * @memberof room.PropInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PropInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PropInfo;
        })();
    
        room.PropInfoRsp = (function() {
    
            /**
             * Properties of a PropInfoRsp.
             * @memberof room
             * @interface IPropInfoRsp
             * @property {common.IResult|null} [result] PropInfoRsp result
             * @property {Array.<room.IPropInfo>|null} [propInfo] PropInfoRsp propInfo
             */
    
            /**
             * Constructs a new PropInfoRsp.
             * @memberof room
             * @classdesc Represents a PropInfoRsp.
             * @implements IPropInfoRsp
             * @constructor
             * @param {room.IPropInfoRsp=} [properties] Properties to set
             */
            function PropInfoRsp(properties) {
                this.propInfo = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PropInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.PropInfoRsp
             * @instance
             */
            PropInfoRsp.prototype.result = null;
    
            /**
             * PropInfoRsp propInfo.
             * @member {Array.<room.IPropInfo>} propInfo
             * @memberof room.PropInfoRsp
             * @instance
             */
            PropInfoRsp.prototype.propInfo = $util.emptyArray;
    
            /**
             * Creates a new PropInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.PropInfoRsp
             * @static
             * @param {room.IPropInfoRsp=} [properties] Properties to set
             * @returns {room.PropInfoRsp} PropInfoRsp instance
             */
            PropInfoRsp.create = function create(properties) {
                return new PropInfoRsp(properties);
            };
    
            /**
             * Encodes the specified PropInfoRsp message. Does not implicitly {@link room.PropInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.PropInfoRsp
             * @static
             * @param {room.IPropInfoRsp} message PropInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.propInfo != null && message.propInfo.length)
                    for (var i = 0; i < message.propInfo.length; ++i)
                        $root.room.PropInfo.encode(message.propInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PropInfoRsp message, length delimited. Does not implicitly {@link room.PropInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PropInfoRsp
             * @static
             * @param {room.IPropInfoRsp} message PropInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PropInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PropInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.PropInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PropInfoRsp} PropInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PropInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.propInfo && message.propInfo.length))
                            message.propInfo = [];
                        message.propInfo.push($root.room.PropInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PropInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PropInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PropInfoRsp} PropInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PropInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PropInfoRsp message.
             * @function verify
             * @memberof room.PropInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PropInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.propInfo != null && message.hasOwnProperty("propInfo")) {
                    if (!Array.isArray(message.propInfo))
                        return "propInfo: array expected";
                    for (var i = 0; i < message.propInfo.length; ++i) {
                        var error = $root.room.PropInfo.verify(message.propInfo[i]);
                        if (error)
                            return "propInfo." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PropInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PropInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PropInfoRsp} PropInfoRsp
             */
            PropInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PropInfoRsp)
                    return object;
                var message = new $root.room.PropInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.PropInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.propInfo) {
                    if (!Array.isArray(object.propInfo))
                        throw TypeError(".room.PropInfoRsp.propInfo: array expected");
                    message.propInfo = [];
                    for (var i = 0; i < object.propInfo.length; ++i) {
                        if (typeof object.propInfo[i] !== "object")
                            throw TypeError(".room.PropInfoRsp.propInfo: object expected");
                        message.propInfo[i] = $root.room.PropInfo.fromObject(object.propInfo[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PropInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PropInfoRsp
             * @static
             * @param {room.PropInfoRsp} message PropInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PropInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.propInfo = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.propInfo && message.propInfo.length) {
                    object.propInfo = [];
                    for (var j = 0; j < message.propInfo.length; ++j)
                        object.propInfo[j] = $root.room.PropInfo.toObject(message.propInfo[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PropInfoRsp to JSON.
             * @function toJSON
             * @memberof room.PropInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PropInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PropInfoRsp;
        })();
    
        room.MoneyInfo = (function() {
    
            /**
             * Properties of a MoneyInfo.
             * @memberof room
             * @interface IMoneyInfo
             * @property {number} uid MoneyInfo uid
             * @property {number|Long} coin MoneyInfo coin
             */
    
            /**
             * Constructs a new MoneyInfo.
             * @memberof room
             * @classdesc Represents a MoneyInfo.
             * @implements IMoneyInfo
             * @constructor
             * @param {room.IMoneyInfo=} [properties] Properties to set
             */
            function MoneyInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MoneyInfo uid.
             * @member {number} uid
             * @memberof room.MoneyInfo
             * @instance
             */
            MoneyInfo.prototype.uid = 0;
    
            /**
             * MoneyInfo coin.
             * @member {number|Long} coin
             * @memberof room.MoneyInfo
             * @instance
             */
            MoneyInfo.prototype.coin = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new MoneyInfo instance using the specified properties.
             * @function create
             * @memberof room.MoneyInfo
             * @static
             * @param {room.IMoneyInfo=} [properties] Properties to set
             * @returns {room.MoneyInfo} MoneyInfo instance
             */
            MoneyInfo.create = function create(properties) {
                return new MoneyInfo(properties);
            };
    
            /**
             * Encodes the specified MoneyInfo message. Does not implicitly {@link room.MoneyInfo.verify|verify} messages.
             * @function encode
             * @memberof room.MoneyInfo
             * @static
             * @param {room.IMoneyInfo} message MoneyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MoneyInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.coin);
                return writer;
            };
    
            /**
             * Encodes the specified MoneyInfo message, length delimited. Does not implicitly {@link room.MoneyInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.MoneyInfo
             * @static
             * @param {room.IMoneyInfo} message MoneyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MoneyInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MoneyInfo message from the specified reader or buffer.
             * @function decode
             * @memberof room.MoneyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.MoneyInfo} MoneyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MoneyInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.MoneyInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.coin = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("uid"))
                    throw $util.ProtocolError("missing required 'uid'", { instance: message });
                if (!message.hasOwnProperty("coin"))
                    throw $util.ProtocolError("missing required 'coin'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MoneyInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.MoneyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.MoneyInfo} MoneyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MoneyInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MoneyInfo message.
             * @function verify
             * @memberof room.MoneyInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MoneyInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
                if (!$util.isInteger(message.coin) && !(message.coin && $util.isInteger(message.coin.low) && $util.isInteger(message.coin.high)))
                    return "coin: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a MoneyInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.MoneyInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.MoneyInfo} MoneyInfo
             */
            MoneyInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.room.MoneyInfo)
                    return object;
                var message = new $root.room.MoneyInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.coin != null)
                    if ($util.Long)
                        (message.coin = $util.Long.fromValue(object.coin)).unsigned = true;
                    else if (typeof object.coin === "string")
                        message.coin = parseInt(object.coin, 10);
                    else if (typeof object.coin === "number")
                        message.coin = object.coin;
                    else if (typeof object.coin === "object")
                        message.coin = new $util.LongBits(object.coin.low >>> 0, object.coin.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a MoneyInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.MoneyInfo
             * @static
             * @param {room.MoneyInfo} message MoneyInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MoneyInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.coin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.coin = options.longs === String ? "0" : 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.coin != null && message.hasOwnProperty("coin"))
                    if (typeof message.coin === "number")
                        object.coin = options.longs === String ? String(message.coin) : message.coin;
                    else
                        object.coin = options.longs === String ? $util.Long.prototype.toString.call(message.coin) : options.longs === Number ? new $util.LongBits(message.coin.low >>> 0, message.coin.high >>> 0).toNumber(true) : message.coin;
                return object;
            };
    
            /**
             * Converts this MoneyInfo to JSON.
             * @function toJSON
             * @memberof room.MoneyInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MoneyInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MoneyInfo;
        })();
    
        room.MoneyRsp = (function() {
    
            /**
             * Properties of a MoneyRsp.
             * @memberof room
             * @interface IMoneyRsp
             * @property {common.IResult|null} [result] MoneyRsp result
             * @property {Array.<room.IMoneyInfo>|null} [moneyInfos] MoneyRsp moneyInfos
             */
    
            /**
             * Constructs a new MoneyRsp.
             * @memberof room
             * @classdesc Represents a MoneyRsp.
             * @implements IMoneyRsp
             * @constructor
             * @param {room.IMoneyRsp=} [properties] Properties to set
             */
            function MoneyRsp(properties) {
                this.moneyInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MoneyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.MoneyRsp
             * @instance
             */
            MoneyRsp.prototype.result = null;
    
            /**
             * MoneyRsp moneyInfos.
             * @member {Array.<room.IMoneyInfo>} moneyInfos
             * @memberof room.MoneyRsp
             * @instance
             */
            MoneyRsp.prototype.moneyInfos = $util.emptyArray;
    
            /**
             * Creates a new MoneyRsp instance using the specified properties.
             * @function create
             * @memberof room.MoneyRsp
             * @static
             * @param {room.IMoneyRsp=} [properties] Properties to set
             * @returns {room.MoneyRsp} MoneyRsp instance
             */
            MoneyRsp.create = function create(properties) {
                return new MoneyRsp(properties);
            };
    
            /**
             * Encodes the specified MoneyRsp message. Does not implicitly {@link room.MoneyRsp.verify|verify} messages.
             * @function encode
             * @memberof room.MoneyRsp
             * @static
             * @param {room.IMoneyRsp} message MoneyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MoneyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.moneyInfos != null && message.moneyInfos.length)
                    for (var i = 0; i < message.moneyInfos.length; ++i)
                        $root.room.MoneyInfo.encode(message.moneyInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified MoneyRsp message, length delimited. Does not implicitly {@link room.MoneyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.MoneyRsp
             * @static
             * @param {room.IMoneyRsp} message MoneyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MoneyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MoneyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.MoneyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.MoneyRsp} MoneyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MoneyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.MoneyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.moneyInfos && message.moneyInfos.length))
                            message.moneyInfos = [];
                        message.moneyInfos.push($root.room.MoneyInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MoneyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.MoneyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.MoneyRsp} MoneyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MoneyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MoneyRsp message.
             * @function verify
             * @memberof room.MoneyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MoneyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.moneyInfos != null && message.hasOwnProperty("moneyInfos")) {
                    if (!Array.isArray(message.moneyInfos))
                        return "moneyInfos: array expected";
                    for (var i = 0; i < message.moneyInfos.length; ++i) {
                        var error = $root.room.MoneyInfo.verify(message.moneyInfos[i]);
                        if (error)
                            return "moneyInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a MoneyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.MoneyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.MoneyRsp} MoneyRsp
             */
            MoneyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.MoneyRsp)
                    return object;
                var message = new $root.room.MoneyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.MoneyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.moneyInfos) {
                    if (!Array.isArray(object.moneyInfos))
                        throw TypeError(".room.MoneyRsp.moneyInfos: array expected");
                    message.moneyInfos = [];
                    for (var i = 0; i < object.moneyInfos.length; ++i) {
                        if (typeof object.moneyInfos[i] !== "object")
                            throw TypeError(".room.MoneyRsp.moneyInfos: object expected");
                        message.moneyInfos[i] = $root.room.MoneyInfo.fromObject(object.moneyInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MoneyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.MoneyRsp
             * @static
             * @param {room.MoneyRsp} message MoneyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MoneyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.moneyInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.moneyInfos && message.moneyInfos.length) {
                    object.moneyInfos = [];
                    for (var j = 0; j < message.moneyInfos.length; ++j)
                        object.moneyInfos[j] = $root.room.MoneyInfo.toObject(message.moneyInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this MoneyRsp to JSON.
             * @function toJSON
             * @memberof room.MoneyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MoneyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MoneyRsp;
        })();
    
        room.OfflineRsp = (function() {
    
            /**
             * Properties of an OfflineRsp.
             * @memberof room
             * @interface IOfflineRsp
             * @property {common.IResult|null} [result] OfflineRsp result
             * @property {number} uid OfflineRsp uid
             */
    
            /**
             * Constructs a new OfflineRsp.
             * @memberof room
             * @classdesc Represents an OfflineRsp.
             * @implements IOfflineRsp
             * @constructor
             * @param {room.IOfflineRsp=} [properties] Properties to set
             */
            function OfflineRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OfflineRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.OfflineRsp
             * @instance
             */
            OfflineRsp.prototype.result = null;
    
            /**
             * OfflineRsp uid.
             * @member {number} uid
             * @memberof room.OfflineRsp
             * @instance
             */
            OfflineRsp.prototype.uid = 0;
    
            /**
             * Creates a new OfflineRsp instance using the specified properties.
             * @function create
             * @memberof room.OfflineRsp
             * @static
             * @param {room.IOfflineRsp=} [properties] Properties to set
             * @returns {room.OfflineRsp} OfflineRsp instance
             */
            OfflineRsp.create = function create(properties) {
                return new OfflineRsp(properties);
            };
    
            /**
             * Encodes the specified OfflineRsp message. Does not implicitly {@link room.OfflineRsp.verify|verify} messages.
             * @function encode
             * @memberof room.OfflineRsp
             * @static
             * @param {room.IOfflineRsp} message OfflineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfflineRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified OfflineRsp message, length delimited. Does not implicitly {@link room.OfflineRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.OfflineRsp
             * @static
             * @param {room.IOfflineRsp} message OfflineRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OfflineRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OfflineRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.OfflineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.OfflineRsp} OfflineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfflineRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.OfflineRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("uid"))
                    throw $util.ProtocolError("missing required 'uid'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an OfflineRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.OfflineRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.OfflineRsp} OfflineRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OfflineRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OfflineRsp message.
             * @function verify
             * @memberof room.OfflineRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OfflineRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (!$util.isInteger(message.uid))
                    return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates an OfflineRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.OfflineRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.OfflineRsp} OfflineRsp
             */
            OfflineRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.OfflineRsp)
                    return object;
                var message = new $root.room.OfflineRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.OfflineRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an OfflineRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.OfflineRsp
             * @static
             * @param {room.OfflineRsp} message OfflineRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OfflineRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this OfflineRsp to JSON.
             * @function toJSON
             * @memberof room.OfflineRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OfflineRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OfflineRsp;
        })();
    
        room.LeaveReq = (function() {
    
            /**
             * Properties of a LeaveReq.
             * @memberof room
             * @interface ILeaveReq
             * @property {common.IRequest|null} [request] LeaveReq request
             * @property {boolean|null} [leave] LeaveReq leave
             */
    
            /**
             * Constructs a new LeaveReq.
             * @memberof room
             * @classdesc Represents a LeaveReq.
             * @implements ILeaveReq
             * @constructor
             * @param {room.ILeaveReq=} [properties] Properties to set
             */
            function LeaveReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LeaveReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.LeaveReq
             * @instance
             */
            LeaveReq.prototype.request = null;
    
            /**
             * LeaveReq leave.
             * @member {boolean} leave
             * @memberof room.LeaveReq
             * @instance
             */
            LeaveReq.prototype.leave = false;
    
            /**
             * Creates a new LeaveReq instance using the specified properties.
             * @function create
             * @memberof room.LeaveReq
             * @static
             * @param {room.ILeaveReq=} [properties] Properties to set
             * @returns {room.LeaveReq} LeaveReq instance
             */
            LeaveReq.create = function create(properties) {
                return new LeaveReq(properties);
            };
    
            /**
             * Encodes the specified LeaveReq message. Does not implicitly {@link room.LeaveReq.verify|verify} messages.
             * @function encode
             * @memberof room.LeaveReq
             * @static
             * @param {room.ILeaveReq} message LeaveReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.leave != null && message.hasOwnProperty("leave"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.leave);
                return writer;
            };
    
            /**
             * Encodes the specified LeaveReq message, length delimited. Does not implicitly {@link room.LeaveReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LeaveReq
             * @static
             * @param {room.ILeaveReq} message LeaveReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LeaveReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.LeaveReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LeaveReq} LeaveReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LeaveReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.leave = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LeaveReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LeaveReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LeaveReq} LeaveReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LeaveReq message.
             * @function verify
             * @memberof room.LeaveReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LeaveReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.leave != null && message.hasOwnProperty("leave"))
                    if (typeof message.leave !== "boolean")
                        return "leave: boolean expected";
                return null;
            };
    
            /**
             * Creates a LeaveReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LeaveReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LeaveReq} LeaveReq
             */
            LeaveReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LeaveReq)
                    return object;
                var message = new $root.room.LeaveReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.LeaveReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.leave != null)
                    message.leave = Boolean(object.leave);
                return message;
            };
    
            /**
             * Creates a plain object from a LeaveReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LeaveReq
             * @static
             * @param {room.LeaveReq} message LeaveReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LeaveReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.leave = false;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.leave != null && message.hasOwnProperty("leave"))
                    object.leave = message.leave;
                return object;
            };
    
            /**
             * Converts this LeaveReq to JSON.
             * @function toJSON
             * @memberof room.LeaveReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LeaveReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LeaveReq;
        })();
    
        room.LeaveRsp = (function() {
    
            /**
             * Properties of a LeaveRsp.
             * @memberof room
             * @interface ILeaveRsp
             * @property {common.IResult|null} [result] LeaveRsp result
             * @property {number|null} [uid] LeaveRsp uid
             * @property {boolean|null} [leave] LeaveRsp leave
             */
    
            /**
             * Constructs a new LeaveRsp.
             * @memberof room
             * @classdesc Represents a LeaveRsp.
             * @implements ILeaveRsp
             * @constructor
             * @param {room.ILeaveRsp=} [properties] Properties to set
             */
            function LeaveRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LeaveRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.LeaveRsp
             * @instance
             */
            LeaveRsp.prototype.result = null;
    
            /**
             * LeaveRsp uid.
             * @member {number} uid
             * @memberof room.LeaveRsp
             * @instance
             */
            LeaveRsp.prototype.uid = 0;
    
            /**
             * LeaveRsp leave.
             * @member {boolean} leave
             * @memberof room.LeaveRsp
             * @instance
             */
            LeaveRsp.prototype.leave = false;
    
            /**
             * Creates a new LeaveRsp instance using the specified properties.
             * @function create
             * @memberof room.LeaveRsp
             * @static
             * @param {room.ILeaveRsp=} [properties] Properties to set
             * @returns {room.LeaveRsp} LeaveRsp instance
             */
            LeaveRsp.create = function create(properties) {
                return new LeaveRsp(properties);
            };
    
            /**
             * Encodes the specified LeaveRsp message. Does not implicitly {@link room.LeaveRsp.verify|verify} messages.
             * @function encode
             * @memberof room.LeaveRsp
             * @static
             * @param {room.ILeaveRsp} message LeaveRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.leave != null && message.hasOwnProperty("leave"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.leave);
                return writer;
            };
    
            /**
             * Encodes the specified LeaveRsp message, length delimited. Does not implicitly {@link room.LeaveRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.LeaveRsp
             * @static
             * @param {room.ILeaveRsp} message LeaveRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LeaveRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.LeaveRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.LeaveRsp} LeaveRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.LeaveRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.leave = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LeaveRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.LeaveRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.LeaveRsp} LeaveRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LeaveRsp message.
             * @function verify
             * @memberof room.LeaveRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LeaveRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.leave != null && message.hasOwnProperty("leave"))
                    if (typeof message.leave !== "boolean")
                        return "leave: boolean expected";
                return null;
            };
    
            /**
             * Creates a LeaveRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.LeaveRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.LeaveRsp} LeaveRsp
             */
            LeaveRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.LeaveRsp)
                    return object;
                var message = new $root.room.LeaveRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.LeaveRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.leave != null)
                    message.leave = Boolean(object.leave);
                return message;
            };
    
            /**
             * Creates a plain object from a LeaveRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.LeaveRsp
             * @static
             * @param {room.LeaveRsp} message LeaveRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LeaveRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.leave = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.leave != null && message.hasOwnProperty("leave"))
                    object.leave = message.leave;
                return object;
            };
    
            /**
             * Converts this LeaveRsp to JSON.
             * @function toJSON
             * @memberof room.LeaveRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LeaveRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LeaveRsp;
        })();
    
        room.BuildInfo = (function() {
    
            /**
             * Properties of a BuildInfo.
             * @memberof room
             * @interface IBuildInfo
             * @property {number|null} [round] BuildInfo round
             * @property {number|null} [diamond] BuildInfo diamond
             * @property {string|null} [buildJson] BuildInfo buildJson
             * @property {number|null} [gameType] BuildInfo gameType
             * @property {boolean|null} [agent] BuildInfo agent
             * @property {number|null} [maxTurn] BuildInfo maxTurn
             */
    
            /**
             * Constructs a new BuildInfo.
             * @memberof room
             * @classdesc Represents a BuildInfo.
             * @implements IBuildInfo
             * @constructor
             * @param {room.IBuildInfo=} [properties] Properties to set
             */
            function BuildInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildInfo round.
             * @member {number} round
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.round = 0;
    
            /**
             * BuildInfo diamond.
             * @member {number} diamond
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.diamond = 0;
    
            /**
             * BuildInfo buildJson.
             * @member {string} buildJson
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.buildJson = "";
    
            /**
             * BuildInfo gameType.
             * @member {number} gameType
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.gameType = 0;
    
            /**
             * BuildInfo agent.
             * @member {boolean} agent
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.agent = false;
    
            /**
             * BuildInfo maxTurn.
             * @member {number} maxTurn
             * @memberof room.BuildInfo
             * @instance
             */
            BuildInfo.prototype.maxTurn = 0;
    
            /**
             * Creates a new BuildInfo instance using the specified properties.
             * @function create
             * @memberof room.BuildInfo
             * @static
             * @param {room.IBuildInfo=} [properties] Properties to set
             * @returns {room.BuildInfo} BuildInfo instance
             */
            BuildInfo.create = function create(properties) {
                return new BuildInfo(properties);
            };
    
            /**
             * Encodes the specified BuildInfo message. Does not implicitly {@link room.BuildInfo.verify|verify} messages.
             * @function encode
             * @memberof room.BuildInfo
             * @static
             * @param {room.IBuildInfo} message BuildInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.round);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.diamond);
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.buildJson);
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameType);
                if (message.agent != null && message.hasOwnProperty("agent"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.agent);
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.maxTurn);
                return writer;
            };
    
            /**
             * Encodes the specified BuildInfo message, length delimited. Does not implicitly {@link room.BuildInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildInfo
             * @static
             * @param {room.IBuildInfo} message BuildInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildInfo message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildInfo} BuildInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.round = reader.uint32();
                        break;
                    case 2:
                        message.diamond = reader.uint32();
                        break;
                    case 3:
                        message.buildJson = reader.string();
                        break;
                    case 4:
                        message.gameType = reader.uint32();
                        break;
                    case 5:
                        message.agent = reader.bool();
                        break;
                    case 6:
                        message.maxTurn = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildInfo} BuildInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildInfo message.
             * @function verify
             * @memberof room.BuildInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond))
                        return "diamond: integer expected";
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    if (!$util.isString(message.buildJson))
                        return "buildJson: string expected";
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    if (!$util.isInteger(message.gameType))
                        return "gameType: integer expected";
                if (message.agent != null && message.hasOwnProperty("agent"))
                    if (typeof message.agent !== "boolean")
                        return "agent: boolean expected";
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    if (!$util.isInteger(message.maxTurn))
                        return "maxTurn: integer expected";
                return null;
            };
    
            /**
             * Creates a BuildInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildInfo} BuildInfo
             */
            BuildInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildInfo)
                    return object;
                var message = new $root.room.BuildInfo();
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.diamond != null)
                    message.diamond = object.diamond >>> 0;
                if (object.buildJson != null)
                    message.buildJson = String(object.buildJson);
                if (object.gameType != null)
                    message.gameType = object.gameType >>> 0;
                if (object.agent != null)
                    message.agent = Boolean(object.agent);
                if (object.maxTurn != null)
                    message.maxTurn = object.maxTurn >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BuildInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildInfo
             * @static
             * @param {room.BuildInfo} message BuildInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.round = 0;
                    object.diamond = 0;
                    object.buildJson = "";
                    object.gameType = 0;
                    object.agent = false;
                    object.maxTurn = 0;
                }
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    object.diamond = message.diamond;
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    object.buildJson = message.buildJson;
                if (message.gameType != null && message.hasOwnProperty("gameType"))
                    object.gameType = message.gameType;
                if (message.agent != null && message.hasOwnProperty("agent"))
                    object.agent = message.agent;
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    object.maxTurn = message.maxTurn;
                return object;
            };
    
            /**
             * Converts this BuildInfo to JSON.
             * @function toJSON
             * @memberof room.BuildInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildInfo;
        })();
    
        room.BuildConfigReq = (function() {
    
            /**
             * Properties of a BuildConfigReq.
             * @memberof room
             * @interface IBuildConfigReq
             * @property {common.IRequest|null} [request] BuildConfigReq request
             */
    
            /**
             * Constructs a new BuildConfigReq.
             * @memberof room
             * @classdesc Represents a BuildConfigReq.
             * @implements IBuildConfigReq
             * @constructor
             * @param {room.IBuildConfigReq=} [properties] Properties to set
             */
            function BuildConfigReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildConfigReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.BuildConfigReq
             * @instance
             */
            BuildConfigReq.prototype.request = null;
    
            /**
             * Creates a new BuildConfigReq instance using the specified properties.
             * @function create
             * @memberof room.BuildConfigReq
             * @static
             * @param {room.IBuildConfigReq=} [properties] Properties to set
             * @returns {room.BuildConfigReq} BuildConfigReq instance
             */
            BuildConfigReq.create = function create(properties) {
                return new BuildConfigReq(properties);
            };
    
            /**
             * Encodes the specified BuildConfigReq message. Does not implicitly {@link room.BuildConfigReq.verify|verify} messages.
             * @function encode
             * @memberof room.BuildConfigReq
             * @static
             * @param {room.IBuildConfigReq} message BuildConfigReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BuildConfigReq message, length delimited. Does not implicitly {@link room.BuildConfigReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildConfigReq
             * @static
             * @param {room.IBuildConfigReq} message BuildConfigReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildConfigReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildConfigReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildConfigReq} BuildConfigReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildConfigReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildConfigReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildConfigReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildConfigReq} BuildConfigReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildConfigReq message.
             * @function verify
             * @memberof room.BuildConfigReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildConfigReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a BuildConfigReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildConfigReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildConfigReq} BuildConfigReq
             */
            BuildConfigReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildConfigReq)
                    return object;
                var message = new $root.room.BuildConfigReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.BuildConfigReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BuildConfigReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildConfigReq
             * @static
             * @param {room.BuildConfigReq} message BuildConfigReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildConfigReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this BuildConfigReq to JSON.
             * @function toJSON
             * @memberof room.BuildConfigReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildConfigReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildConfigReq;
        })();
    
        room.BuildConfigRsp = (function() {
    
            /**
             * Properties of a BuildConfigRsp.
             * @memberof room
             * @interface IBuildConfigRsp
             * @property {common.IResult|null} [result] BuildConfigRsp result
             * @property {Array.<room.IBuildInfo>|null} [buildInfos] BuildConfigRsp buildInfos
             * @property {boolean|null} [AA] BuildConfigRsp AA
             * @property {string|null} [buildJson] BuildConfigRsp buildJson
             */
    
            /**
             * Constructs a new BuildConfigRsp.
             * @memberof room
             * @classdesc Represents a BuildConfigRsp.
             * @implements IBuildConfigRsp
             * @constructor
             * @param {room.IBuildConfigRsp=} [properties] Properties to set
             */
            function BuildConfigRsp(properties) {
                this.buildInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildConfigRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BuildConfigRsp
             * @instance
             */
            BuildConfigRsp.prototype.result = null;
    
            /**
             * BuildConfigRsp buildInfos.
             * @member {Array.<room.IBuildInfo>} buildInfos
             * @memberof room.BuildConfigRsp
             * @instance
             */
            BuildConfigRsp.prototype.buildInfos = $util.emptyArray;
    
            /**
             * BuildConfigRsp AA.
             * @member {boolean} AA
             * @memberof room.BuildConfigRsp
             * @instance
             */
            BuildConfigRsp.prototype.AA = false;
    
            /**
             * BuildConfigRsp buildJson.
             * @member {string} buildJson
             * @memberof room.BuildConfigRsp
             * @instance
             */
            BuildConfigRsp.prototype.buildJson = "";
    
            /**
             * Creates a new BuildConfigRsp instance using the specified properties.
             * @function create
             * @memberof room.BuildConfigRsp
             * @static
             * @param {room.IBuildConfigRsp=} [properties] Properties to set
             * @returns {room.BuildConfigRsp} BuildConfigRsp instance
             */
            BuildConfigRsp.create = function create(properties) {
                return new BuildConfigRsp(properties);
            };
    
            /**
             * Encodes the specified BuildConfigRsp message. Does not implicitly {@link room.BuildConfigRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BuildConfigRsp
             * @static
             * @param {room.IBuildConfigRsp} message BuildConfigRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.buildInfos != null && message.buildInfos.length)
                    for (var i = 0; i < message.buildInfos.length; ++i)
                        $root.room.BuildInfo.encode(message.buildInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.AA);
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.buildJson);
                return writer;
            };
    
            /**
             * Encodes the specified BuildConfigRsp message, length delimited. Does not implicitly {@link room.BuildConfigRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildConfigRsp
             * @static
             * @param {room.IBuildConfigRsp} message BuildConfigRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildConfigRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildConfigRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildConfigRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildConfigRsp} BuildConfigRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildConfigRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.buildInfos && message.buildInfos.length))
                            message.buildInfos = [];
                        message.buildInfos.push($root.room.BuildInfo.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.AA = reader.bool();
                        break;
                    case 4:
                        message.buildJson = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildConfigRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildConfigRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildConfigRsp} BuildConfigRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildConfigRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildConfigRsp message.
             * @function verify
             * @memberof room.BuildConfigRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildConfigRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.buildInfos != null && message.hasOwnProperty("buildInfos")) {
                    if (!Array.isArray(message.buildInfos))
                        return "buildInfos: array expected";
                    for (var i = 0; i < message.buildInfos.length; ++i) {
                        var error = $root.room.BuildInfo.verify(message.buildInfos[i]);
                        if (error)
                            return "buildInfos." + error;
                    }
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    if (!$util.isString(message.buildJson))
                        return "buildJson: string expected";
                return null;
            };
    
            /**
             * Creates a BuildConfigRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildConfigRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildConfigRsp} BuildConfigRsp
             */
            BuildConfigRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildConfigRsp)
                    return object;
                var message = new $root.room.BuildConfigRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BuildConfigRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.buildInfos) {
                    if (!Array.isArray(object.buildInfos))
                        throw TypeError(".room.BuildConfigRsp.buildInfos: array expected");
                    message.buildInfos = [];
                    for (var i = 0; i < object.buildInfos.length; ++i) {
                        if (typeof object.buildInfos[i] !== "object")
                            throw TypeError(".room.BuildConfigRsp.buildInfos: object expected");
                        message.buildInfos[i] = $root.room.BuildInfo.fromObject(object.buildInfos[i]);
                    }
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                if (object.buildJson != null)
                    message.buildJson = String(object.buildJson);
                return message;
            };
    
            /**
             * Creates a plain object from a BuildConfigRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildConfigRsp
             * @static
             * @param {room.BuildConfigRsp} message BuildConfigRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildConfigRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.buildInfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.AA = false;
                    object.buildJson = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.buildInfos && message.buildInfos.length) {
                    object.buildInfos = [];
                    for (var j = 0; j < message.buildInfos.length; ++j)
                        object.buildInfos[j] = $root.room.BuildInfo.toObject(message.buildInfos[j], options);
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                if (message.buildJson != null && message.hasOwnProperty("buildJson"))
                    object.buildJson = message.buildJson;
                return object;
            };
    
            /**
             * Converts this BuildConfigRsp to JSON.
             * @function toJSON
             * @memberof room.BuildConfigRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildConfigRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildConfigRsp;
        })();
    
        room.BuildReq = (function() {
    
            /**
             * Properties of a BuildReq.
             * @memberof room
             * @interface IBuildReq
             * @property {common.IRequest|null} [request] BuildReq request
             * @property {room.IBuildInfo|null} [buildInfo] BuildReq buildInfo
             * @property {boolean|null} [AA] BuildReq AA
             */
    
            /**
             * Constructs a new BuildReq.
             * @memberof room
             * @classdesc Represents a BuildReq.
             * @implements IBuildReq
             * @constructor
             * @param {room.IBuildReq=} [properties] Properties to set
             */
            function BuildReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.BuildReq
             * @instance
             */
            BuildReq.prototype.request = null;
    
            /**
             * BuildReq buildInfo.
             * @member {room.IBuildInfo|null|undefined} buildInfo
             * @memberof room.BuildReq
             * @instance
             */
            BuildReq.prototype.buildInfo = null;
    
            /**
             * BuildReq AA.
             * @member {boolean} AA
             * @memberof room.BuildReq
             * @instance
             */
            BuildReq.prototype.AA = false;
    
            /**
             * Creates a new BuildReq instance using the specified properties.
             * @function create
             * @memberof room.BuildReq
             * @static
             * @param {room.IBuildReq=} [properties] Properties to set
             * @returns {room.BuildReq} BuildReq instance
             */
            BuildReq.create = function create(properties) {
                return new BuildReq(properties);
            };
    
            /**
             * Encodes the specified BuildReq message. Does not implicitly {@link room.BuildReq.verify|verify} messages.
             * @function encode
             * @memberof room.BuildReq
             * @static
             * @param {room.IBuildReq} message BuildReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.room.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.AA);
                return writer;
            };
    
            /**
             * Encodes the specified BuildReq message, length delimited. Does not implicitly {@link room.BuildReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildReq
             * @static
             * @param {room.IBuildReq} message BuildReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildReq} BuildReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.buildInfo = $root.room.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.AA = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildReq} BuildReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildReq message.
             * @function verify
             * @memberof room.BuildReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.room.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                return null;
            };
    
            /**
             * Creates a BuildReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildReq} BuildReq
             */
            BuildReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildReq)
                    return object;
                var message = new $root.room.BuildReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.BuildReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".room.BuildReq.buildInfo: object expected");
                    message.buildInfo = $root.room.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                return message;
            };
    
            /**
             * Creates a plain object from a BuildReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildReq
             * @static
             * @param {room.BuildReq} message BuildReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.buildInfo = null;
                    object.AA = false;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.room.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                return object;
            };
    
            /**
             * Converts this BuildReq to JSON.
             * @function toJSON
             * @memberof room.BuildReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildReq;
        })();
    
        room.BuildRsp = (function() {
    
            /**
             * Properties of a BuildRsp.
             * @memberof room
             * @interface IBuildRsp
             * @property {common.IResult|null} [result] BuildRsp result
             * @property {number|null} [code] BuildRsp code
             * @property {number|Long|null} [diamond] BuildRsp diamond
             */
    
            /**
             * Constructs a new BuildRsp.
             * @memberof room
             * @classdesc Represents a BuildRsp.
             * @implements IBuildRsp
             * @constructor
             * @param {room.IBuildRsp=} [properties] Properties to set
             */
            function BuildRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BuildRsp
             * @instance
             */
            BuildRsp.prototype.result = null;
    
            /**
             * BuildRsp code.
             * @member {number} code
             * @memberof room.BuildRsp
             * @instance
             */
            BuildRsp.prototype.code = 0;
    
            /**
             * BuildRsp diamond.
             * @member {number|Long} diamond
             * @memberof room.BuildRsp
             * @instance
             */
            BuildRsp.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new BuildRsp instance using the specified properties.
             * @function create
             * @memberof room.BuildRsp
             * @static
             * @param {room.IBuildRsp=} [properties] Properties to set
             * @returns {room.BuildRsp} BuildRsp instance
             */
            BuildRsp.create = function create(properties) {
                return new BuildRsp(properties);
            };
    
            /**
             * Encodes the specified BuildRsp message. Does not implicitly {@link room.BuildRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BuildRsp
             * @static
             * @param {room.IBuildRsp} message BuildRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.diamond);
                return writer;
            };
    
            /**
             * Encodes the specified BuildRsp message, length delimited. Does not implicitly {@link room.BuildRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildRsp
             * @static
             * @param {room.IBuildRsp} message BuildRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildRsp} BuildRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.diamond = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildRsp} BuildRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildRsp message.
             * @function verify
             * @memberof room.BuildRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a BuildRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildRsp} BuildRsp
             */
            BuildRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildRsp)
                    return object;
                var message = new $root.room.BuildRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BuildRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a BuildRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildRsp
             * @static
             * @param {room.BuildRsp} message BuildRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                return object;
            };
    
            /**
             * Converts this BuildRsp to JSON.
             * @function toJSON
             * @memberof room.BuildRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildRsp;
        })();
    
        room.BuildInfoReq = (function() {
    
            /**
             * Properties of a BuildInfoReq.
             * @memberof room
             * @interface IBuildInfoReq
             * @property {common.IRequest|null} [request] BuildInfoReq request
             * @property {number|null} [code] BuildInfoReq code
             */
    
            /**
             * Constructs a new BuildInfoReq.
             * @memberof room
             * @classdesc Represents a BuildInfoReq.
             * @implements IBuildInfoReq
             * @constructor
             * @param {room.IBuildInfoReq=} [properties] Properties to set
             */
            function BuildInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildInfoReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.BuildInfoReq
             * @instance
             */
            BuildInfoReq.prototype.request = null;
    
            /**
             * BuildInfoReq code.
             * @member {number} code
             * @memberof room.BuildInfoReq
             * @instance
             */
            BuildInfoReq.prototype.code = 0;
    
            /**
             * Creates a new BuildInfoReq instance using the specified properties.
             * @function create
             * @memberof room.BuildInfoReq
             * @static
             * @param {room.IBuildInfoReq=} [properties] Properties to set
             * @returns {room.BuildInfoReq} BuildInfoReq instance
             */
            BuildInfoReq.create = function create(properties) {
                return new BuildInfoReq(properties);
            };
    
            /**
             * Encodes the specified BuildInfoReq message. Does not implicitly {@link room.BuildInfoReq.verify|verify} messages.
             * @function encode
             * @memberof room.BuildInfoReq
             * @static
             * @param {room.IBuildInfoReq} message BuildInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified BuildInfoReq message, length delimited. Does not implicitly {@link room.BuildInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildInfoReq
             * @static
             * @param {room.IBuildInfoReq} message BuildInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildInfoReq} BuildInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildInfoReq} BuildInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildInfoReq message.
             * @function verify
             * @memberof room.BuildInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates a BuildInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildInfoReq} BuildInfoReq
             */
            BuildInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildInfoReq)
                    return object;
                var message = new $root.room.BuildInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.BuildInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BuildInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildInfoReq
             * @static
             * @param {room.BuildInfoReq} message BuildInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this BuildInfoReq to JSON.
             * @function toJSON
             * @memberof room.BuildInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildInfoReq;
        })();
    
        room.BuildInfoRsp = (function() {
    
            /**
             * Properties of a BuildInfoRsp.
             * @memberof room
             * @interface IBuildInfoRsp
             * @property {common.IResult|null} [result] BuildInfoRsp result
             * @property {number|null} [code] BuildInfoRsp code
             * @property {room.IBuildInfo|null} [buildInfo] BuildInfoRsp buildInfo
             * @property {boolean|null} [AA] BuildInfoRsp AA
             */
    
            /**
             * Constructs a new BuildInfoRsp.
             * @memberof room
             * @classdesc Represents a BuildInfoRsp.
             * @implements IBuildInfoRsp
             * @constructor
             * @param {room.IBuildInfoRsp=} [properties] Properties to set
             */
            function BuildInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuildInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BuildInfoRsp
             * @instance
             */
            BuildInfoRsp.prototype.result = null;
    
            /**
             * BuildInfoRsp code.
             * @member {number} code
             * @memberof room.BuildInfoRsp
             * @instance
             */
            BuildInfoRsp.prototype.code = 0;
    
            /**
             * BuildInfoRsp buildInfo.
             * @member {room.IBuildInfo|null|undefined} buildInfo
             * @memberof room.BuildInfoRsp
             * @instance
             */
            BuildInfoRsp.prototype.buildInfo = null;
    
            /**
             * BuildInfoRsp AA.
             * @member {boolean} AA
             * @memberof room.BuildInfoRsp
             * @instance
             */
            BuildInfoRsp.prototype.AA = false;
    
            /**
             * Creates a new BuildInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.BuildInfoRsp
             * @static
             * @param {room.IBuildInfoRsp=} [properties] Properties to set
             * @returns {room.BuildInfoRsp} BuildInfoRsp instance
             */
            BuildInfoRsp.create = function create(properties) {
                return new BuildInfoRsp(properties);
            };
    
            /**
             * Encodes the specified BuildInfoRsp message. Does not implicitly {@link room.BuildInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BuildInfoRsp
             * @static
             * @param {room.IBuildInfoRsp} message BuildInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.room.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.AA);
                return writer;
            };
    
            /**
             * Encodes the specified BuildInfoRsp message, length delimited. Does not implicitly {@link room.BuildInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuildInfoRsp
             * @static
             * @param {room.IBuildInfoRsp} message BuildInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuildInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuildInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuildInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuildInfoRsp} BuildInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuildInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.buildInfo = $root.room.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.AA = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuildInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuildInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuildInfoRsp} BuildInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuildInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuildInfoRsp message.
             * @function verify
             * @memberof room.BuildInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuildInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.room.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                return null;
            };
    
            /**
             * Creates a BuildInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuildInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuildInfoRsp} BuildInfoRsp
             */
            BuildInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuildInfoRsp)
                    return object;
                var message = new $root.room.BuildInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BuildInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".room.BuildInfoRsp.buildInfo: object expected");
                    message.buildInfo = $root.room.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                return message;
            };
    
            /**
             * Creates a plain object from a BuildInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuildInfoRsp
             * @static
             * @param {room.BuildInfoRsp} message BuildInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuildInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    object.buildInfo = null;
                    object.AA = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.room.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                return object;
            };
    
            /**
             * Converts this BuildInfoRsp to JSON.
             * @function toJSON
             * @memberof room.BuildInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuildInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuildInfoRsp;
        })();
    
        room.DestroyReq = (function() {
    
            /**
             * Properties of a DestroyReq.
             * @memberof room
             * @interface IDestroyReq
             * @property {common.IRequest|null} [request] DestroyReq request
             */
    
            /**
             * Constructs a new DestroyReq.
             * @memberof room
             * @classdesc Represents a DestroyReq.
             * @implements IDestroyReq
             * @constructor
             * @param {room.IDestroyReq=} [properties] Properties to set
             */
            function DestroyReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DestroyReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.DestroyReq
             * @instance
             */
            DestroyReq.prototype.request = null;
    
            /**
             * Creates a new DestroyReq instance using the specified properties.
             * @function create
             * @memberof room.DestroyReq
             * @static
             * @param {room.IDestroyReq=} [properties] Properties to set
             * @returns {room.DestroyReq} DestroyReq instance
             */
            DestroyReq.create = function create(properties) {
                return new DestroyReq(properties);
            };
    
            /**
             * Encodes the specified DestroyReq message. Does not implicitly {@link room.DestroyReq.verify|verify} messages.
             * @function encode
             * @memberof room.DestroyReq
             * @static
             * @param {room.IDestroyReq} message DestroyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DestroyReq message, length delimited. Does not implicitly {@link room.DestroyReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.DestroyReq
             * @static
             * @param {room.IDestroyReq} message DestroyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DestroyReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.DestroyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.DestroyReq} DestroyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.DestroyReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DestroyReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.DestroyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.DestroyReq} DestroyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DestroyReq message.
             * @function verify
             * @memberof room.DestroyReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DestroyReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a DestroyReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.DestroyReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.DestroyReq} DestroyReq
             */
            DestroyReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.DestroyReq)
                    return object;
                var message = new $root.room.DestroyReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.DestroyReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DestroyReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.DestroyReq
             * @static
             * @param {room.DestroyReq} message DestroyReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DestroyReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this DestroyReq to JSON.
             * @function toJSON
             * @memberof room.DestroyReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DestroyReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DestroyReq;
        })();
    
        room.DestroyRsp = (function() {
    
            /**
             * Properties of a DestroyRsp.
             * @memberof room
             * @interface IDestroyRsp
             * @property {common.IResult|null} [result] DestroyRsp result
             */
    
            /**
             * Constructs a new DestroyRsp.
             * @memberof room
             * @classdesc Represents a DestroyRsp.
             * @implements IDestroyRsp
             * @constructor
             * @param {room.IDestroyRsp=} [properties] Properties to set
             */
            function DestroyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DestroyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.DestroyRsp
             * @instance
             */
            DestroyRsp.prototype.result = null;
    
            /**
             * Creates a new DestroyRsp instance using the specified properties.
             * @function create
             * @memberof room.DestroyRsp
             * @static
             * @param {room.IDestroyRsp=} [properties] Properties to set
             * @returns {room.DestroyRsp} DestroyRsp instance
             */
            DestroyRsp.create = function create(properties) {
                return new DestroyRsp(properties);
            };
    
            /**
             * Encodes the specified DestroyRsp message. Does not implicitly {@link room.DestroyRsp.verify|verify} messages.
             * @function encode
             * @memberof room.DestroyRsp
             * @static
             * @param {room.IDestroyRsp} message DestroyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DestroyRsp message, length delimited. Does not implicitly {@link room.DestroyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.DestroyRsp
             * @static
             * @param {room.IDestroyRsp} message DestroyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DestroyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.DestroyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.DestroyRsp} DestroyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.DestroyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DestroyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.DestroyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.DestroyRsp} DestroyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DestroyRsp message.
             * @function verify
             * @memberof room.DestroyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DestroyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a DestroyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.DestroyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.DestroyRsp} DestroyRsp
             */
            DestroyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.DestroyRsp)
                    return object;
                var message = new $root.room.DestroyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.DestroyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DestroyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.DestroyRsp
             * @static
             * @param {room.DestroyRsp} message DestroyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DestroyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this DestroyRsp to JSON.
             * @function toJSON
             * @memberof room.DestroyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DestroyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DestroyRsp;
        })();
    
        room.BuiltReq = (function() {
    
            /**
             * Properties of a BuiltReq.
             * @memberof room
             * @interface IBuiltReq
             * @property {common.IRequest|null} [request] BuiltReq request
             */
    
            /**
             * Constructs a new BuiltReq.
             * @memberof room
             * @classdesc Represents a BuiltReq.
             * @implements IBuiltReq
             * @constructor
             * @param {room.IBuiltReq=} [properties] Properties to set
             */
            function BuiltReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuiltReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.BuiltReq
             * @instance
             */
            BuiltReq.prototype.request = null;
    
            /**
             * Creates a new BuiltReq instance using the specified properties.
             * @function create
             * @memberof room.BuiltReq
             * @static
             * @param {room.IBuiltReq=} [properties] Properties to set
             * @returns {room.BuiltReq} BuiltReq instance
             */
            BuiltReq.create = function create(properties) {
                return new BuiltReq(properties);
            };
    
            /**
             * Encodes the specified BuiltReq message. Does not implicitly {@link room.BuiltReq.verify|verify} messages.
             * @function encode
             * @memberof room.BuiltReq
             * @static
             * @param {room.IBuiltReq} message BuiltReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuiltReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified BuiltReq message, length delimited. Does not implicitly {@link room.BuiltReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuiltReq
             * @static
             * @param {room.IBuiltReq} message BuiltReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuiltReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuiltReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuiltReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuiltReq} BuiltReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuiltReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuiltReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuiltReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuiltReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuiltReq} BuiltReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuiltReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuiltReq message.
             * @function verify
             * @memberof room.BuiltReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuiltReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a BuiltReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuiltReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuiltReq} BuiltReq
             */
            BuiltReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuiltReq)
                    return object;
                var message = new $root.room.BuiltReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.BuiltReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a BuiltReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuiltReq
             * @static
             * @param {room.BuiltReq} message BuiltReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuiltReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this BuiltReq to JSON.
             * @function toJSON
             * @memberof room.BuiltReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuiltReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuiltReq;
        })();
    
        room.BuiltRsp = (function() {
    
            /**
             * Properties of a BuiltRsp.
             * @memberof room
             * @interface IBuiltRsp
             * @property {common.IResult|null} [result] BuiltRsp result
             * @property {Array.<number>|null} [codes] BuiltRsp codes
             * @property {number|null} [gameId] BuiltRsp gameId
             * @property {number|null} [roomId] BuiltRsp roomId
             * @property {number|null} [tableId] BuiltRsp tableId
             * @property {number|null} [type] BuiltRsp type
             */
    
            /**
             * Constructs a new BuiltRsp.
             * @memberof room
             * @classdesc Represents a BuiltRsp.
             * @implements IBuiltRsp
             * @constructor
             * @param {room.IBuiltRsp=} [properties] Properties to set
             */
            function BuiltRsp(properties) {
                this.codes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BuiltRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.result = null;
    
            /**
             * BuiltRsp codes.
             * @member {Array.<number>} codes
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.codes = $util.emptyArray;
    
            /**
             * BuiltRsp gameId.
             * @member {number} gameId
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.gameId = 0;
    
            /**
             * BuiltRsp roomId.
             * @member {number} roomId
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.roomId = 0;
    
            /**
             * BuiltRsp tableId.
             * @member {number} tableId
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.tableId = 0;
    
            /**
             * BuiltRsp type.
             * @member {number} type
             * @memberof room.BuiltRsp
             * @instance
             */
            BuiltRsp.prototype.type = 0;
    
            /**
             * Creates a new BuiltRsp instance using the specified properties.
             * @function create
             * @memberof room.BuiltRsp
             * @static
             * @param {room.IBuiltRsp=} [properties] Properties to set
             * @returns {room.BuiltRsp} BuiltRsp instance
             */
            BuiltRsp.create = function create(properties) {
                return new BuiltRsp(properties);
            };
    
            /**
             * Encodes the specified BuiltRsp message. Does not implicitly {@link room.BuiltRsp.verify|verify} messages.
             * @function encode
             * @memberof room.BuiltRsp
             * @static
             * @param {room.IBuiltRsp} message BuiltRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuiltRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.codes != null && message.codes.length)
                    for (var i = 0; i < message.codes.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.codes[i]);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.roomId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tableId);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.type);
                return writer;
            };
    
            /**
             * Encodes the specified BuiltRsp message, length delimited. Does not implicitly {@link room.BuiltRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.BuiltRsp
             * @static
             * @param {room.IBuiltRsp} message BuiltRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuiltRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BuiltRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.BuiltRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.BuiltRsp} BuiltRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuiltRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.BuiltRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.codes && message.codes.length))
                            message.codes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.codes.push(reader.uint32());
                        } else
                            message.codes.push(reader.uint32());
                        break;
                    case 3:
                        message.gameId = reader.uint32();
                        break;
                    case 4:
                        message.roomId = reader.uint32();
                        break;
                    case 5:
                        message.tableId = reader.uint32();
                        break;
                    case 6:
                        message.type = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BuiltRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.BuiltRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.BuiltRsp} BuiltRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuiltRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BuiltRsp message.
             * @function verify
             * @memberof room.BuiltRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuiltRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.codes != null && message.hasOwnProperty("codes")) {
                    if (!Array.isArray(message.codes))
                        return "codes: array expected";
                    for (var i = 0; i < message.codes.length; ++i)
                        if (!$util.isInteger(message.codes[i]))
                            return "codes: integer[] expected";
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId))
                        return "gameId: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isInteger(message.roomId))
                        return "roomId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                return null;
            };
    
            /**
             * Creates a BuiltRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.BuiltRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.BuiltRsp} BuiltRsp
             */
            BuiltRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.BuiltRsp)
                    return object;
                var message = new $root.room.BuiltRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.BuiltRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.codes) {
                    if (!Array.isArray(object.codes))
                        throw TypeError(".room.BuiltRsp.codes: array expected");
                    message.codes = [];
                    for (var i = 0; i < object.codes.length; ++i)
                        message.codes[i] = object.codes[i] >>> 0;
                }
                if (object.gameId != null)
                    message.gameId = object.gameId >>> 0;
                if (object.roomId != null)
                    message.roomId = object.roomId >>> 0;
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                if (object.type != null)
                    message.type = object.type >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a BuiltRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.BuiltRsp
             * @static
             * @param {room.BuiltRsp} message BuiltRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuiltRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.codes = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameId = 0;
                    object.roomId = 0;
                    object.tableId = 0;
                    object.type = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.codes && message.codes.length) {
                    object.codes = [];
                    for (var j = 0; j < message.codes.length; ++j)
                        object.codes[j] = message.codes[j];
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    object.gameId = message.gameId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                return object;
            };
    
            /**
             * Converts this BuiltRsp to JSON.
             * @function toJSON
             * @memberof room.BuiltRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuiltRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BuiltRsp;
        })();
    
        room.MasterPayReq = (function() {
    
            /**
             * Properties of a MasterPayReq.
             * @memberof room
             * @interface IMasterPayReq
             * @property {common.IRequest|null} [request] MasterPayReq request
             * @property {room.IBuildInfo|null} [buildInfo] MasterPayReq buildInfo
             * @property {boolean|null} [AA] MasterPayReq AA
             */
    
            /**
             * Constructs a new MasterPayReq.
             * @memberof room
             * @classdesc Represents a MasterPayReq.
             * @implements IMasterPayReq
             * @constructor
             * @param {room.IMasterPayReq=} [properties] Properties to set
             */
            function MasterPayReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MasterPayReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.MasterPayReq
             * @instance
             */
            MasterPayReq.prototype.request = null;
    
            /**
             * MasterPayReq buildInfo.
             * @member {room.IBuildInfo|null|undefined} buildInfo
             * @memberof room.MasterPayReq
             * @instance
             */
            MasterPayReq.prototype.buildInfo = null;
    
            /**
             * MasterPayReq AA.
             * @member {boolean} AA
             * @memberof room.MasterPayReq
             * @instance
             */
            MasterPayReq.prototype.AA = false;
    
            /**
             * Creates a new MasterPayReq instance using the specified properties.
             * @function create
             * @memberof room.MasterPayReq
             * @static
             * @param {room.IMasterPayReq=} [properties] Properties to set
             * @returns {room.MasterPayReq} MasterPayReq instance
             */
            MasterPayReq.create = function create(properties) {
                return new MasterPayReq(properties);
            };
    
            /**
             * Encodes the specified MasterPayReq message. Does not implicitly {@link room.MasterPayReq.verify|verify} messages.
             * @function encode
             * @memberof room.MasterPayReq
             * @static
             * @param {room.IMasterPayReq} message MasterPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MasterPayReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.room.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.AA);
                return writer;
            };
    
            /**
             * Encodes the specified MasterPayReq message, length delimited. Does not implicitly {@link room.MasterPayReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.MasterPayReq
             * @static
             * @param {room.IMasterPayReq} message MasterPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MasterPayReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MasterPayReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.MasterPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.MasterPayReq} MasterPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MasterPayReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.MasterPayReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.buildInfo = $root.room.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.AA = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MasterPayReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.MasterPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.MasterPayReq} MasterPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MasterPayReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MasterPayReq message.
             * @function verify
             * @memberof room.MasterPayReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MasterPayReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.room.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                return null;
            };
    
            /**
             * Creates a MasterPayReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.MasterPayReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.MasterPayReq} MasterPayReq
             */
            MasterPayReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.MasterPayReq)
                    return object;
                var message = new $root.room.MasterPayReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.MasterPayReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".room.MasterPayReq.buildInfo: object expected");
                    message.buildInfo = $root.room.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                return message;
            };
    
            /**
             * Creates a plain object from a MasterPayReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.MasterPayReq
             * @static
             * @param {room.MasterPayReq} message MasterPayReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MasterPayReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.buildInfo = null;
                    object.AA = false;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.room.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                return object;
            };
    
            /**
             * Converts this MasterPayReq to JSON.
             * @function toJSON
             * @memberof room.MasterPayReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MasterPayReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MasterPayReq;
        })();
    
        room.MasterPayRsp = (function() {
    
            /**
             * Properties of a MasterPayRsp.
             * @memberof room
             * @interface IMasterPayRsp
             * @property {common.IResult|null} [result] MasterPayRsp result
             * @property {number|null} [masterId] MasterPayRsp masterId
             * @property {number|Long|null} [diamond] MasterPayRsp diamond
             * @property {room.IBuildInfo|null} [buildInfo] MasterPayRsp buildInfo
             * @property {boolean|null} [AA] MasterPayRsp AA
             * @property {number|null} [code] MasterPayRsp code
             */
    
            /**
             * Constructs a new MasterPayRsp.
             * @memberof room
             * @classdesc Represents a MasterPayRsp.
             * @implements IMasterPayRsp
             * @constructor
             * @param {room.IMasterPayRsp=} [properties] Properties to set
             */
            function MasterPayRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MasterPayRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.result = null;
    
            /**
             * MasterPayRsp masterId.
             * @member {number} masterId
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.masterId = 0;
    
            /**
             * MasterPayRsp diamond.
             * @member {number|Long} diamond
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * MasterPayRsp buildInfo.
             * @member {room.IBuildInfo|null|undefined} buildInfo
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.buildInfo = null;
    
            /**
             * MasterPayRsp AA.
             * @member {boolean} AA
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.AA = false;
    
            /**
             * MasterPayRsp code.
             * @member {number} code
             * @memberof room.MasterPayRsp
             * @instance
             */
            MasterPayRsp.prototype.code = 0;
    
            /**
             * Creates a new MasterPayRsp instance using the specified properties.
             * @function create
             * @memberof room.MasterPayRsp
             * @static
             * @param {room.IMasterPayRsp=} [properties] Properties to set
             * @returns {room.MasterPayRsp} MasterPayRsp instance
             */
            MasterPayRsp.create = function create(properties) {
                return new MasterPayRsp(properties);
            };
    
            /**
             * Encodes the specified MasterPayRsp message. Does not implicitly {@link room.MasterPayRsp.verify|verify} messages.
             * @function encode
             * @memberof room.MasterPayRsp
             * @static
             * @param {room.IMasterPayRsp} message MasterPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MasterPayRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.masterId);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.diamond);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.room.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.AA);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified MasterPayRsp message, length delimited. Does not implicitly {@link room.MasterPayRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.MasterPayRsp
             * @static
             * @param {room.IMasterPayRsp} message MasterPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MasterPayRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MasterPayRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.MasterPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.MasterPayRsp} MasterPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MasterPayRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.MasterPayRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.masterId = reader.uint32();
                        break;
                    case 3:
                        message.diamond = reader.uint64();
                        break;
                    case 4:
                        message.buildInfo = $root.room.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.AA = reader.bool();
                        break;
                    case 6:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MasterPayRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.MasterPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.MasterPayRsp} MasterPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MasterPayRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MasterPayRsp message.
             * @function verify
             * @memberof room.MasterPayRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MasterPayRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    if (!$util.isInteger(message.masterId))
                        return "masterId: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.room.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates a MasterPayRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.MasterPayRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.MasterPayRsp} MasterPayRsp
             */
            MasterPayRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.MasterPayRsp)
                    return object;
                var message = new $root.room.MasterPayRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.MasterPayRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.masterId != null)
                    message.masterId = object.masterId >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".room.MasterPayRsp.buildInfo: object expected");
                    message.buildInfo = $root.room.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MasterPayRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.MasterPayRsp
             * @static
             * @param {room.MasterPayRsp} message MasterPayRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MasterPayRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.masterId = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                    object.buildInfo = null;
                    object.AA = false;
                    object.code = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    object.masterId = message.masterId;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.room.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this MasterPayRsp to JSON.
             * @function toJSON
             * @memberof room.MasterPayRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MasterPayRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MasterPayRsp;
        })();
    
        room.NonMasterPayReq = (function() {
    
            /**
             * Properties of a NonMasterPayReq.
             * @memberof room
             * @interface INonMasterPayReq
             * @property {common.IRequest|null} [request] NonMasterPayReq request
             */
    
            /**
             * Constructs a new NonMasterPayReq.
             * @memberof room
             * @classdesc Represents a NonMasterPayReq.
             * @implements INonMasterPayReq
             * @constructor
             * @param {room.INonMasterPayReq=} [properties] Properties to set
             */
            function NonMasterPayReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * NonMasterPayReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.NonMasterPayReq
             * @instance
             */
            NonMasterPayReq.prototype.request = null;
    
            /**
             * Creates a new NonMasterPayReq instance using the specified properties.
             * @function create
             * @memberof room.NonMasterPayReq
             * @static
             * @param {room.INonMasterPayReq=} [properties] Properties to set
             * @returns {room.NonMasterPayReq} NonMasterPayReq instance
             */
            NonMasterPayReq.create = function create(properties) {
                return new NonMasterPayReq(properties);
            };
    
            /**
             * Encodes the specified NonMasterPayReq message. Does not implicitly {@link room.NonMasterPayReq.verify|verify} messages.
             * @function encode
             * @memberof room.NonMasterPayReq
             * @static
             * @param {room.INonMasterPayReq} message NonMasterPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NonMasterPayReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified NonMasterPayReq message, length delimited. Does not implicitly {@link room.NonMasterPayReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.NonMasterPayReq
             * @static
             * @param {room.INonMasterPayReq} message NonMasterPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NonMasterPayReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a NonMasterPayReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.NonMasterPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.NonMasterPayReq} NonMasterPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NonMasterPayReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.NonMasterPayReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a NonMasterPayReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.NonMasterPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.NonMasterPayReq} NonMasterPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NonMasterPayReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a NonMasterPayReq message.
             * @function verify
             * @memberof room.NonMasterPayReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NonMasterPayReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a NonMasterPayReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.NonMasterPayReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.NonMasterPayReq} NonMasterPayReq
             */
            NonMasterPayReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.NonMasterPayReq)
                    return object;
                var message = new $root.room.NonMasterPayReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.NonMasterPayReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a NonMasterPayReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.NonMasterPayReq
             * @static
             * @param {room.NonMasterPayReq} message NonMasterPayReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NonMasterPayReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this NonMasterPayReq to JSON.
             * @function toJSON
             * @memberof room.NonMasterPayReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NonMasterPayReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NonMasterPayReq;
        })();
    
        room.NonMasterPayRsp = (function() {
    
            /**
             * Properties of a NonMasterPayRsp.
             * @memberof room
             * @interface INonMasterPayRsp
             * @property {common.IResult|null} [result] NonMasterPayRsp result
             * @property {number|null} [uid] NonMasterPayRsp uid
             * @property {number|Long|null} [diamond] NonMasterPayRsp diamond
             */
    
            /**
             * Constructs a new NonMasterPayRsp.
             * @memberof room
             * @classdesc Represents a NonMasterPayRsp.
             * @implements INonMasterPayRsp
             * @constructor
             * @param {room.INonMasterPayRsp=} [properties] Properties to set
             */
            function NonMasterPayRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * NonMasterPayRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.NonMasterPayRsp
             * @instance
             */
            NonMasterPayRsp.prototype.result = null;
    
            /**
             * NonMasterPayRsp uid.
             * @member {number} uid
             * @memberof room.NonMasterPayRsp
             * @instance
             */
            NonMasterPayRsp.prototype.uid = 0;
    
            /**
             * NonMasterPayRsp diamond.
             * @member {number|Long} diamond
             * @memberof room.NonMasterPayRsp
             * @instance
             */
            NonMasterPayRsp.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new NonMasterPayRsp instance using the specified properties.
             * @function create
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {room.INonMasterPayRsp=} [properties] Properties to set
             * @returns {room.NonMasterPayRsp} NonMasterPayRsp instance
             */
            NonMasterPayRsp.create = function create(properties) {
                return new NonMasterPayRsp(properties);
            };
    
            /**
             * Encodes the specified NonMasterPayRsp message. Does not implicitly {@link room.NonMasterPayRsp.verify|verify} messages.
             * @function encode
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {room.INonMasterPayRsp} message NonMasterPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NonMasterPayRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.diamond);
                return writer;
            };
    
            /**
             * Encodes the specified NonMasterPayRsp message, length delimited. Does not implicitly {@link room.NonMasterPayRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {room.INonMasterPayRsp} message NonMasterPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NonMasterPayRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a NonMasterPayRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.NonMasterPayRsp} NonMasterPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NonMasterPayRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.NonMasterPayRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.diamond = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a NonMasterPayRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.NonMasterPayRsp} NonMasterPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NonMasterPayRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a NonMasterPayRsp message.
             * @function verify
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NonMasterPayRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a NonMasterPayRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.NonMasterPayRsp} NonMasterPayRsp
             */
            NonMasterPayRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.NonMasterPayRsp)
                    return object;
                var message = new $root.room.NonMasterPayRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.NonMasterPayRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a NonMasterPayRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.NonMasterPayRsp
             * @static
             * @param {room.NonMasterPayRsp} message NonMasterPayRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NonMasterPayRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                return object;
            };
    
            /**
             * Converts this NonMasterPayRsp to JSON.
             * @function toJSON
             * @memberof room.NonMasterPayRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NonMasterPayRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NonMasterPayRsp;
        })();
    
        room.DiamondInfo = (function() {
    
            /**
             * Properties of a DiamondInfo.
             * @memberof room
             * @interface IDiamondInfo
             * @property {common.IRequest|null} [request] DiamondInfo request
             * @property {number|null} [uid] DiamondInfo uid
             * @property {number|Long|null} [diamond] DiamondInfo diamond
             */
    
            /**
             * Constructs a new DiamondInfo.
             * @memberof room
             * @classdesc Represents a DiamondInfo.
             * @implements IDiamondInfo
             * @constructor
             * @param {room.IDiamondInfo=} [properties] Properties to set
             */
            function DiamondInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DiamondInfo request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.request = null;
    
            /**
             * DiamondInfo uid.
             * @member {number} uid
             * @memberof room.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.uid = 0;
    
            /**
             * DiamondInfo diamond.
             * @member {number|Long} diamond
             * @memberof room.DiamondInfo
             * @instance
             */
            DiamondInfo.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new DiamondInfo instance using the specified properties.
             * @function create
             * @memberof room.DiamondInfo
             * @static
             * @param {room.IDiamondInfo=} [properties] Properties to set
             * @returns {room.DiamondInfo} DiamondInfo instance
             */
            DiamondInfo.create = function create(properties) {
                return new DiamondInfo(properties);
            };
    
            /**
             * Encodes the specified DiamondInfo message. Does not implicitly {@link room.DiamondInfo.verify|verify} messages.
             * @function encode
             * @memberof room.DiamondInfo
             * @static
             * @param {room.IDiamondInfo} message DiamondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.diamond);
                return writer;
            };
    
            /**
             * Encodes the specified DiamondInfo message, length delimited. Does not implicitly {@link room.DiamondInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.DiamondInfo
             * @static
             * @param {room.IDiamondInfo} message DiamondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DiamondInfo message from the specified reader or buffer.
             * @function decode
             * @memberof room.DiamondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.DiamondInfo} DiamondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.DiamondInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.diamond = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DiamondInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.DiamondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.DiamondInfo} DiamondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DiamondInfo message.
             * @function verify
             * @memberof room.DiamondInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiamondInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                        return "diamond: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a DiamondInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.DiamondInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.DiamondInfo} DiamondInfo
             */
            DiamondInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.room.DiamondInfo)
                    return object;
                var message = new $root.room.DiamondInfo();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.DiamondInfo.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.diamond != null)
                    if ($util.Long)
                        (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
                    else if (typeof object.diamond === "string")
                        message.diamond = parseInt(object.diamond, 10);
                    else if (typeof object.diamond === "number")
                        message.diamond = object.diamond;
                    else if (typeof object.diamond === "object")
                        message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a DiamondInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.DiamondInfo
             * @static
             * @param {room.DiamondInfo} message DiamondInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiamondInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.uid = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.diamond = options.longs === String ? "0" : 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.diamond != null && message.hasOwnProperty("diamond"))
                    if (typeof message.diamond === "number")
                        object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
                    else
                        object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
                return object;
            };
    
            /**
             * Converts this DiamondInfo to JSON.
             * @function toJSON
             * @memberof room.DiamondInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiamondInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DiamondInfo;
        })();
    
        room.DiamondReq = (function() {
    
            /**
             * Properties of a DiamondReq.
             * @memberof room
             * @interface IDiamondReq
             * @property {common.IRequest|null} [request] DiamondReq request
             */
    
            /**
             * Constructs a new DiamondReq.
             * @memberof room
             * @classdesc Represents a DiamondReq.
             * @implements IDiamondReq
             * @constructor
             * @param {room.IDiamondReq=} [properties] Properties to set
             */
            function DiamondReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DiamondReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.DiamondReq
             * @instance
             */
            DiamondReq.prototype.request = null;
    
            /**
             * Creates a new DiamondReq instance using the specified properties.
             * @function create
             * @memberof room.DiamondReq
             * @static
             * @param {room.IDiamondReq=} [properties] Properties to set
             * @returns {room.DiamondReq} DiamondReq instance
             */
            DiamondReq.create = function create(properties) {
                return new DiamondReq(properties);
            };
    
            /**
             * Encodes the specified DiamondReq message. Does not implicitly {@link room.DiamondReq.verify|verify} messages.
             * @function encode
             * @memberof room.DiamondReq
             * @static
             * @param {room.IDiamondReq} message DiamondReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DiamondReq message, length delimited. Does not implicitly {@link room.DiamondReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.DiamondReq
             * @static
             * @param {room.IDiamondReq} message DiamondReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DiamondReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.DiamondReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.DiamondReq} DiamondReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.DiamondReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DiamondReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.DiamondReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.DiamondReq} DiamondReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DiamondReq message.
             * @function verify
             * @memberof room.DiamondReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiamondReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a DiamondReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.DiamondReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.DiamondReq} DiamondReq
             */
            DiamondReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.DiamondReq)
                    return object;
                var message = new $root.room.DiamondReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.DiamondReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DiamondReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.DiamondReq
             * @static
             * @param {room.DiamondReq} message DiamondReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiamondReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this DiamondReq to JSON.
             * @function toJSON
             * @memberof room.DiamondReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiamondReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DiamondReq;
        })();
    
        room.DiamondRsp = (function() {
    
            /**
             * Properties of a DiamondRsp.
             * @memberof room
             * @interface IDiamondRsp
             * @property {common.IResult|null} [result] DiamondRsp result
             * @property {Array.<room.IDiamondInfo>|null} [diamondInfos] DiamondRsp diamondInfos
             */
    
            /**
             * Constructs a new DiamondRsp.
             * @memberof room
             * @classdesc Represents a DiamondRsp.
             * @implements IDiamondRsp
             * @constructor
             * @param {room.IDiamondRsp=} [properties] Properties to set
             */
            function DiamondRsp(properties) {
                this.diamondInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DiamondRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.DiamondRsp
             * @instance
             */
            DiamondRsp.prototype.result = null;
    
            /**
             * DiamondRsp diamondInfos.
             * @member {Array.<room.IDiamondInfo>} diamondInfos
             * @memberof room.DiamondRsp
             * @instance
             */
            DiamondRsp.prototype.diamondInfos = $util.emptyArray;
    
            /**
             * Creates a new DiamondRsp instance using the specified properties.
             * @function create
             * @memberof room.DiamondRsp
             * @static
             * @param {room.IDiamondRsp=} [properties] Properties to set
             * @returns {room.DiamondRsp} DiamondRsp instance
             */
            DiamondRsp.create = function create(properties) {
                return new DiamondRsp(properties);
            };
    
            /**
             * Encodes the specified DiamondRsp message. Does not implicitly {@link room.DiamondRsp.verify|verify} messages.
             * @function encode
             * @memberof room.DiamondRsp
             * @static
             * @param {room.IDiamondRsp} message DiamondRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.diamondInfos != null && message.diamondInfos.length)
                    for (var i = 0; i < message.diamondInfos.length; ++i)
                        $root.room.DiamondInfo.encode(message.diamondInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DiamondRsp message, length delimited. Does not implicitly {@link room.DiamondRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.DiamondRsp
             * @static
             * @param {room.IDiamondRsp} message DiamondRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiamondRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DiamondRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.DiamondRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.DiamondRsp} DiamondRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.DiamondRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.diamondInfos && message.diamondInfos.length))
                            message.diamondInfos = [];
                        message.diamondInfos.push($root.room.DiamondInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DiamondRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.DiamondRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.DiamondRsp} DiamondRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiamondRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DiamondRsp message.
             * @function verify
             * @memberof room.DiamondRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiamondRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.diamondInfos != null && message.hasOwnProperty("diamondInfos")) {
                    if (!Array.isArray(message.diamondInfos))
                        return "diamondInfos: array expected";
                    for (var i = 0; i < message.diamondInfos.length; ++i) {
                        var error = $root.room.DiamondInfo.verify(message.diamondInfos[i]);
                        if (error)
                            return "diamondInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a DiamondRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.DiamondRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.DiamondRsp} DiamondRsp
             */
            DiamondRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.DiamondRsp)
                    return object;
                var message = new $root.room.DiamondRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.DiamondRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.diamondInfos) {
                    if (!Array.isArray(object.diamondInfos))
                        throw TypeError(".room.DiamondRsp.diamondInfos: array expected");
                    message.diamondInfos = [];
                    for (var i = 0; i < object.diamondInfos.length; ++i) {
                        if (typeof object.diamondInfos[i] !== "object")
                            throw TypeError(".room.DiamondRsp.diamondInfos: object expected");
                        message.diamondInfos[i] = $root.room.DiamondInfo.fromObject(object.diamondInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DiamondRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.DiamondRsp
             * @static
             * @param {room.DiamondRsp} message DiamondRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiamondRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.diamondInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.diamondInfos && message.diamondInfos.length) {
                    object.diamondInfos = [];
                    for (var j = 0; j < message.diamondInfos.length; ++j)
                        object.diamondInfos[j] = $root.room.DiamondInfo.toObject(message.diamondInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this DiamondRsp to JSON.
             * @function toJSON
             * @memberof room.DiamondRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiamondRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DiamondRsp;
        })();
    
        room.PollReq = (function() {
    
            /**
             * Properties of a PollReq.
             * @memberof room
             * @interface IPollReq
             * @property {common.IRequest|null} [request] PollReq request
             */
    
            /**
             * Constructs a new PollReq.
             * @memberof room
             * @classdesc Represents a PollReq.
             * @implements IPollReq
             * @constructor
             * @param {room.IPollReq=} [properties] Properties to set
             */
            function PollReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PollReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.PollReq
             * @instance
             */
            PollReq.prototype.request = null;
    
            /**
             * Creates a new PollReq instance using the specified properties.
             * @function create
             * @memberof room.PollReq
             * @static
             * @param {room.IPollReq=} [properties] Properties to set
             * @returns {room.PollReq} PollReq instance
             */
            PollReq.create = function create(properties) {
                return new PollReq(properties);
            };
    
            /**
             * Encodes the specified PollReq message. Does not implicitly {@link room.PollReq.verify|verify} messages.
             * @function encode
             * @memberof room.PollReq
             * @static
             * @param {room.IPollReq} message PollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PollReq message, length delimited. Does not implicitly {@link room.PollReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PollReq
             * @static
             * @param {room.IPollReq} message PollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PollReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.PollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PollReq} PollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PollReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PollReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PollReq} PollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PollReq message.
             * @function verify
             * @memberof room.PollReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a PollReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PollReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PollReq} PollReq
             */
            PollReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PollReq)
                    return object;
                var message = new $root.room.PollReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.PollReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PollReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PollReq
             * @static
             * @param {room.PollReq} message PollReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this PollReq to JSON.
             * @function toJSON
             * @memberof room.PollReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PollReq;
        })();
    
        room.PollRsp = (function() {
    
            /**
             * Properties of a PollRsp.
             * @memberof room
             * @interface IPollRsp
             * @property {common.IResult|null} [result] PollRsp result
             * @property {number|null} [promoterId] PollRsp promoterId
             * @property {number|null} [expiryTime] PollRsp expiryTime
             */
    
            /**
             * Constructs a new PollRsp.
             * @memberof room
             * @classdesc Represents a PollRsp.
             * @implements IPollRsp
             * @constructor
             * @param {room.IPollRsp=} [properties] Properties to set
             */
            function PollRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PollRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.PollRsp
             * @instance
             */
            PollRsp.prototype.result = null;
    
            /**
             * PollRsp promoterId.
             * @member {number} promoterId
             * @memberof room.PollRsp
             * @instance
             */
            PollRsp.prototype.promoterId = 0;
    
            /**
             * PollRsp expiryTime.
             * @member {number} expiryTime
             * @memberof room.PollRsp
             * @instance
             */
            PollRsp.prototype.expiryTime = 0;
    
            /**
             * Creates a new PollRsp instance using the specified properties.
             * @function create
             * @memberof room.PollRsp
             * @static
             * @param {room.IPollRsp=} [properties] Properties to set
             * @returns {room.PollRsp} PollRsp instance
             */
            PollRsp.create = function create(properties) {
                return new PollRsp(properties);
            };
    
            /**
             * Encodes the specified PollRsp message. Does not implicitly {@link room.PollRsp.verify|verify} messages.
             * @function encode
             * @memberof room.PollRsp
             * @static
             * @param {room.IPollRsp} message PollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.promoterId);
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.expiryTime);
                return writer;
            };
    
            /**
             * Encodes the specified PollRsp message, length delimited. Does not implicitly {@link room.PollRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PollRsp
             * @static
             * @param {room.IPollRsp} message PollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PollRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.PollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PollRsp} PollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PollRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.promoterId = reader.uint32();
                        break;
                    case 3:
                        message.expiryTime = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PollRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PollRsp} PollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PollRsp message.
             * @function verify
             * @memberof room.PollRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    if (!$util.isInteger(message.promoterId))
                        return "promoterId: integer expected";
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    if (!$util.isInteger(message.expiryTime))
                        return "expiryTime: integer expected";
                return null;
            };
    
            /**
             * Creates a PollRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PollRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PollRsp} PollRsp
             */
            PollRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PollRsp)
                    return object;
                var message = new $root.room.PollRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.PollRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.promoterId != null)
                    message.promoterId = object.promoterId >>> 0;
                if (object.expiryTime != null)
                    message.expiryTime = object.expiryTime >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PollRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PollRsp
             * @static
             * @param {room.PollRsp} message PollRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.promoterId = 0;
                    object.expiryTime = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    object.promoterId = message.promoterId;
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    object.expiryTime = message.expiryTime;
                return object;
            };
    
            /**
             * Converts this PollRsp to JSON.
             * @function toJSON
             * @memberof room.PollRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PollRsp;
        })();
    
        room.PollInfoRsp = (function() {
    
            /**
             * Properties of a PollInfoRsp.
             * @memberof room
             * @interface IPollInfoRsp
             * @property {common.IResult|null} [result] PollInfoRsp result
             * @property {number|null} [promoterId] PollInfoRsp promoterId
             * @property {number|null} [expiryTime] PollInfoRsp expiryTime
             * @property {Array.<number>|null} [uidList] PollInfoRsp uidList
             */
    
            /**
             * Constructs a new PollInfoRsp.
             * @memberof room
             * @classdesc Represents a PollInfoRsp.
             * @implements IPollInfoRsp
             * @constructor
             * @param {room.IPollInfoRsp=} [properties] Properties to set
             */
            function PollInfoRsp(properties) {
                this.uidList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PollInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.PollInfoRsp
             * @instance
             */
            PollInfoRsp.prototype.result = null;
    
            /**
             * PollInfoRsp promoterId.
             * @member {number} promoterId
             * @memberof room.PollInfoRsp
             * @instance
             */
            PollInfoRsp.prototype.promoterId = 0;
    
            /**
             * PollInfoRsp expiryTime.
             * @member {number} expiryTime
             * @memberof room.PollInfoRsp
             * @instance
             */
            PollInfoRsp.prototype.expiryTime = 0;
    
            /**
             * PollInfoRsp uidList.
             * @member {Array.<number>} uidList
             * @memberof room.PollInfoRsp
             * @instance
             */
            PollInfoRsp.prototype.uidList = $util.emptyArray;
    
            /**
             * Creates a new PollInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.PollInfoRsp
             * @static
             * @param {room.IPollInfoRsp=} [properties] Properties to set
             * @returns {room.PollInfoRsp} PollInfoRsp instance
             */
            PollInfoRsp.create = function create(properties) {
                return new PollInfoRsp(properties);
            };
    
            /**
             * Encodes the specified PollInfoRsp message. Does not implicitly {@link room.PollInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.PollInfoRsp
             * @static
             * @param {room.IPollInfoRsp} message PollInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.promoterId);
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.expiryTime);
                if (message.uidList != null && message.uidList.length)
                    for (var i = 0; i < message.uidList.length; ++i)
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.uidList[i]);
                return writer;
            };
    
            /**
             * Encodes the specified PollInfoRsp message, length delimited. Does not implicitly {@link room.PollInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PollInfoRsp
             * @static
             * @param {room.IPollInfoRsp} message PollInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PollInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.PollInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PollInfoRsp} PollInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PollInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.promoterId = reader.uint32();
                        break;
                    case 3:
                        message.expiryTime = reader.uint32();
                        break;
                    case 4:
                        if (!(message.uidList && message.uidList.length))
                            message.uidList = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.uidList.push(reader.uint32());
                        } else
                            message.uidList.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PollInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PollInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PollInfoRsp} PollInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PollInfoRsp message.
             * @function verify
             * @memberof room.PollInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    if (!$util.isInteger(message.promoterId))
                        return "promoterId: integer expected";
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    if (!$util.isInteger(message.expiryTime))
                        return "expiryTime: integer expected";
                if (message.uidList != null && message.hasOwnProperty("uidList")) {
                    if (!Array.isArray(message.uidList))
                        return "uidList: array expected";
                    for (var i = 0; i < message.uidList.length; ++i)
                        if (!$util.isInteger(message.uidList[i]))
                            return "uidList: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a PollInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PollInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PollInfoRsp} PollInfoRsp
             */
            PollInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PollInfoRsp)
                    return object;
                var message = new $root.room.PollInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.PollInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.promoterId != null)
                    message.promoterId = object.promoterId >>> 0;
                if (object.expiryTime != null)
                    message.expiryTime = object.expiryTime >>> 0;
                if (object.uidList) {
                    if (!Array.isArray(object.uidList))
                        throw TypeError(".room.PollInfoRsp.uidList: array expected");
                    message.uidList = [];
                    for (var i = 0; i < object.uidList.length; ++i)
                        message.uidList[i] = object.uidList[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PollInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PollInfoRsp
             * @static
             * @param {room.PollInfoRsp} message PollInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uidList = [];
                if (options.defaults) {
                    object.result = null;
                    object.promoterId = 0;
                    object.expiryTime = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.promoterId != null && message.hasOwnProperty("promoterId"))
                    object.promoterId = message.promoterId;
                if (message.expiryTime != null && message.hasOwnProperty("expiryTime"))
                    object.expiryTime = message.expiryTime;
                if (message.uidList && message.uidList.length) {
                    object.uidList = [];
                    for (var j = 0; j < message.uidList.length; ++j)
                        object.uidList[j] = message.uidList[j];
                }
                return object;
            };
    
            /**
             * Converts this PollInfoRsp to JSON.
             * @function toJSON
             * @memberof room.PollInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PollInfoRsp;
        })();
    
        room.VoteReq = (function() {
    
            /**
             * Properties of a VoteReq.
             * @memberof room
             * @interface IVoteReq
             * @property {common.IRequest|null} [request] VoteReq request
             * @property {boolean|null} [agree] VoteReq agree
             */
    
            /**
             * Constructs a new VoteReq.
             * @memberof room
             * @classdesc Represents a VoteReq.
             * @implements IVoteReq
             * @constructor
             * @param {room.IVoteReq=} [properties] Properties to set
             */
            function VoteReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VoteReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.VoteReq
             * @instance
             */
            VoteReq.prototype.request = null;
    
            /**
             * VoteReq agree.
             * @member {boolean} agree
             * @memberof room.VoteReq
             * @instance
             */
            VoteReq.prototype.agree = false;
    
            /**
             * Creates a new VoteReq instance using the specified properties.
             * @function create
             * @memberof room.VoteReq
             * @static
             * @param {room.IVoteReq=} [properties] Properties to set
             * @returns {room.VoteReq} VoteReq instance
             */
            VoteReq.create = function create(properties) {
                return new VoteReq(properties);
            };
    
            /**
             * Encodes the specified VoteReq message. Does not implicitly {@link room.VoteReq.verify|verify} messages.
             * @function encode
             * @memberof room.VoteReq
             * @static
             * @param {room.IVoteReq} message VoteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.agree != null && message.hasOwnProperty("agree"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.agree);
                return writer;
            };
    
            /**
             * Encodes the specified VoteReq message, length delimited. Does not implicitly {@link room.VoteReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.VoteReq
             * @static
             * @param {room.IVoteReq} message VoteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VoteReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.VoteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.VoteReq} VoteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.VoteReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.agree = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a VoteReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.VoteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.VoteReq} VoteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VoteReq message.
             * @function verify
             * @memberof room.VoteReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.agree != null && message.hasOwnProperty("agree"))
                    if (typeof message.agree !== "boolean")
                        return "agree: boolean expected";
                return null;
            };
    
            /**
             * Creates a VoteReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.VoteReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.VoteReq} VoteReq
             */
            VoteReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.VoteReq)
                    return object;
                var message = new $root.room.VoteReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.VoteReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.agree != null)
                    message.agree = Boolean(object.agree);
                return message;
            };
    
            /**
             * Creates a plain object from a VoteReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.VoteReq
             * @static
             * @param {room.VoteReq} message VoteReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.agree = false;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.agree != null && message.hasOwnProperty("agree"))
                    object.agree = message.agree;
                return object;
            };
    
            /**
             * Converts this VoteReq to JSON.
             * @function toJSON
             * @memberof room.VoteReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VoteReq;
        })();
    
        room.VoteRsp = (function() {
    
            /**
             * Properties of a VoteRsp.
             * @memberof room
             * @interface IVoteRsp
             * @property {common.IResult|null} [result] VoteRsp result
             * @property {number|null} [voteId] VoteRsp voteId
             * @property {boolean|null} [agree] VoteRsp agree
             * @property {string|null} [name] VoteRsp name
             */
    
            /**
             * Constructs a new VoteRsp.
             * @memberof room
             * @classdesc Represents a VoteRsp.
             * @implements IVoteRsp
             * @constructor
             * @param {room.IVoteRsp=} [properties] Properties to set
             */
            function VoteRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VoteRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.VoteRsp
             * @instance
             */
            VoteRsp.prototype.result = null;
    
            /**
             * VoteRsp voteId.
             * @member {number} voteId
             * @memberof room.VoteRsp
             * @instance
             */
            VoteRsp.prototype.voteId = 0;
    
            /**
             * VoteRsp agree.
             * @member {boolean} agree
             * @memberof room.VoteRsp
             * @instance
             */
            VoteRsp.prototype.agree = false;
    
            /**
             * VoteRsp name.
             * @member {string} name
             * @memberof room.VoteRsp
             * @instance
             */
            VoteRsp.prototype.name = "";
    
            /**
             * Creates a new VoteRsp instance using the specified properties.
             * @function create
             * @memberof room.VoteRsp
             * @static
             * @param {room.IVoteRsp=} [properties] Properties to set
             * @returns {room.VoteRsp} VoteRsp instance
             */
            VoteRsp.create = function create(properties) {
                return new VoteRsp(properties);
            };
    
            /**
             * Encodes the specified VoteRsp message. Does not implicitly {@link room.VoteRsp.verify|verify} messages.
             * @function encode
             * @memberof room.VoteRsp
             * @static
             * @param {room.IVoteRsp} message VoteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.voteId != null && message.hasOwnProperty("voteId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.voteId);
                if (message.agree != null && message.hasOwnProperty("agree"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.agree);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                return writer;
            };
    
            /**
             * Encodes the specified VoteRsp message, length delimited. Does not implicitly {@link room.VoteRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.VoteRsp
             * @static
             * @param {room.IVoteRsp} message VoteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VoteRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.VoteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.VoteRsp} VoteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.VoteRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.voteId = reader.uint32();
                        break;
                    case 3:
                        message.agree = reader.bool();
                        break;
                    case 4:
                        message.name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a VoteRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.VoteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.VoteRsp} VoteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VoteRsp message.
             * @function verify
             * @memberof room.VoteRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.voteId != null && message.hasOwnProperty("voteId"))
                    if (!$util.isInteger(message.voteId))
                        return "voteId: integer expected";
                if (message.agree != null && message.hasOwnProperty("agree"))
                    if (typeof message.agree !== "boolean")
                        return "agree: boolean expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                return null;
            };
    
            /**
             * Creates a VoteRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.VoteRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.VoteRsp} VoteRsp
             */
            VoteRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.VoteRsp)
                    return object;
                var message = new $root.room.VoteRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.VoteRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.voteId != null)
                    message.voteId = object.voteId >>> 0;
                if (object.agree != null)
                    message.agree = Boolean(object.agree);
                if (object.name != null)
                    message.name = String(object.name);
                return message;
            };
    
            /**
             * Creates a plain object from a VoteRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.VoteRsp
             * @static
             * @param {room.VoteRsp} message VoteRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.voteId = 0;
                    object.agree = false;
                    object.name = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.voteId != null && message.hasOwnProperty("voteId"))
                    object.voteId = message.voteId;
                if (message.agree != null && message.hasOwnProperty("agree"))
                    object.agree = message.agree;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                return object;
            };
    
            /**
             * Converts this VoteRsp to JSON.
             * @function toJSON
             * @memberof room.VoteRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VoteRsp;
        })();
    
        room.VoteEndRsp = (function() {
    
            /**
             * Properties of a VoteEndRsp.
             * @memberof room
             * @interface IVoteEndRsp
             * @property {common.IResult|null} [result] VoteEndRsp result
             * @property {boolean|null} [pass] VoteEndRsp pass
             */
    
            /**
             * Constructs a new VoteEndRsp.
             * @memberof room
             * @classdesc Represents a VoteEndRsp.
             * @implements IVoteEndRsp
             * @constructor
             * @param {room.IVoteEndRsp=} [properties] Properties to set
             */
            function VoteEndRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * VoteEndRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.VoteEndRsp
             * @instance
             */
            VoteEndRsp.prototype.result = null;
    
            /**
             * VoteEndRsp pass.
             * @member {boolean} pass
             * @memberof room.VoteEndRsp
             * @instance
             */
            VoteEndRsp.prototype.pass = false;
    
            /**
             * Creates a new VoteEndRsp instance using the specified properties.
             * @function create
             * @memberof room.VoteEndRsp
             * @static
             * @param {room.IVoteEndRsp=} [properties] Properties to set
             * @returns {room.VoteEndRsp} VoteEndRsp instance
             */
            VoteEndRsp.create = function create(properties) {
                return new VoteEndRsp(properties);
            };
    
            /**
             * Encodes the specified VoteEndRsp message. Does not implicitly {@link room.VoteEndRsp.verify|verify} messages.
             * @function encode
             * @memberof room.VoteEndRsp
             * @static
             * @param {room.IVoteEndRsp} message VoteEndRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteEndRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pass != null && message.hasOwnProperty("pass"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.pass);
                return writer;
            };
    
            /**
             * Encodes the specified VoteEndRsp message, length delimited. Does not implicitly {@link room.VoteEndRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.VoteEndRsp
             * @static
             * @param {room.IVoteEndRsp} message VoteEndRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteEndRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a VoteEndRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.VoteEndRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.VoteEndRsp} VoteEndRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteEndRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.VoteEndRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pass = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a VoteEndRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.VoteEndRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.VoteEndRsp} VoteEndRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteEndRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a VoteEndRsp message.
             * @function verify
             * @memberof room.VoteEndRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteEndRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.pass != null && message.hasOwnProperty("pass"))
                    if (typeof message.pass !== "boolean")
                        return "pass: boolean expected";
                return null;
            };
    
            /**
             * Creates a VoteEndRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.VoteEndRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.VoteEndRsp} VoteEndRsp
             */
            VoteEndRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.VoteEndRsp)
                    return object;
                var message = new $root.room.VoteEndRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.VoteEndRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.pass != null)
                    message.pass = Boolean(object.pass);
                return message;
            };
    
            /**
             * Creates a plain object from a VoteEndRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.VoteEndRsp
             * @static
             * @param {room.VoteEndRsp} message VoteEndRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteEndRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.pass = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.pass != null && message.hasOwnProperty("pass"))
                    object.pass = message.pass;
                return object;
            };
    
            /**
             * Converts this VoteEndRsp to JSON.
             * @function toJSON
             * @memberof room.VoteEndRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteEndRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return VoteEndRsp;
        })();
    
        room.PresetReq = (function() {
    
            /**
             * Properties of a PresetReq.
             * @memberof room
             * @interface IPresetReq
             * @property {common.IRequest|null} [request] PresetReq request
             * @property {Array.<number>|null} [cards] PresetReq cards
             */
    
            /**
             * Constructs a new PresetReq.
             * @memberof room
             * @classdesc Represents a PresetReq.
             * @implements IPresetReq
             * @constructor
             * @param {room.IPresetReq=} [properties] Properties to set
             */
            function PresetReq(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PresetReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.PresetReq
             * @instance
             */
            PresetReq.prototype.request = null;
    
            /**
             * PresetReq cards.
             * @member {Array.<number>} cards
             * @memberof room.PresetReq
             * @instance
             */
            PresetReq.prototype.cards = $util.emptyArray;
    
            /**
             * Creates a new PresetReq instance using the specified properties.
             * @function create
             * @memberof room.PresetReq
             * @static
             * @param {room.IPresetReq=} [properties] Properties to set
             * @returns {room.PresetReq} PresetReq instance
             */
            PresetReq.create = function create(properties) {
                return new PresetReq(properties);
            };
    
            /**
             * Encodes the specified PresetReq message. Does not implicitly {@link room.PresetReq.verify|verify} messages.
             * @function encode
             * @memberof room.PresetReq
             * @static
             * @param {room.IPresetReq} message PresetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PresetReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cards[i]);
                return writer;
            };
    
            /**
             * Encodes the specified PresetReq message, length delimited. Does not implicitly {@link room.PresetReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PresetReq
             * @static
             * @param {room.IPresetReq} message PresetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PresetReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PresetReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.PresetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PresetReq} PresetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PresetReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PresetReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PresetReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PresetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PresetReq} PresetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PresetReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PresetReq message.
             * @function verify
             * @memberof room.PresetReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PresetReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a PresetReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PresetReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PresetReq} PresetReq
             */
            PresetReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PresetReq)
                    return object;
                var message = new $root.room.PresetReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.PresetReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".room.PresetReq.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PresetReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PresetReq
             * @static
             * @param {room.PresetReq} message PresetReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PresetReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                return object;
            };
    
            /**
             * Converts this PresetReq to JSON.
             * @function toJSON
             * @memberof room.PresetReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PresetReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PresetReq;
        })();
    
        room.PresetRsp = (function() {
    
            /**
             * Properties of a PresetRsp.
             * @memberof room
             * @interface IPresetRsp
             * @property {common.IResult|null} [result] PresetRsp result
             */
    
            /**
             * Constructs a new PresetRsp.
             * @memberof room
             * @classdesc Represents a PresetRsp.
             * @implements IPresetRsp
             * @constructor
             * @param {room.IPresetRsp=} [properties] Properties to set
             */
            function PresetRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PresetRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.PresetRsp
             * @instance
             */
            PresetRsp.prototype.result = null;
    
            /**
             * Creates a new PresetRsp instance using the specified properties.
             * @function create
             * @memberof room.PresetRsp
             * @static
             * @param {room.IPresetRsp=} [properties] Properties to set
             * @returns {room.PresetRsp} PresetRsp instance
             */
            PresetRsp.create = function create(properties) {
                return new PresetRsp(properties);
            };
    
            /**
             * Encodes the specified PresetRsp message. Does not implicitly {@link room.PresetRsp.verify|verify} messages.
             * @function encode
             * @memberof room.PresetRsp
             * @static
             * @param {room.IPresetRsp} message PresetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PresetRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PresetRsp message, length delimited. Does not implicitly {@link room.PresetRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.PresetRsp
             * @static
             * @param {room.IPresetRsp} message PresetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PresetRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PresetRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.PresetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.PresetRsp} PresetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PresetRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.PresetRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PresetRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.PresetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.PresetRsp} PresetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PresetRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PresetRsp message.
             * @function verify
             * @memberof room.PresetRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PresetRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates a PresetRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.PresetRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.PresetRsp} PresetRsp
             */
            PresetRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.PresetRsp)
                    return object;
                var message = new $root.room.PresetRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.PresetRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PresetRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.PresetRsp
             * @static
             * @param {room.PresetRsp} message PresetRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PresetRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this PresetRsp to JSON.
             * @function toJSON
             * @memberof room.PresetRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PresetRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PresetRsp;
        })();
    
        room.AgentKickoutReq = (function() {
    
            /**
             * Properties of an AgentKickoutReq.
             * @memberof room
             * @interface IAgentKickoutReq
             * @property {common.IRequest} request AgentKickoutReq request
             * @property {number|null} [code] AgentKickoutReq code
             * @property {number|null} [uid] AgentKickoutReq uid
             */
    
            /**
             * Constructs a new AgentKickoutReq.
             * @memberof room
             * @classdesc Represents an AgentKickoutReq.
             * @implements IAgentKickoutReq
             * @constructor
             * @param {room.IAgentKickoutReq=} [properties] Properties to set
             */
            function AgentKickoutReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentKickoutReq request.
             * @member {common.IRequest} request
             * @memberof room.AgentKickoutReq
             * @instance
             */
            AgentKickoutReq.prototype.request = null;
    
            /**
             * AgentKickoutReq code.
             * @member {number} code
             * @memberof room.AgentKickoutReq
             * @instance
             */
            AgentKickoutReq.prototype.code = 0;
    
            /**
             * AgentKickoutReq uid.
             * @member {number} uid
             * @memberof room.AgentKickoutReq
             * @instance
             */
            AgentKickoutReq.prototype.uid = 0;
    
            /**
             * Creates a new AgentKickoutReq instance using the specified properties.
             * @function create
             * @memberof room.AgentKickoutReq
             * @static
             * @param {room.IAgentKickoutReq=} [properties] Properties to set
             * @returns {room.AgentKickoutReq} AgentKickoutReq instance
             */
            AgentKickoutReq.create = function create(properties) {
                return new AgentKickoutReq(properties);
            };
    
            /**
             * Encodes the specified AgentKickoutReq message. Does not implicitly {@link room.AgentKickoutReq.verify|verify} messages.
             * @function encode
             * @memberof room.AgentKickoutReq
             * @static
             * @param {room.IAgentKickoutReq} message AgentKickoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentKickoutReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified AgentKickoutReq message, length delimited. Does not implicitly {@link room.AgentKickoutReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.AgentKickoutReq
             * @static
             * @param {room.IAgentKickoutReq} message AgentKickoutReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentKickoutReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentKickoutReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.AgentKickoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.AgentKickoutReq} AgentKickoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentKickoutReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.AgentKickoutReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an AgentKickoutReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.AgentKickoutReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.AgentKickoutReq} AgentKickoutReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentKickoutReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentKickoutReq message.
             * @function verify
             * @memberof room.AgentKickoutReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentKickoutReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentKickoutReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.AgentKickoutReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.AgentKickoutReq} AgentKickoutReq
             */
            AgentKickoutReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.AgentKickoutReq)
                    return object;
                var message = new $root.room.AgentKickoutReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.AgentKickoutReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentKickoutReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.AgentKickoutReq
             * @static
             * @param {room.AgentKickoutReq} message AgentKickoutReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentKickoutReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                    object.uid = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this AgentKickoutReq to JSON.
             * @function toJSON
             * @memberof room.AgentKickoutReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentKickoutReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentKickoutReq;
        })();
    
        room.AgentKickoutRsp = (function() {
    
            /**
             * Properties of an AgentKickoutRsp.
             * @memberof room
             * @interface IAgentKickoutRsp
             * @property {common.IResult|null} [result] AgentKickoutRsp result
             * @property {number|null} [code] AgentKickoutRsp code
             * @property {number|null} [uid] AgentKickoutRsp uid
             */
    
            /**
             * Constructs a new AgentKickoutRsp.
             * @memberof room
             * @classdesc Represents an AgentKickoutRsp.
             * @implements IAgentKickoutRsp
             * @constructor
             * @param {room.IAgentKickoutRsp=} [properties] Properties to set
             */
            function AgentKickoutRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentKickoutRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.AgentKickoutRsp
             * @instance
             */
            AgentKickoutRsp.prototype.result = null;
    
            /**
             * AgentKickoutRsp code.
             * @member {number} code
             * @memberof room.AgentKickoutRsp
             * @instance
             */
            AgentKickoutRsp.prototype.code = 0;
    
            /**
             * AgentKickoutRsp uid.
             * @member {number} uid
             * @memberof room.AgentKickoutRsp
             * @instance
             */
            AgentKickoutRsp.prototype.uid = 0;
    
            /**
             * Creates a new AgentKickoutRsp instance using the specified properties.
             * @function create
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {room.IAgentKickoutRsp=} [properties] Properties to set
             * @returns {room.AgentKickoutRsp} AgentKickoutRsp instance
             */
            AgentKickoutRsp.create = function create(properties) {
                return new AgentKickoutRsp(properties);
            };
    
            /**
             * Encodes the specified AgentKickoutRsp message. Does not implicitly {@link room.AgentKickoutRsp.verify|verify} messages.
             * @function encode
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {room.IAgentKickoutRsp} message AgentKickoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentKickoutRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified AgentKickoutRsp message, length delimited. Does not implicitly {@link room.AgentKickoutRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {room.IAgentKickoutRsp} message AgentKickoutRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentKickoutRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentKickoutRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.AgentKickoutRsp} AgentKickoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentKickoutRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.AgentKickoutRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    case 3:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentKickoutRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.AgentKickoutRsp} AgentKickoutRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentKickoutRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentKickoutRsp message.
             * @function verify
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentKickoutRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentKickoutRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.AgentKickoutRsp} AgentKickoutRsp
             */
            AgentKickoutRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.AgentKickoutRsp)
                    return object;
                var message = new $root.room.AgentKickoutRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.AgentKickoutRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentKickoutRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.AgentKickoutRsp
             * @static
             * @param {room.AgentKickoutRsp} message AgentKickoutRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentKickoutRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.code = 0;
                    object.uid = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this AgentKickoutRsp to JSON.
             * @function toJSON
             * @memberof room.AgentKickoutRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentKickoutRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentKickoutRsp;
        })();
    
        room.AgentDestroyReq = (function() {
    
            /**
             * Properties of an AgentDestroyReq.
             * @memberof room
             * @interface IAgentDestroyReq
             * @property {common.IRequest|null} [request] AgentDestroyReq request
             * @property {number|null} [code] AgentDestroyReq code
             */
    
            /**
             * Constructs a new AgentDestroyReq.
             * @memberof room
             * @classdesc Represents an AgentDestroyReq.
             * @implements IAgentDestroyReq
             * @constructor
             * @param {room.IAgentDestroyReq=} [properties] Properties to set
             */
            function AgentDestroyReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentDestroyReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.AgentDestroyReq
             * @instance
             */
            AgentDestroyReq.prototype.request = null;
    
            /**
             * AgentDestroyReq code.
             * @member {number} code
             * @memberof room.AgentDestroyReq
             * @instance
             */
            AgentDestroyReq.prototype.code = 0;
    
            /**
             * Creates a new AgentDestroyReq instance using the specified properties.
             * @function create
             * @memberof room.AgentDestroyReq
             * @static
             * @param {room.IAgentDestroyReq=} [properties] Properties to set
             * @returns {room.AgentDestroyReq} AgentDestroyReq instance
             */
            AgentDestroyReq.create = function create(properties) {
                return new AgentDestroyReq(properties);
            };
    
            /**
             * Encodes the specified AgentDestroyReq message. Does not implicitly {@link room.AgentDestroyReq.verify|verify} messages.
             * @function encode
             * @memberof room.AgentDestroyReq
             * @static
             * @param {room.IAgentDestroyReq} message AgentDestroyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentDestroyReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                return writer;
            };
    
            /**
             * Encodes the specified AgentDestroyReq message, length delimited. Does not implicitly {@link room.AgentDestroyReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.AgentDestroyReq
             * @static
             * @param {room.IAgentDestroyReq} message AgentDestroyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentDestroyReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentDestroyReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.AgentDestroyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.AgentDestroyReq} AgentDestroyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentDestroyReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.AgentDestroyReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentDestroyReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.AgentDestroyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.AgentDestroyReq} AgentDestroyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentDestroyReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentDestroyReq message.
             * @function verify
             * @memberof room.AgentDestroyReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentDestroyReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                return null;
            };
    
            /**
             * Creates an AgentDestroyReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.AgentDestroyReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.AgentDestroyReq} AgentDestroyReq
             */
            AgentDestroyReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.AgentDestroyReq)
                    return object;
                var message = new $root.room.AgentDestroyReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.AgentDestroyReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.code != null)
                    message.code = object.code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AgentDestroyReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.AgentDestroyReq
             * @static
             * @param {room.AgentDestroyReq} message AgentDestroyReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentDestroyReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.code = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                return object;
            };
    
            /**
             * Converts this AgentDestroyReq to JSON.
             * @function toJSON
             * @memberof room.AgentDestroyReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentDestroyReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentDestroyReq;
        })();
    
        room.AgentDestroyRsp = (function() {
    
            /**
             * Properties of an AgentDestroyRsp.
             * @memberof room
             * @interface IAgentDestroyRsp
             * @property {common.IResult|null} [result] AgentDestroyRsp result
             */
    
            /**
             * Constructs a new AgentDestroyRsp.
             * @memberof room
             * @classdesc Represents an AgentDestroyRsp.
             * @implements IAgentDestroyRsp
             * @constructor
             * @param {room.IAgentDestroyRsp=} [properties] Properties to set
             */
            function AgentDestroyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentDestroyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.AgentDestroyRsp
             * @instance
             */
            AgentDestroyRsp.prototype.result = null;
    
            /**
             * Creates a new AgentDestroyRsp instance using the specified properties.
             * @function create
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {room.IAgentDestroyRsp=} [properties] Properties to set
             * @returns {room.AgentDestroyRsp} AgentDestroyRsp instance
             */
            AgentDestroyRsp.create = function create(properties) {
                return new AgentDestroyRsp(properties);
            };
    
            /**
             * Encodes the specified AgentDestroyRsp message. Does not implicitly {@link room.AgentDestroyRsp.verify|verify} messages.
             * @function encode
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {room.IAgentDestroyRsp} message AgentDestroyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentDestroyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AgentDestroyRsp message, length delimited. Does not implicitly {@link room.AgentDestroyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {room.IAgentDestroyRsp} message AgentDestroyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentDestroyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentDestroyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.AgentDestroyRsp} AgentDestroyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentDestroyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.AgentDestroyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentDestroyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.AgentDestroyRsp} AgentDestroyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentDestroyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentDestroyRsp message.
             * @function verify
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentDestroyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                return null;
            };
    
            /**
             * Creates an AgentDestroyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.AgentDestroyRsp} AgentDestroyRsp
             */
            AgentDestroyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.AgentDestroyRsp)
                    return object;
                var message = new $root.room.AgentDestroyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.AgentDestroyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AgentDestroyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.AgentDestroyRsp
             * @static
             * @param {room.AgentDestroyRsp} message AgentDestroyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentDestroyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                return object;
            };
    
            /**
             * Converts this AgentDestroyRsp to JSON.
             * @function toJSON
             * @memberof room.AgentDestroyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentDestroyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentDestroyRsp;
        })();
    
        room.TipsRsp = (function() {
    
            /**
             * Properties of a TipsRsp.
             * @memberof room
             * @interface ITipsRsp
             * @property {common.IResult|null} [result] TipsRsp result
             * @property {string|null} [tips] TipsRsp tips
             */
    
            /**
             * Constructs a new TipsRsp.
             * @memberof room
             * @classdesc Represents a TipsRsp.
             * @implements ITipsRsp
             * @constructor
             * @param {room.ITipsRsp=} [properties] Properties to set
             */
            function TipsRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TipsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.TipsRsp
             * @instance
             */
            TipsRsp.prototype.result = null;
    
            /**
             * TipsRsp tips.
             * @member {string} tips
             * @memberof room.TipsRsp
             * @instance
             */
            TipsRsp.prototype.tips = "";
    
            /**
             * Creates a new TipsRsp instance using the specified properties.
             * @function create
             * @memberof room.TipsRsp
             * @static
             * @param {room.ITipsRsp=} [properties] Properties to set
             * @returns {room.TipsRsp} TipsRsp instance
             */
            TipsRsp.create = function create(properties) {
                return new TipsRsp(properties);
            };
    
            /**
             * Encodes the specified TipsRsp message. Does not implicitly {@link room.TipsRsp.verify|verify} messages.
             * @function encode
             * @memberof room.TipsRsp
             * @static
             * @param {room.ITipsRsp} message TipsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TipsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.tips != null && message.hasOwnProperty("tips"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.tips);
                return writer;
            };
    
            /**
             * Encodes the specified TipsRsp message, length delimited. Does not implicitly {@link room.TipsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TipsRsp
             * @static
             * @param {room.ITipsRsp} message TipsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TipsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TipsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.TipsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TipsRsp} TipsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TipsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TipsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.tips = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TipsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TipsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TipsRsp} TipsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TipsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TipsRsp message.
             * @function verify
             * @memberof room.TipsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TipsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.tips != null && message.hasOwnProperty("tips"))
                    if (!$util.isString(message.tips))
                        return "tips: string expected";
                return null;
            };
    
            /**
             * Creates a TipsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TipsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TipsRsp} TipsRsp
             */
            TipsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TipsRsp)
                    return object;
                var message = new $root.room.TipsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.TipsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.tips != null)
                    message.tips = String(object.tips);
                return message;
            };
    
            /**
             * Creates a plain object from a TipsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TipsRsp
             * @static
             * @param {room.TipsRsp} message TipsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TipsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.tips = "";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.tips != null && message.hasOwnProperty("tips"))
                    object.tips = message.tips;
                return object;
            };
    
            /**
             * Converts this TipsRsp to JSON.
             * @function toJSON
             * @memberof room.TipsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TipsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TipsRsp;
        })();
    
        room.AgentNotifyTableChange = (function() {
    
            /**
             * Properties of an AgentNotifyTableChange.
             * @memberof room
             * @interface IAgentNotifyTableChange
             * @property {common.IResult|null} [result] AgentNotifyTableChange result
             * @property {number|null} [tableId] AgentNotifyTableChange tableId
             * @property {boolean|null} [started] AgentNotifyTableChange started
             * @property {boolean|null} [destroyed] AgentNotifyTableChange destroyed
             * @property {Array.<room.IPlayer>|null} [enterPlayers] AgentNotifyTableChange enterPlayers
             * @property {Array.<number>|null} [leavePlayerIds] AgentNotifyTableChange leavePlayerIds
             */
    
            /**
             * Constructs a new AgentNotifyTableChange.
             * @memberof room
             * @classdesc Represents an AgentNotifyTableChange.
             * @implements IAgentNotifyTableChange
             * @constructor
             * @param {room.IAgentNotifyTableChange=} [properties] Properties to set
             */
            function AgentNotifyTableChange(properties) {
                this.enterPlayers = [];
                this.leavePlayerIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AgentNotifyTableChange result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.result = null;
    
            /**
             * AgentNotifyTableChange tableId.
             * @member {number} tableId
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.tableId = 0;
    
            /**
             * AgentNotifyTableChange started.
             * @member {boolean} started
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.started = false;
    
            /**
             * AgentNotifyTableChange destroyed.
             * @member {boolean} destroyed
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.destroyed = false;
    
            /**
             * AgentNotifyTableChange enterPlayers.
             * @member {Array.<room.IPlayer>} enterPlayers
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.enterPlayers = $util.emptyArray;
    
            /**
             * AgentNotifyTableChange leavePlayerIds.
             * @member {Array.<number>} leavePlayerIds
             * @memberof room.AgentNotifyTableChange
             * @instance
             */
            AgentNotifyTableChange.prototype.leavePlayerIds = $util.emptyArray;
    
            /**
             * Creates a new AgentNotifyTableChange instance using the specified properties.
             * @function create
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {room.IAgentNotifyTableChange=} [properties] Properties to set
             * @returns {room.AgentNotifyTableChange} AgentNotifyTableChange instance
             */
            AgentNotifyTableChange.create = function create(properties) {
                return new AgentNotifyTableChange(properties);
            };
    
            /**
             * Encodes the specified AgentNotifyTableChange message. Does not implicitly {@link room.AgentNotifyTableChange.verify|verify} messages.
             * @function encode
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {room.IAgentNotifyTableChange} message AgentNotifyTableChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentNotifyTableChange.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableId);
                if (message.started != null && message.hasOwnProperty("started"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.started);
                if (message.destroyed != null && message.hasOwnProperty("destroyed"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.destroyed);
                if (message.enterPlayers != null && message.enterPlayers.length)
                    for (var i = 0; i < message.enterPlayers.length; ++i)
                        $root.room.Player.encode(message.enterPlayers[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.leavePlayerIds != null && message.leavePlayerIds.length)
                    for (var i = 0; i < message.leavePlayerIds.length; ++i)
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.leavePlayerIds[i]);
                return writer;
            };
    
            /**
             * Encodes the specified AgentNotifyTableChange message, length delimited. Does not implicitly {@link room.AgentNotifyTableChange.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {room.IAgentNotifyTableChange} message AgentNotifyTableChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AgentNotifyTableChange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AgentNotifyTableChange message from the specified reader or buffer.
             * @function decode
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.AgentNotifyTableChange} AgentNotifyTableChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentNotifyTableChange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.AgentNotifyTableChange();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.tableId = reader.uint32();
                        break;
                    case 3:
                        message.started = reader.bool();
                        break;
                    case 4:
                        message.destroyed = reader.bool();
                        break;
                    case 5:
                        if (!(message.enterPlayers && message.enterPlayers.length))
                            message.enterPlayers = [];
                        message.enterPlayers.push($root.room.Player.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.leavePlayerIds && message.leavePlayerIds.length))
                            message.leavePlayerIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.leavePlayerIds.push(reader.uint32());
                        } else
                            message.leavePlayerIds.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AgentNotifyTableChange message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.AgentNotifyTableChange} AgentNotifyTableChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AgentNotifyTableChange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AgentNotifyTableChange message.
             * @function verify
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AgentNotifyTableChange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                if (message.started != null && message.hasOwnProperty("started"))
                    if (typeof message.started !== "boolean")
                        return "started: boolean expected";
                if (message.destroyed != null && message.hasOwnProperty("destroyed"))
                    if (typeof message.destroyed !== "boolean")
                        return "destroyed: boolean expected";
                if (message.enterPlayers != null && message.hasOwnProperty("enterPlayers")) {
                    if (!Array.isArray(message.enterPlayers))
                        return "enterPlayers: array expected";
                    for (var i = 0; i < message.enterPlayers.length; ++i) {
                        var error = $root.room.Player.verify(message.enterPlayers[i]);
                        if (error)
                            return "enterPlayers." + error;
                    }
                }
                if (message.leavePlayerIds != null && message.hasOwnProperty("leavePlayerIds")) {
                    if (!Array.isArray(message.leavePlayerIds))
                        return "leavePlayerIds: array expected";
                    for (var i = 0; i < message.leavePlayerIds.length; ++i)
                        if (!$util.isInteger(message.leavePlayerIds[i]))
                            return "leavePlayerIds: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates an AgentNotifyTableChange message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.AgentNotifyTableChange} AgentNotifyTableChange
             */
            AgentNotifyTableChange.fromObject = function fromObject(object) {
                if (object instanceof $root.room.AgentNotifyTableChange)
                    return object;
                var message = new $root.room.AgentNotifyTableChange();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.AgentNotifyTableChange.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.tableId != null)
                    message.tableId = object.tableId >>> 0;
                if (object.started != null)
                    message.started = Boolean(object.started);
                if (object.destroyed != null)
                    message.destroyed = Boolean(object.destroyed);
                if (object.enterPlayers) {
                    if (!Array.isArray(object.enterPlayers))
                        throw TypeError(".room.AgentNotifyTableChange.enterPlayers: array expected");
                    message.enterPlayers = [];
                    for (var i = 0; i < object.enterPlayers.length; ++i) {
                        if (typeof object.enterPlayers[i] !== "object")
                            throw TypeError(".room.AgentNotifyTableChange.enterPlayers: object expected");
                        message.enterPlayers[i] = $root.room.Player.fromObject(object.enterPlayers[i]);
                    }
                }
                if (object.leavePlayerIds) {
                    if (!Array.isArray(object.leavePlayerIds))
                        throw TypeError(".room.AgentNotifyTableChange.leavePlayerIds: array expected");
                    message.leavePlayerIds = [];
                    for (var i = 0; i < object.leavePlayerIds.length; ++i)
                        message.leavePlayerIds[i] = object.leavePlayerIds[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AgentNotifyTableChange message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.AgentNotifyTableChange
             * @static
             * @param {room.AgentNotifyTableChange} message AgentNotifyTableChange
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AgentNotifyTableChange.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.enterPlayers = [];
                    object.leavePlayerIds = [];
                }
                if (options.defaults) {
                    object.result = null;
                    object.tableId = 0;
                    object.started = false;
                    object.destroyed = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                if (message.started != null && message.hasOwnProperty("started"))
                    object.started = message.started;
                if (message.destroyed != null && message.hasOwnProperty("destroyed"))
                    object.destroyed = message.destroyed;
                if (message.enterPlayers && message.enterPlayers.length) {
                    object.enterPlayers = [];
                    for (var j = 0; j < message.enterPlayers.length; ++j)
                        object.enterPlayers[j] = $root.room.Player.toObject(message.enterPlayers[j], options);
                }
                if (message.leavePlayerIds && message.leavePlayerIds.length) {
                    object.leavePlayerIds = [];
                    for (var j = 0; j < message.leavePlayerIds.length; ++j)
                        object.leavePlayerIds[j] = message.leavePlayerIds[j];
                }
                return object;
            };
    
            /**
             * Converts this AgentNotifyTableChange to JSON.
             * @function toJSON
             * @memberof room.AgentNotifyTableChange
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AgentNotifyTableChange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AgentNotifyTableChange;
        })();
    
        room.StatsticsReq = (function() {
    
            /**
             * Properties of a StatsticsReq.
             * @memberof room
             * @interface IStatsticsReq
             * @property {common.IRequest|null} [request] StatsticsReq request
             */
    
            /**
             * Constructs a new StatsticsReq.
             * @memberof room
             * @classdesc Represents a StatsticsReq.
             * @implements IStatsticsReq
             * @constructor
             * @param {room.IStatsticsReq=} [properties] Properties to set
             */
            function StatsticsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * StatsticsReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.StatsticsReq
             * @instance
             */
            StatsticsReq.prototype.request = null;
    
            /**
             * Creates a new StatsticsReq instance using the specified properties.
             * @function create
             * @memberof room.StatsticsReq
             * @static
             * @param {room.IStatsticsReq=} [properties] Properties to set
             * @returns {room.StatsticsReq} StatsticsReq instance
             */
            StatsticsReq.create = function create(properties) {
                return new StatsticsReq(properties);
            };
    
            /**
             * Encodes the specified StatsticsReq message. Does not implicitly {@link room.StatsticsReq.verify|verify} messages.
             * @function encode
             * @memberof room.StatsticsReq
             * @static
             * @param {room.IStatsticsReq} message StatsticsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatsticsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified StatsticsReq message, length delimited. Does not implicitly {@link room.StatsticsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.StatsticsReq
             * @static
             * @param {room.IStatsticsReq} message StatsticsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatsticsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a StatsticsReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.StatsticsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.StatsticsReq} StatsticsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatsticsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.StatsticsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a StatsticsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.StatsticsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.StatsticsReq} StatsticsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatsticsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a StatsticsReq message.
             * @function verify
             * @memberof room.StatsticsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StatsticsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a StatsticsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.StatsticsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.StatsticsReq} StatsticsReq
             */
            StatsticsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.StatsticsReq)
                    return object;
                var message = new $root.room.StatsticsReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.StatsticsReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a StatsticsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.StatsticsReq
             * @static
             * @param {room.StatsticsReq} message StatsticsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StatsticsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this StatsticsReq to JSON.
             * @function toJSON
             * @memberof room.StatsticsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StatsticsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return StatsticsReq;
        })();
    
        room.StatsticsRsp = (function() {
    
            /**
             * Properties of a StatsticsRsp.
             * @memberof room
             * @interface IStatsticsRsp
             * @property {common.IResult|null} [result] StatsticsRsp result
             * @property {number|null} [uid] StatsticsRsp uid
             * @property {number|null} [winTimes] StatsticsRsp winTimes
             */
    
            /**
             * Constructs a new StatsticsRsp.
             * @memberof room
             * @classdesc Represents a StatsticsRsp.
             * @implements IStatsticsRsp
             * @constructor
             * @param {room.IStatsticsRsp=} [properties] Properties to set
             */
            function StatsticsRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * StatsticsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.StatsticsRsp
             * @instance
             */
            StatsticsRsp.prototype.result = null;
    
            /**
             * StatsticsRsp uid.
             * @member {number} uid
             * @memberof room.StatsticsRsp
             * @instance
             */
            StatsticsRsp.prototype.uid = 0;
    
            /**
             * StatsticsRsp winTimes.
             * @member {number} winTimes
             * @memberof room.StatsticsRsp
             * @instance
             */
            StatsticsRsp.prototype.winTimes = 0;
    
            /**
             * Creates a new StatsticsRsp instance using the specified properties.
             * @function create
             * @memberof room.StatsticsRsp
             * @static
             * @param {room.IStatsticsRsp=} [properties] Properties to set
             * @returns {room.StatsticsRsp} StatsticsRsp instance
             */
            StatsticsRsp.create = function create(properties) {
                return new StatsticsRsp(properties);
            };
    
            /**
             * Encodes the specified StatsticsRsp message. Does not implicitly {@link room.StatsticsRsp.verify|verify} messages.
             * @function encode
             * @memberof room.StatsticsRsp
             * @static
             * @param {room.IStatsticsRsp} message StatsticsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatsticsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.winTimes);
                return writer;
            };
    
            /**
             * Encodes the specified StatsticsRsp message, length delimited. Does not implicitly {@link room.StatsticsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.StatsticsRsp
             * @static
             * @param {room.IStatsticsRsp} message StatsticsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatsticsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a StatsticsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.StatsticsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.StatsticsRsp} StatsticsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatsticsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.StatsticsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 7:
                        message.winTimes = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a StatsticsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.StatsticsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.StatsticsRsp} StatsticsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatsticsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a StatsticsRsp message.
             * @function verify
             * @memberof room.StatsticsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StatsticsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    if (!$util.isInteger(message.winTimes))
                        return "winTimes: integer expected";
                return null;
            };
    
            /**
             * Creates a StatsticsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.StatsticsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.StatsticsRsp} StatsticsRsp
             */
            StatsticsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.StatsticsRsp)
                    return object;
                var message = new $root.room.StatsticsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.StatsticsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.winTimes != null)
                    message.winTimes = object.winTimes >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a StatsticsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.StatsticsRsp
             * @static
             * @param {room.StatsticsRsp} message StatsticsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StatsticsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.winTimes = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.winTimes != null && message.hasOwnProperty("winTimes"))
                    object.winTimes = message.winTimes;
                return object;
            };
    
            /**
             * Converts this StatsticsRsp to JSON.
             * @function toJSON
             * @memberof room.StatsticsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StatsticsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return StatsticsRsp;
        })();
    
        room.HuResult = (function() {
    
            /**
             * Properties of a HuResult.
             * @memberof room
             * @interface IHuResult
             * @property {number|null} [hucard] HuResult hucard
             * @property {number|null} [points] HuResult points
             * @property {number|null} [count] HuResult count
             */
    
            /**
             * Constructs a new HuResult.
             * @memberof room
             * @classdesc Represents a HuResult.
             * @implements IHuResult
             * @constructor
             * @param {room.IHuResult=} [properties] Properties to set
             */
            function HuResult(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HuResult hucard.
             * @member {number} hucard
             * @memberof room.HuResult
             * @instance
             */
            HuResult.prototype.hucard = 0;
    
            /**
             * HuResult points.
             * @member {number} points
             * @memberof room.HuResult
             * @instance
             */
            HuResult.prototype.points = 0;
    
            /**
             * HuResult count.
             * @member {number} count
             * @memberof room.HuResult
             * @instance
             */
            HuResult.prototype.count = 0;
    
            /**
             * Creates a new HuResult instance using the specified properties.
             * @function create
             * @memberof room.HuResult
             * @static
             * @param {room.IHuResult=} [properties] Properties to set
             * @returns {room.HuResult} HuResult instance
             */
            HuResult.create = function create(properties) {
                return new HuResult(properties);
            };
    
            /**
             * Encodes the specified HuResult message. Does not implicitly {@link room.HuResult.verify|verify} messages.
             * @function encode
             * @memberof room.HuResult
             * @static
             * @param {room.IHuResult} message HuResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HuResult.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hucard != null && message.hasOwnProperty("hucard"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hucard);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.points);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
                return writer;
            };
    
            /**
             * Encodes the specified HuResult message, length delimited. Does not implicitly {@link room.HuResult.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.HuResult
             * @static
             * @param {room.IHuResult} message HuResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HuResult.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HuResult message from the specified reader or buffer.
             * @function decode
             * @memberof room.HuResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.HuResult} HuResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HuResult.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.HuResult();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hucard = reader.int32();
                        break;
                    case 2:
                        message.points = reader.int32();
                        break;
                    case 3:
                        message.count = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HuResult message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.HuResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.HuResult} HuResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HuResult.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HuResult message.
             * @function verify
             * @memberof room.HuResult
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HuResult.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hucard != null && message.hasOwnProperty("hucard"))
                    if (!$util.isInteger(message.hucard))
                        return "hucard: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };
    
            /**
             * Creates a HuResult message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.HuResult
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.HuResult} HuResult
             */
            HuResult.fromObject = function fromObject(object) {
                if (object instanceof $root.room.HuResult)
                    return object;
                var message = new $root.room.HuResult();
                if (object.hucard != null)
                    message.hucard = object.hucard | 0;
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.count != null)
                    message.count = object.count | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a HuResult message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.HuResult
             * @static
             * @param {room.HuResult} message HuResult
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HuResult.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.hucard = 0;
                    object.points = 0;
                    object.count = 0;
                }
                if (message.hucard != null && message.hasOwnProperty("hucard"))
                    object.hucard = message.hucard;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };
    
            /**
             * Converts this HuResult to JSON.
             * @function toJSON
             * @memberof room.HuResult
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HuResult.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HuResult;
        })();
    
        room.TingResult = (function() {
    
            /**
             * Properties of a TingResult.
             * @memberof room
             * @interface ITingResult
             * @property {number|null} [outcard] TingResult outcard
             * @property {Array.<room.IHuResult>|null} [huinfos] TingResult huinfos
             */
    
            /**
             * Constructs a new TingResult.
             * @memberof room
             * @classdesc Represents a TingResult.
             * @implements ITingResult
             * @constructor
             * @param {room.ITingResult=} [properties] Properties to set
             */
            function TingResult(properties) {
                this.huinfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TingResult outcard.
             * @member {number} outcard
             * @memberof room.TingResult
             * @instance
             */
            TingResult.prototype.outcard = 0;
    
            /**
             * TingResult huinfos.
             * @member {Array.<room.IHuResult>} huinfos
             * @memberof room.TingResult
             * @instance
             */
            TingResult.prototype.huinfos = $util.emptyArray;
    
            /**
             * Creates a new TingResult instance using the specified properties.
             * @function create
             * @memberof room.TingResult
             * @static
             * @param {room.ITingResult=} [properties] Properties to set
             * @returns {room.TingResult} TingResult instance
             */
            TingResult.create = function create(properties) {
                return new TingResult(properties);
            };
    
            /**
             * Encodes the specified TingResult message. Does not implicitly {@link room.TingResult.verify|verify} messages.
             * @function encode
             * @memberof room.TingResult
             * @static
             * @param {room.ITingResult} message TingResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TingResult.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.outcard != null && message.hasOwnProperty("outcard"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.outcard);
                if (message.huinfos != null && message.huinfos.length)
                    for (var i = 0; i < message.huinfos.length; ++i)
                        $root.room.HuResult.encode(message.huinfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TingResult message, length delimited. Does not implicitly {@link room.TingResult.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TingResult
             * @static
             * @param {room.ITingResult} message TingResult message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TingResult.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TingResult message from the specified reader or buffer.
             * @function decode
             * @memberof room.TingResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TingResult} TingResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TingResult.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TingResult();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.outcard = reader.int32();
                        break;
                    case 3:
                        if (!(message.huinfos && message.huinfos.length))
                            message.huinfos = [];
                        message.huinfos.push($root.room.HuResult.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TingResult message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TingResult
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TingResult} TingResult
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TingResult.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TingResult message.
             * @function verify
             * @memberof room.TingResult
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TingResult.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.outcard != null && message.hasOwnProperty("outcard"))
                    if (!$util.isInteger(message.outcard))
                        return "outcard: integer expected";
                if (message.huinfos != null && message.hasOwnProperty("huinfos")) {
                    if (!Array.isArray(message.huinfos))
                        return "huinfos: array expected";
                    for (var i = 0; i < message.huinfos.length; ++i) {
                        var error = $root.room.HuResult.verify(message.huinfos[i]);
                        if (error)
                            return "huinfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a TingResult message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TingResult
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TingResult} TingResult
             */
            TingResult.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TingResult)
                    return object;
                var message = new $root.room.TingResult();
                if (object.outcard != null)
                    message.outcard = object.outcard | 0;
                if (object.huinfos) {
                    if (!Array.isArray(object.huinfos))
                        throw TypeError(".room.TingResult.huinfos: array expected");
                    message.huinfos = [];
                    for (var i = 0; i < object.huinfos.length; ++i) {
                        if (typeof object.huinfos[i] !== "object")
                            throw TypeError(".room.TingResult.huinfos: object expected");
                        message.huinfos[i] = $root.room.HuResult.fromObject(object.huinfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TingResult message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TingResult
             * @static
             * @param {room.TingResult} message TingResult
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TingResult.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.huinfos = [];
                if (options.defaults)
                    object.outcard = 0;
                if (message.outcard != null && message.hasOwnProperty("outcard"))
                    object.outcard = message.outcard;
                if (message.huinfos && message.huinfos.length) {
                    object.huinfos = [];
                    for (var j = 0; j < message.huinfos.length; ++j)
                        object.huinfos[j] = $root.room.HuResult.toObject(message.huinfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this TingResult to JSON.
             * @function toJSON
             * @memberof room.TingResult
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TingResult.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TingResult;
        })();
    
        room.TingInfoRsp = (function() {
    
            /**
             * Properties of a TingInfoRsp.
             * @memberof room
             * @interface ITingInfoRsp
             * @property {common.IResult|null} [result] TingInfoRsp result
             * @property {Array.<room.ITingResult>|null} [tinginfos] TingInfoRsp tinginfos
             */
    
            /**
             * Constructs a new TingInfoRsp.
             * @memberof room
             * @classdesc Represents a TingInfoRsp.
             * @implements ITingInfoRsp
             * @constructor
             * @param {room.ITingInfoRsp=} [properties] Properties to set
             */
            function TingInfoRsp(properties) {
                this.tinginfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TingInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.TingInfoRsp
             * @instance
             */
            TingInfoRsp.prototype.result = null;
    
            /**
             * TingInfoRsp tinginfos.
             * @member {Array.<room.ITingResult>} tinginfos
             * @memberof room.TingInfoRsp
             * @instance
             */
            TingInfoRsp.prototype.tinginfos = $util.emptyArray;
    
            /**
             * Creates a new TingInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.TingInfoRsp
             * @static
             * @param {room.ITingInfoRsp=} [properties] Properties to set
             * @returns {room.TingInfoRsp} TingInfoRsp instance
             */
            TingInfoRsp.create = function create(properties) {
                return new TingInfoRsp(properties);
            };
    
            /**
             * Encodes the specified TingInfoRsp message. Does not implicitly {@link room.TingInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.TingInfoRsp
             * @static
             * @param {room.ITingInfoRsp} message TingInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TingInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.tinginfos != null && message.tinginfos.length)
                    for (var i = 0; i < message.tinginfos.length; ++i)
                        $root.room.TingResult.encode(message.tinginfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TingInfoRsp message, length delimited. Does not implicitly {@link room.TingInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TingInfoRsp
             * @static
             * @param {room.ITingInfoRsp} message TingInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TingInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TingInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.TingInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TingInfoRsp} TingInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TingInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TingInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.tinginfos && message.tinginfos.length))
                            message.tinginfos = [];
                        message.tinginfos.push($root.room.TingResult.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TingInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TingInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TingInfoRsp} TingInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TingInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TingInfoRsp message.
             * @function verify
             * @memberof room.TingInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TingInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.tinginfos != null && message.hasOwnProperty("tinginfos")) {
                    if (!Array.isArray(message.tinginfos))
                        return "tinginfos: array expected";
                    for (var i = 0; i < message.tinginfos.length; ++i) {
                        var error = $root.room.TingResult.verify(message.tinginfos[i]);
                        if (error)
                            return "tinginfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a TingInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TingInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TingInfoRsp} TingInfoRsp
             */
            TingInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TingInfoRsp)
                    return object;
                var message = new $root.room.TingInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.TingInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.tinginfos) {
                    if (!Array.isArray(object.tinginfos))
                        throw TypeError(".room.TingInfoRsp.tinginfos: array expected");
                    message.tinginfos = [];
                    for (var i = 0; i < object.tinginfos.length; ++i) {
                        if (typeof object.tinginfos[i] !== "object")
                            throw TypeError(".room.TingInfoRsp.tinginfos: object expected");
                        message.tinginfos[i] = $root.room.TingResult.fromObject(object.tinginfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TingInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TingInfoRsp
             * @static
             * @param {room.TingInfoRsp} message TingInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TingInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.tinginfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.tinginfos && message.tinginfos.length) {
                    object.tinginfos = [];
                    for (var j = 0; j < message.tinginfos.length; ++j)
                        object.tinginfos[j] = $root.room.TingResult.toObject(message.tinginfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this TingInfoRsp to JSON.
             * @function toJSON
             * @memberof room.TingInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TingInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TingInfoRsp;
        })();
    
        room.JiaoInfoReq = (function() {
    
            /**
             * Properties of a JiaoInfoReq.
             * @memberof room
             * @interface IJiaoInfoReq
             * @property {common.IRequest|null} [request] JiaoInfoReq request
             */
    
            /**
             * Constructs a new JiaoInfoReq.
             * @memberof room
             * @classdesc Represents a JiaoInfoReq.
             * @implements IJiaoInfoReq
             * @constructor
             * @param {room.IJiaoInfoReq=} [properties] Properties to set
             */
            function JiaoInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoInfoReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof room.JiaoInfoReq
             * @instance
             */
            JiaoInfoReq.prototype.request = null;
    
            /**
             * Creates a new JiaoInfoReq instance using the specified properties.
             * @function create
             * @memberof room.JiaoInfoReq
             * @static
             * @param {room.IJiaoInfoReq=} [properties] Properties to set
             * @returns {room.JiaoInfoReq} JiaoInfoReq instance
             */
            JiaoInfoReq.create = function create(properties) {
                return new JiaoInfoReq(properties);
            };
    
            /**
             * Encodes the specified JiaoInfoReq message. Does not implicitly {@link room.JiaoInfoReq.verify|verify} messages.
             * @function encode
             * @memberof room.JiaoInfoReq
             * @static
             * @param {room.IJiaoInfoReq} message JiaoInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified JiaoInfoReq message, length delimited. Does not implicitly {@link room.JiaoInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.JiaoInfoReq
             * @static
             * @param {room.IJiaoInfoReq} message JiaoInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof room.JiaoInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.JiaoInfoReq} JiaoInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.JiaoInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.JiaoInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.JiaoInfoReq} JiaoInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoInfoReq message.
             * @function verify
             * @memberof room.JiaoInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a JiaoInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.JiaoInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.JiaoInfoReq} JiaoInfoReq
             */
            JiaoInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.room.JiaoInfoReq)
                    return object;
                var message = new $root.room.JiaoInfoReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".room.JiaoInfoReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.JiaoInfoReq
             * @static
             * @param {room.JiaoInfoReq} message JiaoInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this JiaoInfoReq to JSON.
             * @function toJSON
             * @memberof room.JiaoInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoInfoReq;
        })();
    
        room.JiaoInfoRsp = (function() {
    
            /**
             * Properties of a JiaoInfoRsp.
             * @memberof room
             * @interface IJiaoInfoRsp
             * @property {common.IResult|null} [result] JiaoInfoRsp result
             * @property {boolean|null} [isWin] JiaoInfoRsp isWin
             * @property {Array.<room.IHuResult>|null} [huinfos] JiaoInfoRsp huinfos
             */
    
            /**
             * Constructs a new JiaoInfoRsp.
             * @memberof room
             * @classdesc Represents a JiaoInfoRsp.
             * @implements IJiaoInfoRsp
             * @constructor
             * @param {room.IJiaoInfoRsp=} [properties] Properties to set
             */
            function JiaoInfoRsp(properties) {
                this.huinfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.JiaoInfoRsp
             * @instance
             */
            JiaoInfoRsp.prototype.result = null;
    
            /**
             * JiaoInfoRsp isWin.
             * @member {boolean} isWin
             * @memberof room.JiaoInfoRsp
             * @instance
             */
            JiaoInfoRsp.prototype.isWin = false;
    
            /**
             * JiaoInfoRsp huinfos.
             * @member {Array.<room.IHuResult>} huinfos
             * @memberof room.JiaoInfoRsp
             * @instance
             */
            JiaoInfoRsp.prototype.huinfos = $util.emptyArray;
    
            /**
             * Creates a new JiaoInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {room.IJiaoInfoRsp=} [properties] Properties to set
             * @returns {room.JiaoInfoRsp} JiaoInfoRsp instance
             */
            JiaoInfoRsp.create = function create(properties) {
                return new JiaoInfoRsp(properties);
            };
    
            /**
             * Encodes the specified JiaoInfoRsp message. Does not implicitly {@link room.JiaoInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {room.IJiaoInfoRsp} message JiaoInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.isWin != null && message.hasOwnProperty("isWin"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isWin);
                if (message.huinfos != null && message.huinfos.length)
                    for (var i = 0; i < message.huinfos.length; ++i)
                        $root.room.HuResult.encode(message.huinfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified JiaoInfoRsp message, length delimited. Does not implicitly {@link room.JiaoInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {room.IJiaoInfoRsp} message JiaoInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.JiaoInfoRsp} JiaoInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.JiaoInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.isWin = reader.bool();
                        break;
                    case 3:
                        if (!(message.huinfos && message.huinfos.length))
                            message.huinfos = [];
                        message.huinfos.push($root.room.HuResult.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.JiaoInfoRsp} JiaoInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoInfoRsp message.
             * @function verify
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.isWin != null && message.hasOwnProperty("isWin"))
                    if (typeof message.isWin !== "boolean")
                        return "isWin: boolean expected";
                if (message.huinfos != null && message.hasOwnProperty("huinfos")) {
                    if (!Array.isArray(message.huinfos))
                        return "huinfos: array expected";
                    for (var i = 0; i < message.huinfos.length; ++i) {
                        var error = $root.room.HuResult.verify(message.huinfos[i]);
                        if (error)
                            return "huinfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a JiaoInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.JiaoInfoRsp} JiaoInfoRsp
             */
            JiaoInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.JiaoInfoRsp)
                    return object;
                var message = new $root.room.JiaoInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.JiaoInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.isWin != null)
                    message.isWin = Boolean(object.isWin);
                if (object.huinfos) {
                    if (!Array.isArray(object.huinfos))
                        throw TypeError(".room.JiaoInfoRsp.huinfos: array expected");
                    message.huinfos = [];
                    for (var i = 0; i < object.huinfos.length; ++i) {
                        if (typeof object.huinfos[i] !== "object")
                            throw TypeError(".room.JiaoInfoRsp.huinfos: object expected");
                        message.huinfos[i] = $root.room.HuResult.fromObject(object.huinfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.JiaoInfoRsp
             * @static
             * @param {room.JiaoInfoRsp} message JiaoInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.huinfos = [];
                if (options.defaults) {
                    object.result = null;
                    object.isWin = false;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.isWin != null && message.hasOwnProperty("isWin"))
                    object.isWin = message.isWin;
                if (message.huinfos && message.huinfos.length) {
                    object.huinfos = [];
                    for (var j = 0; j < message.huinfos.length; ++j)
                        object.huinfos[j] = $root.room.HuResult.toObject(message.huinfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this JiaoInfoRsp to JSON.
             * @function toJSON
             * @memberof room.JiaoInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoInfoRsp;
        })();
    
        room.TableClubInfoRsp = (function() {
    
            /**
             * Properties of a TableClubInfoRsp.
             * @memberof room
             * @interface ITableClubInfoRsp
             * @property {common.IResult|null} [result] TableClubInfoRsp result
             * @property {number|null} [clubId] TableClubInfoRsp clubId
             * @property {number|null} [tableId] TableClubInfoRsp tableId
             */
    
            /**
             * Constructs a new TableClubInfoRsp.
             * @memberof room
             * @classdesc Represents a TableClubInfoRsp.
             * @implements ITableClubInfoRsp
             * @constructor
             * @param {room.ITableClubInfoRsp=} [properties] Properties to set
             */
            function TableClubInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TableClubInfoRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof room.TableClubInfoRsp
             * @instance
             */
            TableClubInfoRsp.prototype.result = null;
    
            /**
             * TableClubInfoRsp clubId.
             * @member {number} clubId
             * @memberof room.TableClubInfoRsp
             * @instance
             */
            TableClubInfoRsp.prototype.clubId = 0;
    
            /**
             * TableClubInfoRsp tableId.
             * @member {number} tableId
             * @memberof room.TableClubInfoRsp
             * @instance
             */
            TableClubInfoRsp.prototype.tableId = 0;
    
            /**
             * Creates a new TableClubInfoRsp instance using the specified properties.
             * @function create
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {room.ITableClubInfoRsp=} [properties] Properties to set
             * @returns {room.TableClubInfoRsp} TableClubInfoRsp instance
             */
            TableClubInfoRsp.create = function create(properties) {
                return new TableClubInfoRsp(properties);
            };
    
            /**
             * Encodes the specified TableClubInfoRsp message. Does not implicitly {@link room.TableClubInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {room.ITableClubInfoRsp} message TableClubInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TableClubInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clubId);
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tableId);
                return writer;
            };
    
            /**
             * Encodes the specified TableClubInfoRsp message, length delimited. Does not implicitly {@link room.TableClubInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {room.ITableClubInfoRsp} message TableClubInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TableClubInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TableClubInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {room.TableClubInfoRsp} TableClubInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TableClubInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.room.TableClubInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clubId = reader.int32();
                        break;
                    case 3:
                        message.tableId = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TableClubInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {room.TableClubInfoRsp} TableClubInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TableClubInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TableClubInfoRsp message.
             * @function verify
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TableClubInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    if (!$util.isInteger(message.clubId))
                        return "clubId: integer expected";
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    if (!$util.isInteger(message.tableId))
                        return "tableId: integer expected";
                return null;
            };
    
            /**
             * Creates a TableClubInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {room.TableClubInfoRsp} TableClubInfoRsp
             */
            TableClubInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.room.TableClubInfoRsp)
                    return object;
                var message = new $root.room.TableClubInfoRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".room.TableClubInfoRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.clubId != null)
                    message.clubId = object.clubId | 0;
                if (object.tableId != null)
                    message.tableId = object.tableId | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TableClubInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof room.TableClubInfoRsp
             * @static
             * @param {room.TableClubInfoRsp} message TableClubInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TableClubInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.clubId = 0;
                    object.tableId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.clubId != null && message.hasOwnProperty("clubId"))
                    object.clubId = message.clubId;
                if (message.tableId != null && message.hasOwnProperty("tableId"))
                    object.tableId = message.tableId;
                return object;
            };
    
            /**
             * Converts this TableClubInfoRsp to JSON.
             * @function toJSON
             * @memberof room.TableClubInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TableClubInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TableClubInfoRsp;
        })();
    
        return room;
    })();
    
    $root.scqp_eg = (function() {
    
        /**
         * Namespace scqp_eg.
         * @exports scqp_eg
         * @namespace
         */
        var scqp_eg = {};
    
        scqp_eg.GameInfo = (function() {
    
            /**
             * Properties of a GameInfo.
             * @memberof scqp_eg
             * @interface IGameInfo
             * @property {number|null} [ante] GameInfo ante
             * @property {number|null} [bomb] GameInfo bomb
             * @property {room.IBuildInfo|null} [buildInfo] GameInfo buildInfo
             * @property {boolean|null} [AA] GameInfo AA
             * @property {number|null} [code] GameInfo code
             * @property {number|null} [cardCount] GameInfo cardCount
             */
    
            /**
             * Constructs a new GameInfo.
             * @memberof scqp_eg
             * @classdesc Represents a GameInfo.
             * @implements IGameInfo
             * @constructor
             * @param {scqp_eg.IGameInfo=} [properties] Properties to set
             */
            function GameInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameInfo ante.
             * @member {number} ante
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.ante = 0;
    
            /**
             * GameInfo bomb.
             * @member {number} bomb
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.bomb = 0;
    
            /**
             * GameInfo buildInfo.
             * @member {room.IBuildInfo|null|undefined} buildInfo
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.buildInfo = null;
    
            /**
             * GameInfo AA.
             * @member {boolean} AA
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.AA = false;
    
            /**
             * GameInfo code.
             * @member {number} code
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.code = 0;
    
            /**
             * GameInfo cardCount.
             * @member {number} cardCount
             * @memberof scqp_eg.GameInfo
             * @instance
             */
            GameInfo.prototype.cardCount = 0;
    
            /**
             * Creates a new GameInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {scqp_eg.IGameInfo=} [properties] Properties to set
             * @returns {scqp_eg.GameInfo} GameInfo instance
             */
            GameInfo.create = function create(properties) {
                return new GameInfo(properties);
            };
    
            /**
             * Encodes the specified GameInfo message. Does not implicitly {@link scqp_eg.GameInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {scqp_eg.IGameInfo} message GameInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ante != null && message.hasOwnProperty("ante"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ante);
                if (message.bomb != null && message.hasOwnProperty("bomb"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.bomb);
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    $root.room.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.AA != null && message.hasOwnProperty("AA"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.AA);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.code);
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.cardCount);
                return writer;
            };
    
            /**
             * Encodes the specified GameInfo message, length delimited. Does not implicitly {@link scqp_eg.GameInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {scqp_eg.IGameInfo} message GameInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GameInfo} GameInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GameInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ante = reader.uint32();
                        break;
                    case 2:
                        message.bomb = reader.uint32();
                        break;
                    case 3:
                        message.buildInfo = $root.room.BuildInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.AA = reader.bool();
                        break;
                    case 5:
                        message.code = reader.uint32();
                        break;
                    case 6:
                        message.cardCount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GameInfo} GameInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameInfo message.
             * @function verify
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ante != null && message.hasOwnProperty("ante"))
                    if (!$util.isInteger(message.ante))
                        return "ante: integer expected";
                if (message.bomb != null && message.hasOwnProperty("bomb"))
                    if (!$util.isInteger(message.bomb))
                        return "bomb: integer expected";
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
                    var error = $root.room.BuildInfo.verify(message.buildInfo);
                    if (error)
                        return "buildInfo." + error;
                }
                if (message.AA != null && message.hasOwnProperty("AA"))
                    if (typeof message.AA !== "boolean")
                        return "AA: boolean expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    if (!$util.isInteger(message.cardCount))
                        return "cardCount: integer expected";
                return null;
            };
    
            /**
             * Creates a GameInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GameInfo} GameInfo
             */
            GameInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GameInfo)
                    return object;
                var message = new $root.scqp_eg.GameInfo();
                if (object.ante != null)
                    message.ante = object.ante >>> 0;
                if (object.bomb != null)
                    message.bomb = object.bomb >>> 0;
                if (object.buildInfo != null) {
                    if (typeof object.buildInfo !== "object")
                        throw TypeError(".scqp_eg.GameInfo.buildInfo: object expected");
                    message.buildInfo = $root.room.BuildInfo.fromObject(object.buildInfo);
                }
                if (object.AA != null)
                    message.AA = Boolean(object.AA);
                if (object.code != null)
                    message.code = object.code >>> 0;
                if (object.cardCount != null)
                    message.cardCount = object.cardCount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a GameInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GameInfo
             * @static
             * @param {scqp_eg.GameInfo} message GameInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ante = 0;
                    object.bomb = 0;
                    object.buildInfo = null;
                    object.AA = false;
                    object.code = 0;
                    object.cardCount = 0;
                }
                if (message.ante != null && message.hasOwnProperty("ante"))
                    object.ante = message.ante;
                if (message.bomb != null && message.hasOwnProperty("bomb"))
                    object.bomb = message.bomb;
                if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
                    object.buildInfo = $root.room.BuildInfo.toObject(message.buildInfo, options);
                if (message.AA != null && message.hasOwnProperty("AA"))
                    object.AA = message.AA;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.cardCount != null && message.hasOwnProperty("cardCount"))
                    object.cardCount = message.cardCount;
                return object;
            };
    
            /**
             * Converts this GameInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.GameInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameInfo;
        })();
    
        scqp_eg.OpCard = (function() {
    
            /**
             * Properties of an OpCard.
             * @memberof scqp_eg
             * @interface IOpCard
             * @property {number|null} [op] OpCard op
             * @property {number|null} [card] OpCard card
             * @property {number|null} [yaojiCount] OpCard yaojiCount
             */
    
            /**
             * Constructs a new OpCard.
             * @memberof scqp_eg
             * @classdesc Represents an OpCard.
             * @implements IOpCard
             * @constructor
             * @param {scqp_eg.IOpCard=} [properties] Properties to set
             */
            function OpCard(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OpCard op.
             * @member {number} op
             * @memberof scqp_eg.OpCard
             * @instance
             */
            OpCard.prototype.op = 0;
    
            /**
             * OpCard card.
             * @member {number} card
             * @memberof scqp_eg.OpCard
             * @instance
             */
            OpCard.prototype.card = 0;
    
            /**
             * OpCard yaojiCount.
             * @member {number} yaojiCount
             * @memberof scqp_eg.OpCard
             * @instance
             */
            OpCard.prototype.yaojiCount = 0;
    
            /**
             * Creates a new OpCard instance using the specified properties.
             * @function create
             * @memberof scqp_eg.OpCard
             * @static
             * @param {scqp_eg.IOpCard=} [properties] Properties to set
             * @returns {scqp_eg.OpCard} OpCard instance
             */
            OpCard.create = function create(properties) {
                return new OpCard(properties);
            };
    
            /**
             * Encodes the specified OpCard message. Does not implicitly {@link scqp_eg.OpCard.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.OpCard
             * @static
             * @param {scqp_eg.IOpCard} message OpCard message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OpCard.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.op != null && message.hasOwnProperty("op"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.op);
                if (message.card != null && message.hasOwnProperty("card"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.card);
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.yaojiCount);
                return writer;
            };
    
            /**
             * Encodes the specified OpCard message, length delimited. Does not implicitly {@link scqp_eg.OpCard.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.OpCard
             * @static
             * @param {scqp_eg.IOpCard} message OpCard message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OpCard.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OpCard message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.OpCard
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.OpCard} OpCard
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OpCard.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.OpCard();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.op = reader.uint32();
                        break;
                    case 2:
                        message.card = reader.uint32();
                        break;
                    case 3:
                        message.yaojiCount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OpCard message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.OpCard
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.OpCard} OpCard
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OpCard.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OpCard message.
             * @function verify
             * @memberof scqp_eg.OpCard
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OpCard.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.op != null && message.hasOwnProperty("op"))
                    if (!$util.isInteger(message.op))
                        return "op: integer expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isInteger(message.card))
                        return "card: integer expected";
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    if (!$util.isInteger(message.yaojiCount))
                        return "yaojiCount: integer expected";
                return null;
            };
    
            /**
             * Creates an OpCard message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.OpCard
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.OpCard} OpCard
             */
            OpCard.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.OpCard)
                    return object;
                var message = new $root.scqp_eg.OpCard();
                if (object.op != null)
                    message.op = object.op >>> 0;
                if (object.card != null)
                    message.card = object.card >>> 0;
                if (object.yaojiCount != null)
                    message.yaojiCount = object.yaojiCount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an OpCard message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.OpCard
             * @static
             * @param {scqp_eg.OpCard} message OpCard
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OpCard.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.op = 0;
                    object.card = 0;
                    object.yaojiCount = 0;
                }
                if (message.op != null && message.hasOwnProperty("op"))
                    object.op = message.op;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    object.yaojiCount = message.yaojiCount;
                return object;
            };
    
            /**
             * Converts this OpCard to JSON.
             * @function toJSON
             * @memberof scqp_eg.OpCard
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OpCard.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OpCard;
        })();
    
        scqp_eg.HuInfo = (function() {
    
            /**
             * Properties of a HuInfo.
             * @memberof scqp_eg
             * @interface IHuInfo
             * @property {number|null} [op] HuInfo op
             * @property {number|null} [card] HuInfo card
             * @property {number|null} [index] HuInfo index
             */
    
            /**
             * Constructs a new HuInfo.
             * @memberof scqp_eg
             * @classdesc Represents a HuInfo.
             * @implements IHuInfo
             * @constructor
             * @param {scqp_eg.IHuInfo=} [properties] Properties to set
             */
            function HuInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HuInfo op.
             * @member {number} op
             * @memberof scqp_eg.HuInfo
             * @instance
             */
            HuInfo.prototype.op = 0;
    
            /**
             * HuInfo card.
             * @member {number} card
             * @memberof scqp_eg.HuInfo
             * @instance
             */
            HuInfo.prototype.card = 0;
    
            /**
             * HuInfo index.
             * @member {number} index
             * @memberof scqp_eg.HuInfo
             * @instance
             */
            HuInfo.prototype.index = 0;
    
            /**
             * Creates a new HuInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {scqp_eg.IHuInfo=} [properties] Properties to set
             * @returns {scqp_eg.HuInfo} HuInfo instance
             */
            HuInfo.create = function create(properties) {
                return new HuInfo(properties);
            };
    
            /**
             * Encodes the specified HuInfo message. Does not implicitly {@link scqp_eg.HuInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {scqp_eg.IHuInfo} message HuInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HuInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.op != null && message.hasOwnProperty("op"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.op);
                if (message.card != null && message.hasOwnProperty("card"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.card);
                if (message.index != null && message.hasOwnProperty("index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
                return writer;
            };
    
            /**
             * Encodes the specified HuInfo message, length delimited. Does not implicitly {@link scqp_eg.HuInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {scqp_eg.IHuInfo} message HuInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HuInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HuInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.HuInfo} HuInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HuInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.HuInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.op = reader.uint32();
                        break;
                    case 2:
                        message.card = reader.uint32();
                        break;
                    case 3:
                        message.index = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HuInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.HuInfo} HuInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HuInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HuInfo message.
             * @function verify
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HuInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.op != null && message.hasOwnProperty("op"))
                    if (!$util.isInteger(message.op))
                        return "op: integer expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isInteger(message.card))
                        return "card: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                return null;
            };
    
            /**
             * Creates a HuInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.HuInfo} HuInfo
             */
            HuInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.HuInfo)
                    return object;
                var message = new $root.scqp_eg.HuInfo();
                if (object.op != null)
                    message.op = object.op >>> 0;
                if (object.card != null)
                    message.card = object.card >>> 0;
                if (object.index != null)
                    message.index = object.index >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a HuInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.HuInfo
             * @static
             * @param {scqp_eg.HuInfo} message HuInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HuInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.op = 0;
                    object.card = 0;
                    object.index = 0;
                }
                if (message.op != null && message.hasOwnProperty("op"))
                    object.op = message.op;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };
    
            /**
             * Converts this HuInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.HuInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HuInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HuInfo;
        })();
    
        scqp_eg.GamePlayer = (function() {
    
            /**
             * Properties of a GamePlayer.
             * @memberof scqp_eg
             * @interface IGamePlayer
             * @property {room.IPlayer|null} [player] GamePlayer player
             * @property {boolean|null} [play] GamePlayer play
             * @property {boolean|null} [offline] GamePlayer offline
             * @property {boolean|null} [pay] GamePlayer pay
             * @property {boolean|null} [ready] GamePlayer ready
             * @property {number|null} [cardsNum] GamePlayer cardsNum
             * @property {Array.<number>|null} [cards] GamePlayer cards
             * @property {boolean|null} [turn] GamePlayer turn
             * @property {Array.<number>|null} [opcards] GamePlayer opcards
             * @property {scqp_eg.IOperateInfo|null} [opInfo] GamePlayer opInfo
             * @property {number|null} [points] GamePlayer points
             * @property {number|null} [totalPoints] GamePlayer totalPoints
             * @property {number|null} [xiaZhu] GamePlayer xiaZhu
             */
    
            /**
             * Constructs a new GamePlayer.
             * @memberof scqp_eg
             * @classdesc Represents a GamePlayer.
             * @implements IGamePlayer
             * @constructor
             * @param {scqp_eg.IGamePlayer=} [properties] Properties to set
             */
            function GamePlayer(properties) {
                this.cards = [];
                this.opcards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GamePlayer player.
             * @member {room.IPlayer|null|undefined} player
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.player = null;
    
            /**
             * GamePlayer play.
             * @member {boolean} play
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.play = false;
    
            /**
             * GamePlayer offline.
             * @member {boolean} offline
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.offline = false;
    
            /**
             * GamePlayer pay.
             * @member {boolean} pay
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.pay = false;
    
            /**
             * GamePlayer ready.
             * @member {boolean} ready
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.ready = false;
    
            /**
             * GamePlayer cardsNum.
             * @member {number} cardsNum
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.cardsNum = 0;
    
            /**
             * GamePlayer cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.cards = $util.emptyArray;
    
            /**
             * GamePlayer turn.
             * @member {boolean} turn
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.turn = false;
    
            /**
             * GamePlayer opcards.
             * @member {Array.<number>} opcards
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.opcards = $util.emptyArray;
    
            /**
             * GamePlayer opInfo.
             * @member {scqp_eg.IOperateInfo|null|undefined} opInfo
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.opInfo = null;
    
            /**
             * GamePlayer points.
             * @member {number} points
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.points = 0;
    
            /**
             * GamePlayer totalPoints.
             * @member {number} totalPoints
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.totalPoints = 0;
    
            /**
             * GamePlayer xiaZhu.
             * @member {number} xiaZhu
             * @memberof scqp_eg.GamePlayer
             * @instance
             */
            GamePlayer.prototype.xiaZhu = 0;
    
            /**
             * Creates a new GamePlayer instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {scqp_eg.IGamePlayer=} [properties] Properties to set
             * @returns {scqp_eg.GamePlayer} GamePlayer instance
             */
            GamePlayer.create = function create(properties) {
                return new GamePlayer(properties);
            };
    
            /**
             * Encodes the specified GamePlayer message. Does not implicitly {@link scqp_eg.GamePlayer.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {scqp_eg.IGamePlayer} message GamePlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayer.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.player != null && message.hasOwnProperty("player"))
                    $root.room.Player.encode(message.player, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.play != null && message.hasOwnProperty("play"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.play);
                if (message.offline != null && message.hasOwnProperty("offline"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.offline);
                if (message.pay != null && message.hasOwnProperty("pay"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.pay);
                if (message.ready != null && message.hasOwnProperty("ready"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.ready);
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.cardsNum);
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.cards[i]);
                if (message.turn != null && message.hasOwnProperty("turn"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.turn);
                if (message.opcards != null && message.opcards.length)
                    for (var i = 0; i < message.opcards.length; ++i)
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.opcards[i]);
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    $root.scqp_eg.OperateInfo.encode(message.opInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.points);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.totalPoints);
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.xiaZhu);
                return writer;
            };
    
            /**
             * Encodes the specified GamePlayer message, length delimited. Does not implicitly {@link scqp_eg.GamePlayer.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {scqp_eg.IGamePlayer} message GamePlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayer.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GamePlayer message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GamePlayer} GamePlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayer.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GamePlayer();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.player = $root.room.Player.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.play = reader.bool();
                        break;
                    case 3:
                        message.offline = reader.bool();
                        break;
                    case 4:
                        message.pay = reader.bool();
                        break;
                    case 5:
                        message.ready = reader.bool();
                        break;
                    case 6:
                        message.cardsNum = reader.uint32();
                        break;
                    case 7:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 8:
                        message.turn = reader.bool();
                        break;
                    case 9:
                        if (!(message.opcards && message.opcards.length))
                            message.opcards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.opcards.push(reader.uint32());
                        } else
                            message.opcards.push(reader.uint32());
                        break;
                    case 10:
                        message.opInfo = $root.scqp_eg.OperateInfo.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.points = reader.int32();
                        break;
                    case 12:
                        message.totalPoints = reader.int32();
                        break;
                    case 13:
                        message.xiaZhu = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GamePlayer message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GamePlayer} GamePlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayer.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GamePlayer message.
             * @function verify
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GamePlayer.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.player != null && message.hasOwnProperty("player")) {
                    var error = $root.room.Player.verify(message.player);
                    if (error)
                        return "player." + error;
                }
                if (message.play != null && message.hasOwnProperty("play"))
                    if (typeof message.play !== "boolean")
                        return "play: boolean expected";
                if (message.offline != null && message.hasOwnProperty("offline"))
                    if (typeof message.offline !== "boolean")
                        return "offline: boolean expected";
                if (message.pay != null && message.hasOwnProperty("pay"))
                    if (typeof message.pay !== "boolean")
                        return "pay: boolean expected";
                if (message.ready != null && message.hasOwnProperty("ready"))
                    if (typeof message.ready !== "boolean")
                        return "ready: boolean expected";
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    if (!$util.isInteger(message.cardsNum))
                        return "cardsNum: integer expected";
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.turn != null && message.hasOwnProperty("turn"))
                    if (typeof message.turn !== "boolean")
                        return "turn: boolean expected";
                if (message.opcards != null && message.hasOwnProperty("opcards")) {
                    if (!Array.isArray(message.opcards))
                        return "opcards: array expected";
                    for (var i = 0; i < message.opcards.length; ++i)
                        if (!$util.isInteger(message.opcards[i]))
                            return "opcards: integer[] expected";
                }
                if (message.opInfo != null && message.hasOwnProperty("opInfo")) {
                    var error = $root.scqp_eg.OperateInfo.verify(message.opInfo);
                    if (error)
                        return "opInfo." + error;
                }
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    if (!$util.isInteger(message.xiaZhu))
                        return "xiaZhu: integer expected";
                return null;
            };
    
            /**
             * Creates a GamePlayer message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GamePlayer} GamePlayer
             */
            GamePlayer.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GamePlayer)
                    return object;
                var message = new $root.scqp_eg.GamePlayer();
                if (object.player != null) {
                    if (typeof object.player !== "object")
                        throw TypeError(".scqp_eg.GamePlayer.player: object expected");
                    message.player = $root.room.Player.fromObject(object.player);
                }
                if (object.play != null)
                    message.play = Boolean(object.play);
                if (object.offline != null)
                    message.offline = Boolean(object.offline);
                if (object.pay != null)
                    message.pay = Boolean(object.pay);
                if (object.ready != null)
                    message.ready = Boolean(object.ready);
                if (object.cardsNum != null)
                    message.cardsNum = object.cardsNum >>> 0;
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.GamePlayer.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.turn != null)
                    message.turn = Boolean(object.turn);
                if (object.opcards) {
                    if (!Array.isArray(object.opcards))
                        throw TypeError(".scqp_eg.GamePlayer.opcards: array expected");
                    message.opcards = [];
                    for (var i = 0; i < object.opcards.length; ++i)
                        message.opcards[i] = object.opcards[i] >>> 0;
                }
                if (object.opInfo != null) {
                    if (typeof object.opInfo !== "object")
                        throw TypeError(".scqp_eg.GamePlayer.opInfo: object expected");
                    message.opInfo = $root.scqp_eg.OperateInfo.fromObject(object.opInfo);
                }
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                if (object.xiaZhu != null)
                    message.xiaZhu = object.xiaZhu >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a GamePlayer message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GamePlayer
             * @static
             * @param {scqp_eg.GamePlayer} message GamePlayer
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GamePlayer.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.cards = [];
                    object.opcards = [];
                }
                if (options.defaults) {
                    object.player = null;
                    object.play = false;
                    object.offline = false;
                    object.pay = false;
                    object.ready = false;
                    object.cardsNum = 0;
                    object.turn = false;
                    object.opInfo = null;
                    object.points = 0;
                    object.totalPoints = 0;
                    object.xiaZhu = 0;
                }
                if (message.player != null && message.hasOwnProperty("player"))
                    object.player = $root.room.Player.toObject(message.player, options);
                if (message.play != null && message.hasOwnProperty("play"))
                    object.play = message.play;
                if (message.offline != null && message.hasOwnProperty("offline"))
                    object.offline = message.offline;
                if (message.pay != null && message.hasOwnProperty("pay"))
                    object.pay = message.pay;
                if (message.ready != null && message.hasOwnProperty("ready"))
                    object.ready = message.ready;
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    object.cardsNum = message.cardsNum;
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.turn != null && message.hasOwnProperty("turn"))
                    object.turn = message.turn;
                if (message.opcards && message.opcards.length) {
                    object.opcards = [];
                    for (var j = 0; j < message.opcards.length; ++j)
                        object.opcards[j] = message.opcards[j];
                }
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    object.opInfo = $root.scqp_eg.OperateInfo.toObject(message.opInfo, options);
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    object.xiaZhu = message.xiaZhu;
                return object;
            };
    
            /**
             * Converts this GamePlayer to JSON.
             * @function toJSON
             * @memberof scqp_eg.GamePlayer
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GamePlayer.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GamePlayer;
        })();
    
        scqp_eg.GameLoginRsp = (function() {
    
            /**
             * Properties of a GameLoginRsp.
             * @memberof scqp_eg
             * @interface IGameLoginRsp
             * @property {common.IResult|null} [result] GameLoginRsp result
             * @property {scqp_eg.IGameInfo|null} [gameInfo] GameLoginRsp gameInfo
             * @property {Array.<scqp_eg.IGamePlayer>|null} [players] GameLoginRsp players
             * @property {number|null} [state] GameLoginRsp state
             * @property {number|null} [masterId] GameLoginRsp masterId
             * @property {number|null} [clockTime] GameLoginRsp clockTime
             * @property {number|null} [round] GameLoginRsp round
             * @property {number|null} [totalRound] GameLoginRsp totalRound
             * @property {number|null} [leftNum] GameLoginRsp leftNum
             * @property {number|null} [bankerId] GameLoginRsp bankerId
             * @property {number|null} [turn] GameLoginRsp turn
             * @property {number|null} [maxTurn] GameLoginRsp maxTurn
             * @property {number|null} [xiaZhu] GameLoginRsp xiaZhu
             */
    
            /**
             * Constructs a new GameLoginRsp.
             * @memberof scqp_eg
             * @classdesc Represents a GameLoginRsp.
             * @implements IGameLoginRsp
             * @constructor
             * @param {scqp_eg.IGameLoginRsp=} [properties] Properties to set
             */
            function GameLoginRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameLoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.result = null;
    
            /**
             * GameLoginRsp gameInfo.
             * @member {scqp_eg.IGameInfo|null|undefined} gameInfo
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.gameInfo = null;
    
            /**
             * GameLoginRsp players.
             * @member {Array.<scqp_eg.IGamePlayer>} players
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.players = $util.emptyArray;
    
            /**
             * GameLoginRsp state.
             * @member {number} state
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.state = 0;
    
            /**
             * GameLoginRsp masterId.
             * @member {number} masterId
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.masterId = 0;
    
            /**
             * GameLoginRsp clockTime.
             * @member {number} clockTime
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.clockTime = 0;
    
            /**
             * GameLoginRsp round.
             * @member {number} round
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.round = 0;
    
            /**
             * GameLoginRsp totalRound.
             * @member {number} totalRound
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.totalRound = 0;
    
            /**
             * GameLoginRsp leftNum.
             * @member {number} leftNum
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.leftNum = 0;
    
            /**
             * GameLoginRsp bankerId.
             * @member {number} bankerId
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.bankerId = 0;
    
            /**
             * GameLoginRsp turn.
             * @member {number} turn
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.turn = 0;
    
            /**
             * GameLoginRsp maxTurn.
             * @member {number} maxTurn
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.maxTurn = 0;
    
            /**
             * GameLoginRsp xiaZhu.
             * @member {number} xiaZhu
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.xiaZhu = 0;
    
            /**
             * Creates a new GameLoginRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {scqp_eg.IGameLoginRsp=} [properties] Properties to set
             * @returns {scqp_eg.GameLoginRsp} GameLoginRsp instance
             */
            GameLoginRsp.create = function create(properties) {
                return new GameLoginRsp(properties);
            };
    
            /**
             * Encodes the specified GameLoginRsp message. Does not implicitly {@link scqp_eg.GameLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {scqp_eg.IGameLoginRsp} message GameLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
                    $root.scqp_eg.GameInfo.encode(message.gameInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.scqp_eg.GamePlayer.encode(message.players[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.state != null && message.hasOwnProperty("state"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.state);
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.masterId);
                if (message.clockTime != null && message.hasOwnProperty("clockTime"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.clockTime);
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.round);
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.totalRound);
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.leftNum);
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.bankerId);
                if (message.turn != null && message.hasOwnProperty("turn"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.turn);
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.maxTurn);
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.xiaZhu);
                return writer;
            };
    
            /**
             * Encodes the specified GameLoginRsp message, length delimited. Does not implicitly {@link scqp_eg.GameLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {scqp_eg.IGameLoginRsp} message GameLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GameLoginRsp} GameLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GameLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameInfo = $root.scqp_eg.GameInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.scqp_eg.GamePlayer.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.state = reader.uint32();
                        break;
                    case 5:
                        message.masterId = reader.uint32();
                        break;
                    case 6:
                        message.clockTime = reader.uint32();
                        break;
                    case 7:
                        message.round = reader.uint32();
                        break;
                    case 8:
                        message.totalRound = reader.uint32();
                        break;
                    case 9:
                        message.leftNum = reader.uint32();
                        break;
                    case 10:
                        message.bankerId = reader.uint32();
                        break;
                    case 11:
                        message.turn = reader.uint32();
                        break;
                    case 12:
                        message.maxTurn = reader.uint32();
                        break;
                    case 13:
                        message.xiaZhu = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GameLoginRsp} GameLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameLoginRsp message.
             * @function verify
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.gameInfo != null && message.hasOwnProperty("gameInfo")) {
                    var error = $root.scqp_eg.GameInfo.verify(message.gameInfo);
                    if (error)
                        return "gameInfo." + error;
                }
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.scqp_eg.GamePlayer.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    if (!$util.isInteger(message.state))
                        return "state: integer expected";
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    if (!$util.isInteger(message.masterId))
                        return "masterId: integer expected";
                if (message.clockTime != null && message.hasOwnProperty("clockTime"))
                    if (!$util.isInteger(message.clockTime))
                        return "clockTime: integer expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    if (!$util.isInteger(message.totalRound))
                        return "totalRound: integer expected";
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    if (!$util.isInteger(message.leftNum))
                        return "leftNum: integer expected";
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    if (!$util.isInteger(message.bankerId))
                        return "bankerId: integer expected";
                if (message.turn != null && message.hasOwnProperty("turn"))
                    if (!$util.isInteger(message.turn))
                        return "turn: integer expected";
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    if (!$util.isInteger(message.maxTurn))
                        return "maxTurn: integer expected";
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    if (!$util.isInteger(message.xiaZhu))
                        return "xiaZhu: integer expected";
                return null;
            };
    
            /**
             * Creates a GameLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GameLoginRsp} GameLoginRsp
             */
            GameLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GameLoginRsp)
                    return object;
                var message = new $root.scqp_eg.GameLoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.GameLoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.gameInfo != null) {
                    if (typeof object.gameInfo !== "object")
                        throw TypeError(".scqp_eg.GameLoginRsp.gameInfo: object expected");
                    message.gameInfo = $root.scqp_eg.GameInfo.fromObject(object.gameInfo);
                }
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".scqp_eg.GameLoginRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".scqp_eg.GameLoginRsp.players: object expected");
                        message.players[i] = $root.scqp_eg.GamePlayer.fromObject(object.players[i]);
                    }
                }
                if (object.state != null)
                    message.state = object.state >>> 0;
                if (object.masterId != null)
                    message.masterId = object.masterId >>> 0;
                if (object.clockTime != null)
                    message.clockTime = object.clockTime >>> 0;
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.totalRound != null)
                    message.totalRound = object.totalRound >>> 0;
                if (object.leftNum != null)
                    message.leftNum = object.leftNum >>> 0;
                if (object.bankerId != null)
                    message.bankerId = object.bankerId >>> 0;
                if (object.turn != null)
                    message.turn = object.turn >>> 0;
                if (object.maxTurn != null)
                    message.maxTurn = object.maxTurn >>> 0;
                if (object.xiaZhu != null)
                    message.xiaZhu = object.xiaZhu >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a GameLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GameLoginRsp
             * @static
             * @param {scqp_eg.GameLoginRsp} message GameLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults) {
                    object.result = null;
                    object.gameInfo = null;
                    object.state = 0;
                    object.masterId = 0;
                    object.clockTime = 0;
                    object.round = 0;
                    object.totalRound = 0;
                    object.leftNum = 0;
                    object.bankerId = 0;
                    object.turn = 0;
                    object.maxTurn = 0;
                    object.xiaZhu = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
                    object.gameInfo = $root.scqp_eg.GameInfo.toObject(message.gameInfo, options);
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.scqp_eg.GamePlayer.toObject(message.players[j], options);
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = message.state;
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    object.masterId = message.masterId;
                if (message.clockTime != null && message.hasOwnProperty("clockTime"))
                    object.clockTime = message.clockTime;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    object.totalRound = message.totalRound;
                if (message.leftNum != null && message.hasOwnProperty("leftNum"))
                    object.leftNum = message.leftNum;
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    object.bankerId = message.bankerId;
                if (message.turn != null && message.hasOwnProperty("turn"))
                    object.turn = message.turn;
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    object.maxTurn = message.maxTurn;
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    object.xiaZhu = message.xiaZhu;
                return object;
            };
    
            /**
             * Converts this GameLoginRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.GameLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameLoginRsp;
        })();
    
        scqp_eg.GamePlayerLoginRsp = (function() {
    
            /**
             * Properties of a GamePlayerLoginRsp.
             * @memberof scqp_eg
             * @interface IGamePlayerLoginRsp
             * @property {common.IResult|null} [result] GamePlayerLoginRsp result
             * @property {Array.<scqp_eg.IGamePlayer>|null} [players] GamePlayerLoginRsp players
             */
    
            /**
             * Constructs a new GamePlayerLoginRsp.
             * @memberof scqp_eg
             * @classdesc Represents a GamePlayerLoginRsp.
             * @implements IGamePlayerLoginRsp
             * @constructor
             * @param {scqp_eg.IGamePlayerLoginRsp=} [properties] Properties to set
             */
            function GamePlayerLoginRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GamePlayerLoginRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @instance
             */
            GamePlayerLoginRsp.prototype.result = null;
    
            /**
             * GamePlayerLoginRsp players.
             * @member {Array.<scqp_eg.IGamePlayer>} players
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @instance
             */
            GamePlayerLoginRsp.prototype.players = $util.emptyArray;
    
            /**
             * Creates a new GamePlayerLoginRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {scqp_eg.IGamePlayerLoginRsp=} [properties] Properties to set
             * @returns {scqp_eg.GamePlayerLoginRsp} GamePlayerLoginRsp instance
             */
            GamePlayerLoginRsp.create = function create(properties) {
                return new GamePlayerLoginRsp(properties);
            };
    
            /**
             * Encodes the specified GamePlayerLoginRsp message. Does not implicitly {@link scqp_eg.GamePlayerLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {scqp_eg.IGamePlayerLoginRsp} message GamePlayerLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayerLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.scqp_eg.GamePlayer.encode(message.players[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified GamePlayerLoginRsp message, length delimited. Does not implicitly {@link scqp_eg.GamePlayerLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {scqp_eg.IGamePlayerLoginRsp} message GamePlayerLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayerLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GamePlayerLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GamePlayerLoginRsp} GamePlayerLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayerLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GamePlayerLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.scqp_eg.GamePlayer.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GamePlayerLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GamePlayerLoginRsp} GamePlayerLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayerLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GamePlayerLoginRsp message.
             * @function verify
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GamePlayerLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.scqp_eg.GamePlayer.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a GamePlayerLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GamePlayerLoginRsp} GamePlayerLoginRsp
             */
            GamePlayerLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GamePlayerLoginRsp)
                    return object;
                var message = new $root.scqp_eg.GamePlayerLoginRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.GamePlayerLoginRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".scqp_eg.GamePlayerLoginRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".scqp_eg.GamePlayerLoginRsp.players: object expected");
                        message.players[i] = $root.scqp_eg.GamePlayer.fromObject(object.players[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a GamePlayerLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @static
             * @param {scqp_eg.GamePlayerLoginRsp} message GamePlayerLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GamePlayerLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.scqp_eg.GamePlayer.toObject(message.players[j], options);
                }
                return object;
            };
    
            /**
             * Converts this GamePlayerLoginRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.GamePlayerLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GamePlayerLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GamePlayerLoginRsp;
        })();
    
        scqp_eg.StartRsp = (function() {
    
            /**
             * Properties of a StartRsp.
             * @memberof scqp_eg
             * @interface IStartRsp
             * @property {common.IResult|null} [result] StartRsp result
             * @property {number|null} [round] StartRsp round
             * @property {number|null} [totalRound] StartRsp totalRound
             * @property {Array.<number>|null} [readyUids] StartRsp readyUids
             * @property {number|null} [turn] StartRsp turn
             * @property {number|null} [maxTurn] StartRsp maxTurn
             * @property {number|null} [bankerId] StartRsp bankerId
             */
    
            /**
             * Constructs a new StartRsp.
             * @memberof scqp_eg
             * @classdesc Represents a StartRsp.
             * @implements IStartRsp
             * @constructor
             * @param {scqp_eg.IStartRsp=} [properties] Properties to set
             */
            function StartRsp(properties) {
                this.readyUids = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * StartRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.result = null;
    
            /**
             * StartRsp round.
             * @member {number} round
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.round = 0;
    
            /**
             * StartRsp totalRound.
             * @member {number} totalRound
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.totalRound = 0;
    
            /**
             * StartRsp readyUids.
             * @member {Array.<number>} readyUids
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.readyUids = $util.emptyArray;
    
            /**
             * StartRsp turn.
             * @member {number} turn
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.turn = 0;
    
            /**
             * StartRsp maxTurn.
             * @member {number} maxTurn
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.maxTurn = 0;
    
            /**
             * StartRsp bankerId.
             * @member {number} bankerId
             * @memberof scqp_eg.StartRsp
             * @instance
             */
            StartRsp.prototype.bankerId = 0;
    
            /**
             * Creates a new StartRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {scqp_eg.IStartRsp=} [properties] Properties to set
             * @returns {scqp_eg.StartRsp} StartRsp instance
             */
            StartRsp.create = function create(properties) {
                return new StartRsp(properties);
            };
    
            /**
             * Encodes the specified StartRsp message. Does not implicitly {@link scqp_eg.StartRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {scqp_eg.IStartRsp} message StartRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.round);
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.totalRound);
                if (message.readyUids != null && message.readyUids.length)
                    for (var i = 0; i < message.readyUids.length; ++i)
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.readyUids[i]);
                if (message.turn != null && message.hasOwnProperty("turn"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.turn);
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.maxTurn);
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.bankerId);
                return writer;
            };
    
            /**
             * Encodes the specified StartRsp message, length delimited. Does not implicitly {@link scqp_eg.StartRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {scqp_eg.IStartRsp} message StartRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a StartRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.StartRsp} StartRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.StartRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.round = reader.uint32();
                        break;
                    case 3:
                        message.totalRound = reader.uint32();
                        break;
                    case 4:
                        if (!(message.readyUids && message.readyUids.length))
                            message.readyUids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.readyUids.push(reader.uint32());
                        } else
                            message.readyUids.push(reader.uint32());
                        break;
                    case 5:
                        message.turn = reader.uint32();
                        break;
                    case 6:
                        message.maxTurn = reader.uint32();
                        break;
                    case 7:
                        message.bankerId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a StartRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.StartRsp} StartRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a StartRsp message.
             * @function verify
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    if (!$util.isInteger(message.totalRound))
                        return "totalRound: integer expected";
                if (message.readyUids != null && message.hasOwnProperty("readyUids")) {
                    if (!Array.isArray(message.readyUids))
                        return "readyUids: array expected";
                    for (var i = 0; i < message.readyUids.length; ++i)
                        if (!$util.isInteger(message.readyUids[i]))
                            return "readyUids: integer[] expected";
                }
                if (message.turn != null && message.hasOwnProperty("turn"))
                    if (!$util.isInteger(message.turn))
                        return "turn: integer expected";
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    if (!$util.isInteger(message.maxTurn))
                        return "maxTurn: integer expected";
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    if (!$util.isInteger(message.bankerId))
                        return "bankerId: integer expected";
                return null;
            };
    
            /**
             * Creates a StartRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.StartRsp} StartRsp
             */
            StartRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.StartRsp)
                    return object;
                var message = new $root.scqp_eg.StartRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.StartRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.round != null)
                    message.round = object.round >>> 0;
                if (object.totalRound != null)
                    message.totalRound = object.totalRound >>> 0;
                if (object.readyUids) {
                    if (!Array.isArray(object.readyUids))
                        throw TypeError(".scqp_eg.StartRsp.readyUids: array expected");
                    message.readyUids = [];
                    for (var i = 0; i < object.readyUids.length; ++i)
                        message.readyUids[i] = object.readyUids[i] >>> 0;
                }
                if (object.turn != null)
                    message.turn = object.turn >>> 0;
                if (object.maxTurn != null)
                    message.maxTurn = object.maxTurn >>> 0;
                if (object.bankerId != null)
                    message.bankerId = object.bankerId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a StartRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.StartRsp
             * @static
             * @param {scqp_eg.StartRsp} message StartRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.readyUids = [];
                if (options.defaults) {
                    object.result = null;
                    object.round = 0;
                    object.totalRound = 0;
                    object.turn = 0;
                    object.maxTurn = 0;
                    object.bankerId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    object.totalRound = message.totalRound;
                if (message.readyUids && message.readyUids.length) {
                    object.readyUids = [];
                    for (var j = 0; j < message.readyUids.length; ++j)
                        object.readyUids[j] = message.readyUids[j];
                }
                if (message.turn != null && message.hasOwnProperty("turn"))
                    object.turn = message.turn;
                if (message.maxTurn != null && message.hasOwnProperty("maxTurn"))
                    object.maxTurn = message.maxTurn;
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    object.bankerId = message.bankerId;
                return object;
            };
    
            /**
             * Converts this StartRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.StartRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return StartRsp;
        })();
    
        scqp_eg.ReadyReq = (function() {
    
            /**
             * Properties of a ReadyReq.
             * @memberof scqp_eg
             * @interface IReadyReq
             * @property {common.IRequest|null} [request] ReadyReq request
             */
    
            /**
             * Constructs a new ReadyReq.
             * @memberof scqp_eg
             * @classdesc Represents a ReadyReq.
             * @implements IReadyReq
             * @constructor
             * @param {scqp_eg.IReadyReq=} [properties] Properties to set
             */
            function ReadyReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ReadyReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.ReadyReq
             * @instance
             */
            ReadyReq.prototype.request = null;
    
            /**
             * Creates a new ReadyReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {scqp_eg.IReadyReq=} [properties] Properties to set
             * @returns {scqp_eg.ReadyReq} ReadyReq instance
             */
            ReadyReq.create = function create(properties) {
                return new ReadyReq(properties);
            };
    
            /**
             * Encodes the specified ReadyReq message. Does not implicitly {@link scqp_eg.ReadyReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {scqp_eg.IReadyReq} message ReadyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReadyReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ReadyReq message, length delimited. Does not implicitly {@link scqp_eg.ReadyReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {scqp_eg.IReadyReq} message ReadyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReadyReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ReadyReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.ReadyReq} ReadyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReadyReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.ReadyReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ReadyReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.ReadyReq} ReadyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReadyReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ReadyReq message.
             * @function verify
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReadyReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a ReadyReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.ReadyReq} ReadyReq
             */
            ReadyReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.ReadyReq)
                    return object;
                var message = new $root.scqp_eg.ReadyReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.ReadyReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ReadyReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.ReadyReq
             * @static
             * @param {scqp_eg.ReadyReq} message ReadyReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReadyReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this ReadyReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.ReadyReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReadyReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReadyReq;
        })();
    
        scqp_eg.ReadyRsp = (function() {
    
            /**
             * Properties of a ReadyRsp.
             * @memberof scqp_eg
             * @interface IReadyRsp
             * @property {common.IResult|null} [result] ReadyRsp result
             * @property {number|null} [uid] ReadyRsp uid
             */
    
            /**
             * Constructs a new ReadyRsp.
             * @memberof scqp_eg
             * @classdesc Represents a ReadyRsp.
             * @implements IReadyRsp
             * @constructor
             * @param {scqp_eg.IReadyRsp=} [properties] Properties to set
             */
            function ReadyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ReadyRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.ReadyRsp
             * @instance
             */
            ReadyRsp.prototype.result = null;
    
            /**
             * ReadyRsp uid.
             * @member {number} uid
             * @memberof scqp_eg.ReadyRsp
             * @instance
             */
            ReadyRsp.prototype.uid = 0;
    
            /**
             * Creates a new ReadyRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {scqp_eg.IReadyRsp=} [properties] Properties to set
             * @returns {scqp_eg.ReadyRsp} ReadyRsp instance
             */
            ReadyRsp.create = function create(properties) {
                return new ReadyRsp(properties);
            };
    
            /**
             * Encodes the specified ReadyRsp message. Does not implicitly {@link scqp_eg.ReadyRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {scqp_eg.IReadyRsp} message ReadyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReadyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                return writer;
            };
    
            /**
             * Encodes the specified ReadyRsp message, length delimited. Does not implicitly {@link scqp_eg.ReadyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {scqp_eg.IReadyRsp} message ReadyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReadyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ReadyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.ReadyRsp} ReadyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReadyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.ReadyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ReadyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.ReadyRsp} ReadyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReadyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ReadyRsp message.
             * @function verify
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReadyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                return null;
            };
    
            /**
             * Creates a ReadyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.ReadyRsp} ReadyRsp
             */
            ReadyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.ReadyRsp)
                    return object;
                var message = new $root.scqp_eg.ReadyRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.ReadyRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ReadyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.ReadyRsp
             * @static
             * @param {scqp_eg.ReadyRsp} message ReadyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReadyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                return object;
            };
    
            /**
             * Converts this ReadyRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.ReadyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReadyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReadyRsp;
        })();
    
        scqp_eg.DealRsp = (function() {
    
            /**
             * Properties of a DealRsp.
             * @memberof scqp_eg
             * @interface IDealRsp
             * @property {common.IResult|null} [result] DealRsp result
             * @property {number|null} [cardsNum] DealRsp cardsNum
             * @property {Array.<number>|null} [cards] DealRsp cards
             * @property {number|null} [bankerId] DealRsp bankerId
             */
    
            /**
             * Constructs a new DealRsp.
             * @memberof scqp_eg
             * @classdesc Represents a DealRsp.
             * @implements IDealRsp
             * @constructor
             * @param {scqp_eg.IDealRsp=} [properties] Properties to set
             */
            function DealRsp(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DealRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.DealRsp
             * @instance
             */
            DealRsp.prototype.result = null;
    
            /**
             * DealRsp cardsNum.
             * @member {number} cardsNum
             * @memberof scqp_eg.DealRsp
             * @instance
             */
            DealRsp.prototype.cardsNum = 0;
    
            /**
             * DealRsp cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.DealRsp
             * @instance
             */
            DealRsp.prototype.cards = $util.emptyArray;
    
            /**
             * DealRsp bankerId.
             * @member {number} bankerId
             * @memberof scqp_eg.DealRsp
             * @instance
             */
            DealRsp.prototype.bankerId = 0;
    
            /**
             * Creates a new DealRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {scqp_eg.IDealRsp=} [properties] Properties to set
             * @returns {scqp_eg.DealRsp} DealRsp instance
             */
            DealRsp.create = function create(properties) {
                return new DealRsp(properties);
            };
    
            /**
             * Encodes the specified DealRsp message. Does not implicitly {@link scqp_eg.DealRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {scqp_eg.IDealRsp} message DealRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DealRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cardsNum);
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cards[i]);
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.bankerId);
                return writer;
            };
    
            /**
             * Encodes the specified DealRsp message, length delimited. Does not implicitly {@link scqp_eg.DealRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {scqp_eg.IDealRsp} message DealRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DealRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DealRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.DealRsp} DealRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DealRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.DealRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.cardsNum = reader.uint32();
                        break;
                    case 3:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 4:
                        message.bankerId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DealRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.DealRsp} DealRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DealRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DealRsp message.
             * @function verify
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DealRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    if (!$util.isInteger(message.cardsNum))
                        return "cardsNum: integer expected";
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    if (!$util.isInteger(message.bankerId))
                        return "bankerId: integer expected";
                return null;
            };
    
            /**
             * Creates a DealRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.DealRsp} DealRsp
             */
            DealRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.DealRsp)
                    return object;
                var message = new $root.scqp_eg.DealRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.DealRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.cardsNum != null)
                    message.cardsNum = object.cardsNum >>> 0;
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.DealRsp.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.bankerId != null)
                    message.bankerId = object.bankerId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a DealRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.DealRsp
             * @static
             * @param {scqp_eg.DealRsp} message DealRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DealRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults) {
                    object.result = null;
                    object.cardsNum = 0;
                    object.bankerId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    object.cardsNum = message.cardsNum;
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    object.bankerId = message.bankerId;
                return object;
            };
    
            /**
             * Converts this DealRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.DealRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DealRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DealRsp;
        })();
    
        scqp_eg.OperateInfo = (function() {
    
            /**
             * Properties of an OperateInfo.
             * @memberof scqp_eg
             * @interface IOperateInfo
             * @property {number|null} [uid] OperateInfo uid
             * @property {number|null} [op] OperateInfo op
             * @property {number|null} [opCard] OperateInfo opCard
             * @property {boolean|null} [noGiveUp] OperateInfo noGiveUp
             */
    
            /**
             * Constructs a new OperateInfo.
             * @memberof scqp_eg
             * @classdesc Represents an OperateInfo.
             * @implements IOperateInfo
             * @constructor
             * @param {scqp_eg.IOperateInfo=} [properties] Properties to set
             */
            function OperateInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OperateInfo uid.
             * @member {number} uid
             * @memberof scqp_eg.OperateInfo
             * @instance
             */
            OperateInfo.prototype.uid = 0;
    
            /**
             * OperateInfo op.
             * @member {number} op
             * @memberof scqp_eg.OperateInfo
             * @instance
             */
            OperateInfo.prototype.op = 0;
    
            /**
             * OperateInfo opCard.
             * @member {number} opCard
             * @memberof scqp_eg.OperateInfo
             * @instance
             */
            OperateInfo.prototype.opCard = 0;
    
            /**
             * OperateInfo noGiveUp.
             * @member {boolean} noGiveUp
             * @memberof scqp_eg.OperateInfo
             * @instance
             */
            OperateInfo.prototype.noGiveUp = false;
    
            /**
             * Creates a new OperateInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {scqp_eg.IOperateInfo=} [properties] Properties to set
             * @returns {scqp_eg.OperateInfo} OperateInfo instance
             */
            OperateInfo.create = function create(properties) {
                return new OperateInfo(properties);
            };
    
            /**
             * Encodes the specified OperateInfo message. Does not implicitly {@link scqp_eg.OperateInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {scqp_eg.IOperateInfo} message OperateInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperateInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.op != null && message.hasOwnProperty("op"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.op);
                if (message.opCard != null && message.hasOwnProperty("opCard"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opCard);
                if (message.noGiveUp != null && message.hasOwnProperty("noGiveUp"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.noGiveUp);
                return writer;
            };
    
            /**
             * Encodes the specified OperateInfo message, length delimited. Does not implicitly {@link scqp_eg.OperateInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {scqp_eg.IOperateInfo} message OperateInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperateInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OperateInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.OperateInfo} OperateInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperateInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.OperateInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.op = reader.uint32();
                        break;
                    case 3:
                        message.opCard = reader.uint32();
                        break;
                    case 4:
                        message.noGiveUp = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OperateInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.OperateInfo} OperateInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperateInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OperateInfo message.
             * @function verify
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OperateInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.op != null && message.hasOwnProperty("op"))
                    if (!$util.isInteger(message.op))
                        return "op: integer expected";
                if (message.opCard != null && message.hasOwnProperty("opCard"))
                    if (!$util.isInteger(message.opCard))
                        return "opCard: integer expected";
                if (message.noGiveUp != null && message.hasOwnProperty("noGiveUp"))
                    if (typeof message.noGiveUp !== "boolean")
                        return "noGiveUp: boolean expected";
                return null;
            };
    
            /**
             * Creates an OperateInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.OperateInfo} OperateInfo
             */
            OperateInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.OperateInfo)
                    return object;
                var message = new $root.scqp_eg.OperateInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.op != null)
                    message.op = object.op >>> 0;
                if (object.opCard != null)
                    message.opCard = object.opCard >>> 0;
                if (object.noGiveUp != null)
                    message.noGiveUp = Boolean(object.noGiveUp);
                return message;
            };
    
            /**
             * Creates a plain object from an OperateInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.OperateInfo
             * @static
             * @param {scqp_eg.OperateInfo} message OperateInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OperateInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.op = 0;
                    object.opCard = 0;
                    object.noGiveUp = false;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.op != null && message.hasOwnProperty("op"))
                    object.op = message.op;
                if (message.opCard != null && message.hasOwnProperty("opCard"))
                    object.opCard = message.opCard;
                if (message.noGiveUp != null && message.hasOwnProperty("noGiveUp"))
                    object.noGiveUp = message.noGiveUp;
                return object;
            };
    
            /**
             * Converts this OperateInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.OperateInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OperateInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OperateInfo;
        })();
    
        scqp_eg.TurnRsp = (function() {
    
            /**
             * Properties of a TurnRsp.
             * @memberof scqp_eg
             * @interface ITurnRsp
             * @property {common.IResult|null} [result] TurnRsp result
             * @property {number|null} [uid] TurnRsp uid
             * @property {number|null} [card] TurnRsp card
             * @property {scqp_eg.IOperateInfo|null} [opInfo] TurnRsp opInfo
             */
    
            /**
             * Constructs a new TurnRsp.
             * @memberof scqp_eg
             * @classdesc Represents a TurnRsp.
             * @implements ITurnRsp
             * @constructor
             * @param {scqp_eg.ITurnRsp=} [properties] Properties to set
             */
            function TurnRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TurnRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.TurnRsp
             * @instance
             */
            TurnRsp.prototype.result = null;
    
            /**
             * TurnRsp uid.
             * @member {number} uid
             * @memberof scqp_eg.TurnRsp
             * @instance
             */
            TurnRsp.prototype.uid = 0;
    
            /**
             * TurnRsp card.
             * @member {number} card
             * @memberof scqp_eg.TurnRsp
             * @instance
             */
            TurnRsp.prototype.card = 0;
    
            /**
             * TurnRsp opInfo.
             * @member {scqp_eg.IOperateInfo|null|undefined} opInfo
             * @memberof scqp_eg.TurnRsp
             * @instance
             */
            TurnRsp.prototype.opInfo = null;
    
            /**
             * Creates a new TurnRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {scqp_eg.ITurnRsp=} [properties] Properties to set
             * @returns {scqp_eg.TurnRsp} TurnRsp instance
             */
            TurnRsp.create = function create(properties) {
                return new TurnRsp(properties);
            };
    
            /**
             * Encodes the specified TurnRsp message. Does not implicitly {@link scqp_eg.TurnRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {scqp_eg.ITurnRsp} message TurnRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.uid);
                if (message.card != null && message.hasOwnProperty("card"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.card);
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    $root.scqp_eg.OperateInfo.encode(message.opInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified TurnRsp message, length delimited. Does not implicitly {@link scqp_eg.TurnRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {scqp_eg.ITurnRsp} message TurnRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TurnRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.TurnRsp} TurnRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.TurnRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.uid = reader.uint32();
                        break;
                    case 3:
                        message.card = reader.int32();
                        break;
                    case 4:
                        message.opInfo = $root.scqp_eg.OperateInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TurnRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.TurnRsp} TurnRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TurnRsp message.
             * @function verify
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TurnRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isInteger(message.card))
                        return "card: integer expected";
                if (message.opInfo != null && message.hasOwnProperty("opInfo")) {
                    var error = $root.scqp_eg.OperateInfo.verify(message.opInfo);
                    if (error)
                        return "opInfo." + error;
                }
                return null;
            };
    
            /**
             * Creates a TurnRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.TurnRsp} TurnRsp
             */
            TurnRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.TurnRsp)
                    return object;
                var message = new $root.scqp_eg.TurnRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.TurnRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.card != null)
                    message.card = object.card | 0;
                if (object.opInfo != null) {
                    if (typeof object.opInfo !== "object")
                        throw TypeError(".scqp_eg.TurnRsp.opInfo: object expected");
                    message.opInfo = $root.scqp_eg.OperateInfo.fromObject(object.opInfo);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TurnRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.TurnRsp
             * @static
             * @param {scqp_eg.TurnRsp} message TurnRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TurnRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.uid = 0;
                    object.card = 0;
                    object.opInfo = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    object.opInfo = $root.scqp_eg.OperateInfo.toObject(message.opInfo, options);
                return object;
            };
    
            /**
             * Converts this TurnRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.TurnRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TurnRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TurnRsp;
        })();
    
        scqp_eg.OperationReq = (function() {
    
            /**
             * Properties of an OperationReq.
             * @memberof scqp_eg
             * @interface IOperationReq
             * @property {common.IRequest|null} [request] OperationReq request
             * @property {number|null} [op] OperationReq op
             * @property {number|null} [card] OperationReq card
             * @property {number|null} [count] OperationReq count
             * @property {Array.<number>|null} [cards] OperationReq cards
             */
    
            /**
             * Constructs a new OperationReq.
             * @memberof scqp_eg
             * @classdesc Represents an OperationReq.
             * @implements IOperationReq
             * @constructor
             * @param {scqp_eg.IOperationReq=} [properties] Properties to set
             */
            function OperationReq(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OperationReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.OperationReq
             * @instance
             */
            OperationReq.prototype.request = null;
    
            /**
             * OperationReq op.
             * @member {number} op
             * @memberof scqp_eg.OperationReq
             * @instance
             */
            OperationReq.prototype.op = 0;
    
            /**
             * OperationReq card.
             * @member {number} card
             * @memberof scqp_eg.OperationReq
             * @instance
             */
            OperationReq.prototype.card = 0;
    
            /**
             * OperationReq count.
             * @member {number} count
             * @memberof scqp_eg.OperationReq
             * @instance
             */
            OperationReq.prototype.count = 0;
    
            /**
             * OperationReq cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.OperationReq
             * @instance
             */
            OperationReq.prototype.cards = $util.emptyArray;
    
            /**
             * Creates a new OperationReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {scqp_eg.IOperationReq=} [properties] Properties to set
             * @returns {scqp_eg.OperationReq} OperationReq instance
             */
            OperationReq.create = function create(properties) {
                return new OperationReq(properties);
            };
    
            /**
             * Encodes the specified OperationReq message. Does not implicitly {@link scqp_eg.OperationReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {scqp_eg.IOperationReq} message OperationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperationReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.op != null && message.hasOwnProperty("op"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.op);
                if (message.card != null && message.hasOwnProperty("card"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.card);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.count);
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cards[i]);
                return writer;
            };
    
            /**
             * Encodes the specified OperationReq message, length delimited. Does not implicitly {@link scqp_eg.OperationReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {scqp_eg.IOperationReq} message OperationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperationReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OperationReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.OperationReq} OperationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperationReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.OperationReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.op = reader.uint32();
                        break;
                    case 3:
                        message.card = reader.uint32();
                        break;
                    case 4:
                        message.count = reader.uint32();
                        break;
                    case 5:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OperationReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.OperationReq} OperationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperationReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OperationReq message.
             * @function verify
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OperationReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.op != null && message.hasOwnProperty("op"))
                    if (!$util.isInteger(message.op))
                        return "op: integer expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isInteger(message.card))
                        return "card: integer expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates an OperationReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.OperationReq} OperationReq
             */
            OperationReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.OperationReq)
                    return object;
                var message = new $root.scqp_eg.OperationReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.OperationReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.op != null)
                    message.op = object.op >>> 0;
                if (object.card != null)
                    message.card = object.card >>> 0;
                if (object.count != null)
                    message.count = object.count >>> 0;
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.OperationReq.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from an OperationReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.OperationReq
             * @static
             * @param {scqp_eg.OperationReq} message OperationReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OperationReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults) {
                    object.request = null;
                    object.op = 0;
                    object.card = 0;
                    object.count = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.op != null && message.hasOwnProperty("op"))
                    object.op = message.op;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                return object;
            };
    
            /**
             * Converts this OperationReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.OperationReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OperationReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OperationReq;
        })();
    
        scqp_eg.PengGangInfo = (function() {
    
            /**
             * Properties of a PengGangInfo.
             * @memberof scqp_eg
             * @interface IPengGangInfo
             * @property {number|null} [op] PengGangInfo op
             * @property {number|null} [card] PengGangInfo card
             * @property {number|null} [yaojiCount] PengGangInfo yaojiCount
             */
    
            /**
             * Constructs a new PengGangInfo.
             * @memberof scqp_eg
             * @classdesc Represents a PengGangInfo.
             * @implements IPengGangInfo
             * @constructor
             * @param {scqp_eg.IPengGangInfo=} [properties] Properties to set
             */
            function PengGangInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PengGangInfo op.
             * @member {number} op
             * @memberof scqp_eg.PengGangInfo
             * @instance
             */
            PengGangInfo.prototype.op = 0;
    
            /**
             * PengGangInfo card.
             * @member {number} card
             * @memberof scqp_eg.PengGangInfo
             * @instance
             */
            PengGangInfo.prototype.card = 0;
    
            /**
             * PengGangInfo yaojiCount.
             * @member {number} yaojiCount
             * @memberof scqp_eg.PengGangInfo
             * @instance
             */
            PengGangInfo.prototype.yaojiCount = 0;
    
            /**
             * Creates a new PengGangInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {scqp_eg.IPengGangInfo=} [properties] Properties to set
             * @returns {scqp_eg.PengGangInfo} PengGangInfo instance
             */
            PengGangInfo.create = function create(properties) {
                return new PengGangInfo(properties);
            };
    
            /**
             * Encodes the specified PengGangInfo message. Does not implicitly {@link scqp_eg.PengGangInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {scqp_eg.IPengGangInfo} message PengGangInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PengGangInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.op != null && message.hasOwnProperty("op"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.op);
                if (message.card != null && message.hasOwnProperty("card"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.card);
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.yaojiCount);
                return writer;
            };
    
            /**
             * Encodes the specified PengGangInfo message, length delimited. Does not implicitly {@link scqp_eg.PengGangInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {scqp_eg.IPengGangInfo} message PengGangInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PengGangInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PengGangInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.PengGangInfo} PengGangInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PengGangInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.PengGangInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.op = reader.uint32();
                        break;
                    case 2:
                        message.card = reader.uint32();
                        break;
                    case 3:
                        message.yaojiCount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PengGangInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.PengGangInfo} PengGangInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PengGangInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PengGangInfo message.
             * @function verify
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PengGangInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.op != null && message.hasOwnProperty("op"))
                    if (!$util.isInteger(message.op))
                        return "op: integer expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isInteger(message.card))
                        return "card: integer expected";
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    if (!$util.isInteger(message.yaojiCount))
                        return "yaojiCount: integer expected";
                return null;
            };
    
            /**
             * Creates a PengGangInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.PengGangInfo} PengGangInfo
             */
            PengGangInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.PengGangInfo)
                    return object;
                var message = new $root.scqp_eg.PengGangInfo();
                if (object.op != null)
                    message.op = object.op >>> 0;
                if (object.card != null)
                    message.card = object.card >>> 0;
                if (object.yaojiCount != null)
                    message.yaojiCount = object.yaojiCount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a PengGangInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.PengGangInfo
             * @static
             * @param {scqp_eg.PengGangInfo} message PengGangInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PengGangInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.op = 0;
                    object.card = 0;
                    object.yaojiCount = 0;
                }
                if (message.op != null && message.hasOwnProperty("op"))
                    object.op = message.op;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.yaojiCount != null && message.hasOwnProperty("yaojiCount"))
                    object.yaojiCount = message.yaojiCount;
                return object;
            };
    
            /**
             * Converts this PengGangInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.PengGangInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PengGangInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PengGangInfo;
        })();
    
        scqp_eg.CardInfo = (function() {
    
            /**
             * Properties of a CardInfo.
             * @memberof scqp_eg
             * @interface ICardInfo
             * @property {number|null} [uid] CardInfo uid
             * @property {Array.<scqp_eg.IPengGangInfo>|null} [pengGangInfo] CardInfo pengGangInfo
             * @property {Array.<number>|null} [handCards] CardInfo handCards
             */
    
            /**
             * Constructs a new CardInfo.
             * @memberof scqp_eg
             * @classdesc Represents a CardInfo.
             * @implements ICardInfo
             * @constructor
             * @param {scqp_eg.ICardInfo=} [properties] Properties to set
             */
            function CardInfo(properties) {
                this.pengGangInfo = [];
                this.handCards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * CardInfo uid.
             * @member {number} uid
             * @memberof scqp_eg.CardInfo
             * @instance
             */
            CardInfo.prototype.uid = 0;
    
            /**
             * CardInfo pengGangInfo.
             * @member {Array.<scqp_eg.IPengGangInfo>} pengGangInfo
             * @memberof scqp_eg.CardInfo
             * @instance
             */
            CardInfo.prototype.pengGangInfo = $util.emptyArray;
    
            /**
             * CardInfo handCards.
             * @member {Array.<number>} handCards
             * @memberof scqp_eg.CardInfo
             * @instance
             */
            CardInfo.prototype.handCards = $util.emptyArray;
    
            /**
             * Creates a new CardInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {scqp_eg.ICardInfo=} [properties] Properties to set
             * @returns {scqp_eg.CardInfo} CardInfo instance
             */
            CardInfo.create = function create(properties) {
                return new CardInfo(properties);
            };
    
            /**
             * Encodes the specified CardInfo message. Does not implicitly {@link scqp_eg.CardInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {scqp_eg.ICardInfo} message CardInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CardInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.pengGangInfo != null && message.pengGangInfo.length)
                    for (var i = 0; i < message.pengGangInfo.length; ++i)
                        $root.scqp_eg.PengGangInfo.encode(message.pengGangInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.handCards != null && message.handCards.length)
                    for (var i = 0; i < message.handCards.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.handCards[i]);
                return writer;
            };
    
            /**
             * Encodes the specified CardInfo message, length delimited. Does not implicitly {@link scqp_eg.CardInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {scqp_eg.ICardInfo} message CardInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CardInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a CardInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.CardInfo} CardInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CardInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.CardInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        if (!(message.pengGangInfo && message.pengGangInfo.length))
                            message.pengGangInfo = [];
                        message.pengGangInfo.push($root.scqp_eg.PengGangInfo.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.handCards && message.handCards.length))
                            message.handCards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.handCards.push(reader.uint32());
                        } else
                            message.handCards.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a CardInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.CardInfo} CardInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CardInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a CardInfo message.
             * @function verify
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CardInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.pengGangInfo != null && message.hasOwnProperty("pengGangInfo")) {
                    if (!Array.isArray(message.pengGangInfo))
                        return "pengGangInfo: array expected";
                    for (var i = 0; i < message.pengGangInfo.length; ++i) {
                        var error = $root.scqp_eg.PengGangInfo.verify(message.pengGangInfo[i]);
                        if (error)
                            return "pengGangInfo." + error;
                    }
                }
                if (message.handCards != null && message.hasOwnProperty("handCards")) {
                    if (!Array.isArray(message.handCards))
                        return "handCards: array expected";
                    for (var i = 0; i < message.handCards.length; ++i)
                        if (!$util.isInteger(message.handCards[i]))
                            return "handCards: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a CardInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.CardInfo} CardInfo
             */
            CardInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.CardInfo)
                    return object;
                var message = new $root.scqp_eg.CardInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.pengGangInfo) {
                    if (!Array.isArray(object.pengGangInfo))
                        throw TypeError(".scqp_eg.CardInfo.pengGangInfo: array expected");
                    message.pengGangInfo = [];
                    for (var i = 0; i < object.pengGangInfo.length; ++i) {
                        if (typeof object.pengGangInfo[i] !== "object")
                            throw TypeError(".scqp_eg.CardInfo.pengGangInfo: object expected");
                        message.pengGangInfo[i] = $root.scqp_eg.PengGangInfo.fromObject(object.pengGangInfo[i]);
                    }
                }
                if (object.handCards) {
                    if (!Array.isArray(object.handCards))
                        throw TypeError(".scqp_eg.CardInfo.handCards: array expected");
                    message.handCards = [];
                    for (var i = 0; i < object.handCards.length; ++i)
                        message.handCards[i] = object.handCards[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a CardInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.CardInfo
             * @static
             * @param {scqp_eg.CardInfo} message CardInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CardInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.pengGangInfo = [];
                    object.handCards = [];
                }
                if (options.defaults)
                    object.uid = 0;
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.pengGangInfo && message.pengGangInfo.length) {
                    object.pengGangInfo = [];
                    for (var j = 0; j < message.pengGangInfo.length; ++j)
                        object.pengGangInfo[j] = $root.scqp_eg.PengGangInfo.toObject(message.pengGangInfo[j], options);
                }
                if (message.handCards && message.handCards.length) {
                    object.handCards = [];
                    for (var j = 0; j < message.handCards.length; ++j)
                        object.handCards[j] = message.handCards[j];
                }
                return object;
            };
    
            /**
             * Converts this CardInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.CardInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CardInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return CardInfo;
        })();
    
        scqp_eg.OperationRsp = (function() {
    
            /**
             * Properties of an OperationRsp.
             * @memberof scqp_eg
             * @interface IOperationRsp
             * @property {common.IResult|null} [result] OperationRsp result
             * @property {scqp_eg.IOperateInfo|null} [opInfo] OperationRsp opInfo
             * @property {scqp_eg.IOperateInfo|null} [myInfo] OperationRsp myInfo
             * @property {scqp_eg.ICardInfo|null} [cardInfo] OperationRsp cardInfo
             */
    
            /**
             * Constructs a new OperationRsp.
             * @memberof scqp_eg
             * @classdesc Represents an OperationRsp.
             * @implements IOperationRsp
             * @constructor
             * @param {scqp_eg.IOperationRsp=} [properties] Properties to set
             */
            function OperationRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OperationRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.OperationRsp
             * @instance
             */
            OperationRsp.prototype.result = null;
    
            /**
             * OperationRsp opInfo.
             * @member {scqp_eg.IOperateInfo|null|undefined} opInfo
             * @memberof scqp_eg.OperationRsp
             * @instance
             */
            OperationRsp.prototype.opInfo = null;
    
            /**
             * OperationRsp myInfo.
             * @member {scqp_eg.IOperateInfo|null|undefined} myInfo
             * @memberof scqp_eg.OperationRsp
             * @instance
             */
            OperationRsp.prototype.myInfo = null;
    
            /**
             * OperationRsp cardInfo.
             * @member {scqp_eg.ICardInfo|null|undefined} cardInfo
             * @memberof scqp_eg.OperationRsp
             * @instance
             */
            OperationRsp.prototype.cardInfo = null;
    
            /**
             * Creates a new OperationRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {scqp_eg.IOperationRsp=} [properties] Properties to set
             * @returns {scqp_eg.OperationRsp} OperationRsp instance
             */
            OperationRsp.create = function create(properties) {
                return new OperationRsp(properties);
            };
    
            /**
             * Encodes the specified OperationRsp message. Does not implicitly {@link scqp_eg.OperationRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {scqp_eg.IOperationRsp} message OperationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperationRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    $root.scqp_eg.OperateInfo.encode(message.opInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.myInfo != null && message.hasOwnProperty("myInfo"))
                    $root.scqp_eg.OperateInfo.encode(message.myInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.cardInfo != null && message.hasOwnProperty("cardInfo"))
                    $root.scqp_eg.CardInfo.encode(message.cardInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified OperationRsp message, length delimited. Does not implicitly {@link scqp_eg.OperationRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {scqp_eg.IOperationRsp} message OperationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OperationRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OperationRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.OperationRsp} OperationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperationRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.OperationRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.opInfo = $root.scqp_eg.OperateInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.myInfo = $root.scqp_eg.OperateInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.cardInfo = $root.scqp_eg.CardInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OperationRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.OperationRsp} OperationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OperationRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OperationRsp message.
             * @function verify
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OperationRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.opInfo != null && message.hasOwnProperty("opInfo")) {
                    var error = $root.scqp_eg.OperateInfo.verify(message.opInfo);
                    if (error)
                        return "opInfo." + error;
                }
                if (message.myInfo != null && message.hasOwnProperty("myInfo")) {
                    var error = $root.scqp_eg.OperateInfo.verify(message.myInfo);
                    if (error)
                        return "myInfo." + error;
                }
                if (message.cardInfo != null && message.hasOwnProperty("cardInfo")) {
                    var error = $root.scqp_eg.CardInfo.verify(message.cardInfo);
                    if (error)
                        return "cardInfo." + error;
                }
                return null;
            };
    
            /**
             * Creates an OperationRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.OperationRsp} OperationRsp
             */
            OperationRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.OperationRsp)
                    return object;
                var message = new $root.scqp_eg.OperationRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.OperationRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.opInfo != null) {
                    if (typeof object.opInfo !== "object")
                        throw TypeError(".scqp_eg.OperationRsp.opInfo: object expected");
                    message.opInfo = $root.scqp_eg.OperateInfo.fromObject(object.opInfo);
                }
                if (object.myInfo != null) {
                    if (typeof object.myInfo !== "object")
                        throw TypeError(".scqp_eg.OperationRsp.myInfo: object expected");
                    message.myInfo = $root.scqp_eg.OperateInfo.fromObject(object.myInfo);
                }
                if (object.cardInfo != null) {
                    if (typeof object.cardInfo !== "object")
                        throw TypeError(".scqp_eg.OperationRsp.cardInfo: object expected");
                    message.cardInfo = $root.scqp_eg.CardInfo.fromObject(object.cardInfo);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an OperationRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.OperationRsp
             * @static
             * @param {scqp_eg.OperationRsp} message OperationRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OperationRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.opInfo = null;
                    object.myInfo = null;
                    object.cardInfo = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.opInfo != null && message.hasOwnProperty("opInfo"))
                    object.opInfo = $root.scqp_eg.OperateInfo.toObject(message.opInfo, options);
                if (message.myInfo != null && message.hasOwnProperty("myInfo"))
                    object.myInfo = $root.scqp_eg.OperateInfo.toObject(message.myInfo, options);
                if (message.cardInfo != null && message.hasOwnProperty("cardInfo"))
                    object.cardInfo = $root.scqp_eg.CardInfo.toObject(message.cardInfo, options);
                return object;
            };
    
            /**
             * Converts this OperationRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.OperationRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OperationRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OperationRsp;
        })();
    
        scqp_eg.LostInfo = (function() {
    
            /**
             * Properties of a LostInfo.
             * @memberof scqp_eg
             * @interface ILostInfo
             * @property {number|null} [uid] LostInfo uid
             * @property {number|null} [points] LostInfo points
             */
    
            /**
             * Constructs a new LostInfo.
             * @memberof scqp_eg
             * @classdesc Represents a LostInfo.
             * @implements ILostInfo
             * @constructor
             * @param {scqp_eg.ILostInfo=} [properties] Properties to set
             */
            function LostInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LostInfo uid.
             * @member {number} uid
             * @memberof scqp_eg.LostInfo
             * @instance
             */
            LostInfo.prototype.uid = 0;
    
            /**
             * LostInfo points.
             * @member {number} points
             * @memberof scqp_eg.LostInfo
             * @instance
             */
            LostInfo.prototype.points = 0;
    
            /**
             * Creates a new LostInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {scqp_eg.ILostInfo=} [properties] Properties to set
             * @returns {scqp_eg.LostInfo} LostInfo instance
             */
            LostInfo.create = function create(properties) {
                return new LostInfo(properties);
            };
    
            /**
             * Encodes the specified LostInfo message. Does not implicitly {@link scqp_eg.LostInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {scqp_eg.ILostInfo} message LostInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LostInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.points);
                return writer;
            };
    
            /**
             * Encodes the specified LostInfo message, length delimited. Does not implicitly {@link scqp_eg.LostInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {scqp_eg.ILostInfo} message LostInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LostInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LostInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.LostInfo} LostInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LostInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.LostInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.int32();
                        break;
                    case 2:
                        message.points = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LostInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.LostInfo} LostInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LostInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LostInfo message.
             * @function verify
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LostInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                return null;
            };
    
            /**
             * Creates a LostInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.LostInfo} LostInfo
             */
            LostInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.LostInfo)
                    return object;
                var message = new $root.scqp_eg.LostInfo();
                if (object.uid != null)
                    message.uid = object.uid | 0;
                if (object.points != null)
                    message.points = object.points | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LostInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.LostInfo
             * @static
             * @param {scqp_eg.LostInfo} message LostInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LostInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.points = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                return object;
            };
    
            /**
             * Converts this LostInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.LostInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LostInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LostInfo;
        })();
    
        scqp_eg.WinInfo = (function() {
    
            /**
             * Properties of a WinInfo.
             * @memberof scqp_eg
             * @interface IWinInfo
             * @property {number|null} [huType] WinInfo huType
             * @property {number|null} [huCard] WinInfo huCard
             * @property {number|null} [fans] WinInfo fans
             * @property {number|null} [baseFan] WinInfo baseFan
             * @property {Array.<number>|null} [extraFans] WinInfo extraFans
             * @property {number|null} [points] WinInfo points
             * @property {Array.<scqp_eg.ILostInfo>|null} [lostInfos] WinInfo lostInfos
             * @property {number|null} [huIndex] WinInfo huIndex
             */
    
            /**
             * Constructs a new WinInfo.
             * @memberof scqp_eg
             * @classdesc Represents a WinInfo.
             * @implements IWinInfo
             * @constructor
             * @param {scqp_eg.IWinInfo=} [properties] Properties to set
             */
            function WinInfo(properties) {
                this.extraFans = [];
                this.lostInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * WinInfo huType.
             * @member {number} huType
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.huType = 0;
    
            /**
             * WinInfo huCard.
             * @member {number} huCard
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.huCard = 0;
    
            /**
             * WinInfo fans.
             * @member {number} fans
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.fans = 0;
    
            /**
             * WinInfo baseFan.
             * @member {number} baseFan
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.baseFan = 0;
    
            /**
             * WinInfo extraFans.
             * @member {Array.<number>} extraFans
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.extraFans = $util.emptyArray;
    
            /**
             * WinInfo points.
             * @member {number} points
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.points = 0;
    
            /**
             * WinInfo lostInfos.
             * @member {Array.<scqp_eg.ILostInfo>} lostInfos
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.lostInfos = $util.emptyArray;
    
            /**
             * WinInfo huIndex.
             * @member {number} huIndex
             * @memberof scqp_eg.WinInfo
             * @instance
             */
            WinInfo.prototype.huIndex = 0;
    
            /**
             * Creates a new WinInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {scqp_eg.IWinInfo=} [properties] Properties to set
             * @returns {scqp_eg.WinInfo} WinInfo instance
             */
            WinInfo.create = function create(properties) {
                return new WinInfo(properties);
            };
    
            /**
             * Encodes the specified WinInfo message. Does not implicitly {@link scqp_eg.WinInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {scqp_eg.IWinInfo} message WinInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WinInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.huType != null && message.hasOwnProperty("huType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.huType);
                if (message.huCard != null && message.hasOwnProperty("huCard"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.huCard);
                if (message.fans != null && message.hasOwnProperty("fans"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.fans);
                if (message.baseFan != null && message.hasOwnProperty("baseFan"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.baseFan);
                if (message.extraFans != null && message.extraFans.length)
                    for (var i = 0; i < message.extraFans.length; ++i)
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.extraFans[i]);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.points);
                if (message.lostInfos != null && message.lostInfos.length)
                    for (var i = 0; i < message.lostInfos.length; ++i)
                        $root.scqp_eg.LostInfo.encode(message.lostInfos[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.huIndex != null && message.hasOwnProperty("huIndex"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.huIndex);
                return writer;
            };
    
            /**
             * Encodes the specified WinInfo message, length delimited. Does not implicitly {@link scqp_eg.WinInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {scqp_eg.IWinInfo} message WinInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WinInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WinInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.WinInfo} WinInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WinInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.WinInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.huType = reader.int32();
                        break;
                    case 2:
                        message.huCard = reader.int32();
                        break;
                    case 3:
                        message.fans = reader.int32();
                        break;
                    case 4:
                        message.baseFan = reader.int32();
                        break;
                    case 5:
                        if (!(message.extraFans && message.extraFans.length))
                            message.extraFans = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.extraFans.push(reader.int32());
                        } else
                            message.extraFans.push(reader.int32());
                        break;
                    case 6:
                        message.points = reader.int32();
                        break;
                    case 7:
                        if (!(message.lostInfos && message.lostInfos.length))
                            message.lostInfos = [];
                        message.lostInfos.push($root.scqp_eg.LostInfo.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.huIndex = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WinInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.WinInfo} WinInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WinInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WinInfo message.
             * @function verify
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WinInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.huType != null && message.hasOwnProperty("huType"))
                    if (!$util.isInteger(message.huType))
                        return "huType: integer expected";
                if (message.huCard != null && message.hasOwnProperty("huCard"))
                    if (!$util.isInteger(message.huCard))
                        return "huCard: integer expected";
                if (message.fans != null && message.hasOwnProperty("fans"))
                    if (!$util.isInteger(message.fans))
                        return "fans: integer expected";
                if (message.baseFan != null && message.hasOwnProperty("baseFan"))
                    if (!$util.isInteger(message.baseFan))
                        return "baseFan: integer expected";
                if (message.extraFans != null && message.hasOwnProperty("extraFans")) {
                    if (!Array.isArray(message.extraFans))
                        return "extraFans: array expected";
                    for (var i = 0; i < message.extraFans.length; ++i)
                        if (!$util.isInteger(message.extraFans[i]))
                            return "extraFans: integer[] expected";
                }
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.lostInfos != null && message.hasOwnProperty("lostInfos")) {
                    if (!Array.isArray(message.lostInfos))
                        return "lostInfos: array expected";
                    for (var i = 0; i < message.lostInfos.length; ++i) {
                        var error = $root.scqp_eg.LostInfo.verify(message.lostInfos[i]);
                        if (error)
                            return "lostInfos." + error;
                    }
                }
                if (message.huIndex != null && message.hasOwnProperty("huIndex"))
                    if (!$util.isInteger(message.huIndex))
                        return "huIndex: integer expected";
                return null;
            };
    
            /**
             * Creates a WinInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.WinInfo} WinInfo
             */
            WinInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.WinInfo)
                    return object;
                var message = new $root.scqp_eg.WinInfo();
                if (object.huType != null)
                    message.huType = object.huType | 0;
                if (object.huCard != null)
                    message.huCard = object.huCard | 0;
                if (object.fans != null)
                    message.fans = object.fans | 0;
                if (object.baseFan != null)
                    message.baseFan = object.baseFan | 0;
                if (object.extraFans) {
                    if (!Array.isArray(object.extraFans))
                        throw TypeError(".scqp_eg.WinInfo.extraFans: array expected");
                    message.extraFans = [];
                    for (var i = 0; i < object.extraFans.length; ++i)
                        message.extraFans[i] = object.extraFans[i] | 0;
                }
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.lostInfos) {
                    if (!Array.isArray(object.lostInfos))
                        throw TypeError(".scqp_eg.WinInfo.lostInfos: array expected");
                    message.lostInfos = [];
                    for (var i = 0; i < object.lostInfos.length; ++i) {
                        if (typeof object.lostInfos[i] !== "object")
                            throw TypeError(".scqp_eg.WinInfo.lostInfos: object expected");
                        message.lostInfos[i] = $root.scqp_eg.LostInfo.fromObject(object.lostInfos[i]);
                    }
                }
                if (object.huIndex != null)
                    message.huIndex = object.huIndex | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a WinInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.WinInfo
             * @static
             * @param {scqp_eg.WinInfo} message WinInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WinInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.extraFans = [];
                    object.lostInfos = [];
                }
                if (options.defaults) {
                    object.huType = 0;
                    object.huCard = 0;
                    object.fans = 0;
                    object.baseFan = 0;
                    object.points = 0;
                    object.huIndex = 0;
                }
                if (message.huType != null && message.hasOwnProperty("huType"))
                    object.huType = message.huType;
                if (message.huCard != null && message.hasOwnProperty("huCard"))
                    object.huCard = message.huCard;
                if (message.fans != null && message.hasOwnProperty("fans"))
                    object.fans = message.fans;
                if (message.baseFan != null && message.hasOwnProperty("baseFan"))
                    object.baseFan = message.baseFan;
                if (message.extraFans && message.extraFans.length) {
                    object.extraFans = [];
                    for (var j = 0; j < message.extraFans.length; ++j)
                        object.extraFans[j] = message.extraFans[j];
                }
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.lostInfos && message.lostInfos.length) {
                    object.lostInfos = [];
                    for (var j = 0; j < message.lostInfos.length; ++j)
                        object.lostInfos[j] = $root.scqp_eg.LostInfo.toObject(message.lostInfos[j], options);
                }
                if (message.huIndex != null && message.hasOwnProperty("huIndex"))
                    object.huIndex = message.huIndex;
                return object;
            };
    
            /**
             * Converts this WinInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.WinInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WinInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WinInfo;
        })();
    
        scqp_eg.EndInfo = (function() {
    
            /**
             * Properties of an EndInfo.
             * @memberof scqp_eg
             * @interface IEndInfo
             * @property {number|null} [uid] EndInfo uid
             * @property {Array.<number>|null} [cards] EndInfo cards
             * @property {number|null} [points] EndInfo points
             * @property {number|null} [totalPoints] EndInfo totalPoints
             * @property {number|null} [pokerType] EndInfo pokerType
             * @property {number|null} [zhuangZhu] EndInfo zhuangZhu
             * @property {number|null} [myZhu] EndInfo myZhu
             * @property {Array.<number>|null} [opCards] EndInfo opCards
             */
    
            /**
             * Constructs a new EndInfo.
             * @memberof scqp_eg
             * @classdesc Represents an EndInfo.
             * @implements IEndInfo
             * @constructor
             * @param {scqp_eg.IEndInfo=} [properties] Properties to set
             */
            function EndInfo(properties) {
                this.cards = [];
                this.opCards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EndInfo uid.
             * @member {number} uid
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.uid = 0;
    
            /**
             * EndInfo cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.cards = $util.emptyArray;
    
            /**
             * EndInfo points.
             * @member {number} points
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.points = 0;
    
            /**
             * EndInfo totalPoints.
             * @member {number} totalPoints
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.totalPoints = 0;
    
            /**
             * EndInfo pokerType.
             * @member {number} pokerType
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.pokerType = 0;
    
            /**
             * EndInfo zhuangZhu.
             * @member {number} zhuangZhu
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.zhuangZhu = 0;
    
            /**
             * EndInfo myZhu.
             * @member {number} myZhu
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.myZhu = 0;
    
            /**
             * EndInfo opCards.
             * @member {Array.<number>} opCards
             * @memberof scqp_eg.EndInfo
             * @instance
             */
            EndInfo.prototype.opCards = $util.emptyArray;
    
            /**
             * Creates a new EndInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {scqp_eg.IEndInfo=} [properties] Properties to set
             * @returns {scqp_eg.EndInfo} EndInfo instance
             */
            EndInfo.create = function create(properties) {
                return new EndInfo(properties);
            };
    
            /**
             * Encodes the specified EndInfo message. Does not implicitly {@link scqp_eg.EndInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {scqp_eg.IEndInfo} message EndInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cards[i]);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.points);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalPoints);
                if (message.pokerType != null && message.hasOwnProperty("pokerType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.pokerType);
                if (message.zhuangZhu != null && message.hasOwnProperty("zhuangZhu"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.zhuangZhu);
                if (message.myZhu != null && message.hasOwnProperty("myZhu"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.myZhu);
                if (message.opCards != null && message.opCards.length)
                    for (var i = 0; i < message.opCards.length; ++i)
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.opCards[i]);
                return writer;
            };
    
            /**
             * Encodes the specified EndInfo message, length delimited. Does not implicitly {@link scqp_eg.EndInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {scqp_eg.IEndInfo} message EndInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EndInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.EndInfo} EndInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.EndInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 3:
                        message.points = reader.int32();
                        break;
                    case 4:
                        message.totalPoints = reader.int32();
                        break;
                    case 5:
                        message.pokerType = reader.int32();
                        break;
                    case 6:
                        message.zhuangZhu = reader.int32();
                        break;
                    case 7:
                        message.myZhu = reader.int32();
                        break;
                    case 8:
                        if (!(message.opCards && message.opCards.length))
                            message.opCards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.opCards.push(reader.uint32());
                        } else
                            message.opCards.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EndInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.EndInfo} EndInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EndInfo message.
             * @function verify
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                if (message.pokerType != null && message.hasOwnProperty("pokerType"))
                    if (!$util.isInteger(message.pokerType))
                        return "pokerType: integer expected";
                if (message.zhuangZhu != null && message.hasOwnProperty("zhuangZhu"))
                    if (!$util.isInteger(message.zhuangZhu))
                        return "zhuangZhu: integer expected";
                if (message.myZhu != null && message.hasOwnProperty("myZhu"))
                    if (!$util.isInteger(message.myZhu))
                        return "myZhu: integer expected";
                if (message.opCards != null && message.hasOwnProperty("opCards")) {
                    if (!Array.isArray(message.opCards))
                        return "opCards: array expected";
                    for (var i = 0; i < message.opCards.length; ++i)
                        if (!$util.isInteger(message.opCards[i]))
                            return "opCards: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates an EndInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.EndInfo} EndInfo
             */
            EndInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.EndInfo)
                    return object;
                var message = new $root.scqp_eg.EndInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.EndInfo.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                if (object.pokerType != null)
                    message.pokerType = object.pokerType | 0;
                if (object.zhuangZhu != null)
                    message.zhuangZhu = object.zhuangZhu | 0;
                if (object.myZhu != null)
                    message.myZhu = object.myZhu | 0;
                if (object.opCards) {
                    if (!Array.isArray(object.opCards))
                        throw TypeError(".scqp_eg.EndInfo.opCards: array expected");
                    message.opCards = [];
                    for (var i = 0; i < object.opCards.length; ++i)
                        message.opCards[i] = object.opCards[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from an EndInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.EndInfo
             * @static
             * @param {scqp_eg.EndInfo} message EndInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.cards = [];
                    object.opCards = [];
                }
                if (options.defaults) {
                    object.uid = 0;
                    object.points = 0;
                    object.totalPoints = 0;
                    object.pokerType = 0;
                    object.zhuangZhu = 0;
                    object.myZhu = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                if (message.pokerType != null && message.hasOwnProperty("pokerType"))
                    object.pokerType = message.pokerType;
                if (message.zhuangZhu != null && message.hasOwnProperty("zhuangZhu"))
                    object.zhuangZhu = message.zhuangZhu;
                if (message.myZhu != null && message.hasOwnProperty("myZhu"))
                    object.myZhu = message.myZhu;
                if (message.opCards && message.opCards.length) {
                    object.opCards = [];
                    for (var j = 0; j < message.opCards.length; ++j)
                        object.opCards[j] = message.opCards[j];
                }
                return object;
            };
    
            /**
             * Converts this EndInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.EndInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EndInfo;
        })();
    
        scqp_eg.FinalInfo = (function() {
    
            /**
             * Properties of a FinalInfo.
             * @memberof scqp_eg
             * @interface IFinalInfo
             * @property {number|null} [uid] FinalInfo uid
             * @property {number|null} [winCount] FinalInfo winCount
             * @property {number|null} [loseCount] FinalInfo loseCount
             * @property {number|null} [maxWinPoint] FinalInfo maxWinPoint
             * @property {number|null} [maxPokerType] FinalInfo maxPokerType
             * @property {number|null} [totalPoints] FinalInfo totalPoints
             * @property {number|null} [drawCount] FinalInfo drawCount
             */
    
            /**
             * Constructs a new FinalInfo.
             * @memberof scqp_eg
             * @classdesc Represents a FinalInfo.
             * @implements IFinalInfo
             * @constructor
             * @param {scqp_eg.IFinalInfo=} [properties] Properties to set
             */
            function FinalInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FinalInfo uid.
             * @member {number} uid
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.uid = 0;
    
            /**
             * FinalInfo winCount.
             * @member {number} winCount
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.winCount = 0;
    
            /**
             * FinalInfo loseCount.
             * @member {number} loseCount
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.loseCount = 0;
    
            /**
             * FinalInfo maxWinPoint.
             * @member {number} maxWinPoint
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.maxWinPoint = 0;
    
            /**
             * FinalInfo maxPokerType.
             * @member {number} maxPokerType
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.maxPokerType = 0;
    
            /**
             * FinalInfo totalPoints.
             * @member {number} totalPoints
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.totalPoints = 0;
    
            /**
             * FinalInfo drawCount.
             * @member {number} drawCount
             * @memberof scqp_eg.FinalInfo
             * @instance
             */
            FinalInfo.prototype.drawCount = 0;
    
            /**
             * Creates a new FinalInfo instance using the specified properties.
             * @function create
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {scqp_eg.IFinalInfo=} [properties] Properties to set
             * @returns {scqp_eg.FinalInfo} FinalInfo instance
             */
            FinalInfo.create = function create(properties) {
                return new FinalInfo(properties);
            };
    
            /**
             * Encodes the specified FinalInfo message. Does not implicitly {@link scqp_eg.FinalInfo.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {scqp_eg.IFinalInfo} message FinalInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FinalInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.winCount != null && message.hasOwnProperty("winCount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.winCount);
                if (message.loseCount != null && message.hasOwnProperty("loseCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.loseCount);
                if (message.maxWinPoint != null && message.hasOwnProperty("maxWinPoint"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxWinPoint);
                if (message.maxPokerType != null && message.hasOwnProperty("maxPokerType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxPokerType);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.totalPoints);
                if (message.drawCount != null && message.hasOwnProperty("drawCount"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.drawCount);
                return writer;
            };
    
            /**
             * Encodes the specified FinalInfo message, length delimited. Does not implicitly {@link scqp_eg.FinalInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {scqp_eg.IFinalInfo} message FinalInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FinalInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FinalInfo message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.FinalInfo} FinalInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FinalInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.FinalInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.winCount = reader.uint32();
                        break;
                    case 3:
                        message.loseCount = reader.uint32();
                        break;
                    case 4:
                        message.maxWinPoint = reader.int32();
                        break;
                    case 5:
                        message.maxPokerType = reader.uint32();
                        break;
                    case 6:
                        message.totalPoints = reader.int32();
                        break;
                    case 7:
                        message.drawCount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FinalInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.FinalInfo} FinalInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FinalInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FinalInfo message.
             * @function verify
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FinalInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.winCount != null && message.hasOwnProperty("winCount"))
                    if (!$util.isInteger(message.winCount))
                        return "winCount: integer expected";
                if (message.loseCount != null && message.hasOwnProperty("loseCount"))
                    if (!$util.isInteger(message.loseCount))
                        return "loseCount: integer expected";
                if (message.maxWinPoint != null && message.hasOwnProperty("maxWinPoint"))
                    if (!$util.isInteger(message.maxWinPoint))
                        return "maxWinPoint: integer expected";
                if (message.maxPokerType != null && message.hasOwnProperty("maxPokerType"))
                    if (!$util.isInteger(message.maxPokerType))
                        return "maxPokerType: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                if (message.drawCount != null && message.hasOwnProperty("drawCount"))
                    if (!$util.isInteger(message.drawCount))
                        return "drawCount: integer expected";
                return null;
            };
    
            /**
             * Creates a FinalInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.FinalInfo} FinalInfo
             */
            FinalInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.FinalInfo)
                    return object;
                var message = new $root.scqp_eg.FinalInfo();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.winCount != null)
                    message.winCount = object.winCount >>> 0;
                if (object.loseCount != null)
                    message.loseCount = object.loseCount >>> 0;
                if (object.maxWinPoint != null)
                    message.maxWinPoint = object.maxWinPoint | 0;
                if (object.maxPokerType != null)
                    message.maxPokerType = object.maxPokerType >>> 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                if (object.drawCount != null)
                    message.drawCount = object.drawCount >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FinalInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.FinalInfo
             * @static
             * @param {scqp_eg.FinalInfo} message FinalInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FinalInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.winCount = 0;
                    object.loseCount = 0;
                    object.maxWinPoint = 0;
                    object.maxPokerType = 0;
                    object.totalPoints = 0;
                    object.drawCount = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.winCount != null && message.hasOwnProperty("winCount"))
                    object.winCount = message.winCount;
                if (message.loseCount != null && message.hasOwnProperty("loseCount"))
                    object.loseCount = message.loseCount;
                if (message.maxWinPoint != null && message.hasOwnProperty("maxWinPoint"))
                    object.maxWinPoint = message.maxWinPoint;
                if (message.maxPokerType != null && message.hasOwnProperty("maxPokerType"))
                    object.maxPokerType = message.maxPokerType;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                if (message.drawCount != null && message.hasOwnProperty("drawCount"))
                    object.drawCount = message.drawCount;
                return object;
            };
    
            /**
             * Converts this FinalInfo to JSON.
             * @function toJSON
             * @memberof scqp_eg.FinalInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FinalInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FinalInfo;
        })();
    
        scqp_eg.EndRsp = (function() {
    
            /**
             * Properties of an EndRsp.
             * @memberof scqp_eg
             * @interface IEndRsp
             * @property {common.IResult|null} [result] EndRsp result
             * @property {boolean|null} [lastRound] EndRsp lastRound
             * @property {Array.<scqp_eg.IEndInfo>|null} [endInfos] EndRsp endInfos
             * @property {Array.<scqp_eg.IFinalInfo>|null} [finalInfos] EndRsp finalInfos
             * @property {boolean|null} [destroy] EndRsp destroy
             * @property {number|null} [round] EndRsp round
             * @property {number|null} [totalRound] EndRsp totalRound
             * @property {number|null} [difen] EndRsp difen
             * @property {boolean|null} [zhuangWinAll] EndRsp zhuangWinAll
             * @property {boolean|null} [zhuangLose] EndRsp zhuangLose
             * @property {number|null} [masterId] EndRsp masterId
             * @property {number|null} [bankerId] EndRsp bankerId
             */
    
            /**
             * Constructs a new EndRsp.
             * @memberof scqp_eg
             * @classdesc Represents an EndRsp.
             * @implements IEndRsp
             * @constructor
             * @param {scqp_eg.IEndRsp=} [properties] Properties to set
             */
            function EndRsp(properties) {
                this.endInfos = [];
                this.finalInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EndRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.result = null;
    
            /**
             * EndRsp lastRound.
             * @member {boolean} lastRound
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.lastRound = false;
    
            /**
             * EndRsp endInfos.
             * @member {Array.<scqp_eg.IEndInfo>} endInfos
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.endInfos = $util.emptyArray;
    
            /**
             * EndRsp finalInfos.
             * @member {Array.<scqp_eg.IFinalInfo>} finalInfos
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.finalInfos = $util.emptyArray;
    
            /**
             * EndRsp destroy.
             * @member {boolean} destroy
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.destroy = false;
    
            /**
             * EndRsp round.
             * @member {number} round
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.round = 0;
    
            /**
             * EndRsp totalRound.
             * @member {number} totalRound
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.totalRound = 0;
    
            /**
             * EndRsp difen.
             * @member {number} difen
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.difen = 0;
    
            /**
             * EndRsp zhuangWinAll.
             * @member {boolean} zhuangWinAll
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.zhuangWinAll = false;
    
            /**
             * EndRsp zhuangLose.
             * @member {boolean} zhuangLose
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.zhuangLose = false;
    
            /**
             * EndRsp masterId.
             * @member {number} masterId
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.masterId = 0;
    
            /**
             * EndRsp bankerId.
             * @member {number} bankerId
             * @memberof scqp_eg.EndRsp
             * @instance
             */
            EndRsp.prototype.bankerId = 0;
    
            /**
             * Creates a new EndRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {scqp_eg.IEndRsp=} [properties] Properties to set
             * @returns {scqp_eg.EndRsp} EndRsp instance
             */
            EndRsp.create = function create(properties) {
                return new EndRsp(properties);
            };
    
            /**
             * Encodes the specified EndRsp message. Does not implicitly {@link scqp_eg.EndRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {scqp_eg.IEndRsp} message EndRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.lastRound != null && message.hasOwnProperty("lastRound"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.lastRound);
                if (message.endInfos != null && message.endInfos.length)
                    for (var i = 0; i < message.endInfos.length; ++i)
                        $root.scqp_eg.EndInfo.encode(message.endInfos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.finalInfos != null && message.finalInfos.length)
                    for (var i = 0; i < message.finalInfos.length; ++i)
                        $root.scqp_eg.FinalInfo.encode(message.finalInfos[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.destroy != null && message.hasOwnProperty("destroy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.destroy);
                if (message.round != null && message.hasOwnProperty("round"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.round);
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.totalRound);
                if (message.difen != null && message.hasOwnProperty("difen"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.difen);
                if (message.zhuangWinAll != null && message.hasOwnProperty("zhuangWinAll"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.zhuangWinAll);
                if (message.zhuangLose != null && message.hasOwnProperty("zhuangLose"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.zhuangLose);
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.masterId);
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.bankerId);
                return writer;
            };
    
            /**
             * Encodes the specified EndRsp message, length delimited. Does not implicitly {@link scqp_eg.EndRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {scqp_eg.IEndRsp} message EndRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EndRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.EndRsp} EndRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.EndRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.lastRound = reader.bool();
                        break;
                    case 3:
                        if (!(message.endInfos && message.endInfos.length))
                            message.endInfos = [];
                        message.endInfos.push($root.scqp_eg.EndInfo.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.finalInfos && message.finalInfos.length))
                            message.finalInfos = [];
                        message.finalInfos.push($root.scqp_eg.FinalInfo.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.destroy = reader.bool();
                        break;
                    case 6:
                        message.round = reader.int32();
                        break;
                    case 7:
                        message.totalRound = reader.int32();
                        break;
                    case 8:
                        message.difen = reader.int32();
                        break;
                    case 9:
                        message.zhuangWinAll = reader.bool();
                        break;
                    case 10:
                        message.zhuangLose = reader.bool();
                        break;
                    case 11:
                        message.masterId = reader.uint32();
                        break;
                    case 12:
                        message.bankerId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EndRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.EndRsp} EndRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EndRsp message.
             * @function verify
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.lastRound != null && message.hasOwnProperty("lastRound"))
                    if (typeof message.lastRound !== "boolean")
                        return "lastRound: boolean expected";
                if (message.endInfos != null && message.hasOwnProperty("endInfos")) {
                    if (!Array.isArray(message.endInfos))
                        return "endInfos: array expected";
                    for (var i = 0; i < message.endInfos.length; ++i) {
                        var error = $root.scqp_eg.EndInfo.verify(message.endInfos[i]);
                        if (error)
                            return "endInfos." + error;
                    }
                }
                if (message.finalInfos != null && message.hasOwnProperty("finalInfos")) {
                    if (!Array.isArray(message.finalInfos))
                        return "finalInfos: array expected";
                    for (var i = 0; i < message.finalInfos.length; ++i) {
                        var error = $root.scqp_eg.FinalInfo.verify(message.finalInfos[i]);
                        if (error)
                            return "finalInfos." + error;
                    }
                }
                if (message.destroy != null && message.hasOwnProperty("destroy"))
                    if (typeof message.destroy !== "boolean")
                        return "destroy: boolean expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    if (!$util.isInteger(message.totalRound))
                        return "totalRound: integer expected";
                if (message.difen != null && message.hasOwnProperty("difen"))
                    if (!$util.isInteger(message.difen))
                        return "difen: integer expected";
                if (message.zhuangWinAll != null && message.hasOwnProperty("zhuangWinAll"))
                    if (typeof message.zhuangWinAll !== "boolean")
                        return "zhuangWinAll: boolean expected";
                if (message.zhuangLose != null && message.hasOwnProperty("zhuangLose"))
                    if (typeof message.zhuangLose !== "boolean")
                        return "zhuangLose: boolean expected";
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    if (!$util.isInteger(message.masterId))
                        return "masterId: integer expected";
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    if (!$util.isInteger(message.bankerId))
                        return "bankerId: integer expected";
                return null;
            };
    
            /**
             * Creates an EndRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.EndRsp} EndRsp
             */
            EndRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.EndRsp)
                    return object;
                var message = new $root.scqp_eg.EndRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.EndRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.lastRound != null)
                    message.lastRound = Boolean(object.lastRound);
                if (object.endInfos) {
                    if (!Array.isArray(object.endInfos))
                        throw TypeError(".scqp_eg.EndRsp.endInfos: array expected");
                    message.endInfos = [];
                    for (var i = 0; i < object.endInfos.length; ++i) {
                        if (typeof object.endInfos[i] !== "object")
                            throw TypeError(".scqp_eg.EndRsp.endInfos: object expected");
                        message.endInfos[i] = $root.scqp_eg.EndInfo.fromObject(object.endInfos[i]);
                    }
                }
                if (object.finalInfos) {
                    if (!Array.isArray(object.finalInfos))
                        throw TypeError(".scqp_eg.EndRsp.finalInfos: array expected");
                    message.finalInfos = [];
                    for (var i = 0; i < object.finalInfos.length; ++i) {
                        if (typeof object.finalInfos[i] !== "object")
                            throw TypeError(".scqp_eg.EndRsp.finalInfos: object expected");
                        message.finalInfos[i] = $root.scqp_eg.FinalInfo.fromObject(object.finalInfos[i]);
                    }
                }
                if (object.destroy != null)
                    message.destroy = Boolean(object.destroy);
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.totalRound != null)
                    message.totalRound = object.totalRound | 0;
                if (object.difen != null)
                    message.difen = object.difen | 0;
                if (object.zhuangWinAll != null)
                    message.zhuangWinAll = Boolean(object.zhuangWinAll);
                if (object.zhuangLose != null)
                    message.zhuangLose = Boolean(object.zhuangLose);
                if (object.masterId != null)
                    message.masterId = object.masterId >>> 0;
                if (object.bankerId != null)
                    message.bankerId = object.bankerId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an EndRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.EndRsp
             * @static
             * @param {scqp_eg.EndRsp} message EndRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.endInfos = [];
                    object.finalInfos = [];
                }
                if (options.defaults) {
                    object.result = null;
                    object.lastRound = false;
                    object.destroy = false;
                    object.round = 0;
                    object.totalRound = 0;
                    object.difen = 0;
                    object.zhuangWinAll = false;
                    object.zhuangLose = false;
                    object.masterId = 0;
                    object.bankerId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.lastRound != null && message.hasOwnProperty("lastRound"))
                    object.lastRound = message.lastRound;
                if (message.endInfos && message.endInfos.length) {
                    object.endInfos = [];
                    for (var j = 0; j < message.endInfos.length; ++j)
                        object.endInfos[j] = $root.scqp_eg.EndInfo.toObject(message.endInfos[j], options);
                }
                if (message.finalInfos && message.finalInfos.length) {
                    object.finalInfos = [];
                    for (var j = 0; j < message.finalInfos.length; ++j)
                        object.finalInfos[j] = $root.scqp_eg.FinalInfo.toObject(message.finalInfos[j], options);
                }
                if (message.destroy != null && message.hasOwnProperty("destroy"))
                    object.destroy = message.destroy;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.totalRound != null && message.hasOwnProperty("totalRound"))
                    object.totalRound = message.totalRound;
                if (message.difen != null && message.hasOwnProperty("difen"))
                    object.difen = message.difen;
                if (message.zhuangWinAll != null && message.hasOwnProperty("zhuangWinAll"))
                    object.zhuangWinAll = message.zhuangWinAll;
                if (message.zhuangLose != null && message.hasOwnProperty("zhuangLose"))
                    object.zhuangLose = message.zhuangLose;
                if (message.masterId != null && message.hasOwnProperty("masterId"))
                    object.masterId = message.masterId;
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    object.bankerId = message.bankerId;
                return object;
            };
    
            /**
             * Converts this EndRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.EndRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EndRsp;
        })();
    
        scqp_eg.Points = (function() {
    
            /**
             * Properties of a Points.
             * @memberof scqp_eg
             * @interface IPoints
             * @property {number|null} [uid] Points uid
             * @property {number|null} [points] Points points
             * @property {number|null} [totalPoints] Points totalPoints
             */
    
            /**
             * Constructs a new Points.
             * @memberof scqp_eg
             * @classdesc Represents a Points.
             * @implements IPoints
             * @constructor
             * @param {scqp_eg.IPoints=} [properties] Properties to set
             */
            function Points(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Points uid.
             * @member {number} uid
             * @memberof scqp_eg.Points
             * @instance
             */
            Points.prototype.uid = 0;
    
            /**
             * Points points.
             * @member {number} points
             * @memberof scqp_eg.Points
             * @instance
             */
            Points.prototype.points = 0;
    
            /**
             * Points totalPoints.
             * @member {number} totalPoints
             * @memberof scqp_eg.Points
             * @instance
             */
            Points.prototype.totalPoints = 0;
    
            /**
             * Creates a new Points instance using the specified properties.
             * @function create
             * @memberof scqp_eg.Points
             * @static
             * @param {scqp_eg.IPoints=} [properties] Properties to set
             * @returns {scqp_eg.Points} Points instance
             */
            Points.create = function create(properties) {
                return new Points(properties);
            };
    
            /**
             * Encodes the specified Points message. Does not implicitly {@link scqp_eg.Points.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.Points
             * @static
             * @param {scqp_eg.IPoints} message Points message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Points.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uid != null && message.hasOwnProperty("uid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
                if (message.points != null && message.hasOwnProperty("points"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.points);
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalPoints);
                return writer;
            };
    
            /**
             * Encodes the specified Points message, length delimited. Does not implicitly {@link scqp_eg.Points.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.Points
             * @static
             * @param {scqp_eg.IPoints} message Points message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Points.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Points message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.Points
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.Points} Points
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Points.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.Points();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uid = reader.uint32();
                        break;
                    case 2:
                        message.points = reader.int32();
                        break;
                    case 3:
                        message.totalPoints = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Points message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.Points
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.Points} Points
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Points.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Points message.
             * @function verify
             * @memberof scqp_eg.Points
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Points.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uid != null && message.hasOwnProperty("uid"))
                    if (!$util.isInteger(message.uid))
                        return "uid: integer expected";
                if (message.points != null && message.hasOwnProperty("points"))
                    if (!$util.isInteger(message.points))
                        return "points: integer expected";
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    if (!$util.isInteger(message.totalPoints))
                        return "totalPoints: integer expected";
                return null;
            };
    
            /**
             * Creates a Points message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.Points
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.Points} Points
             */
            Points.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.Points)
                    return object;
                var message = new $root.scqp_eg.Points();
                if (object.uid != null)
                    message.uid = object.uid >>> 0;
                if (object.points != null)
                    message.points = object.points | 0;
                if (object.totalPoints != null)
                    message.totalPoints = object.totalPoints | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Points message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.Points
             * @static
             * @param {scqp_eg.Points} message Points
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Points.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uid = 0;
                    object.points = 0;
                    object.totalPoints = 0;
                }
                if (message.uid != null && message.hasOwnProperty("uid"))
                    object.uid = message.uid;
                if (message.points != null && message.hasOwnProperty("points"))
                    object.points = message.points;
                if (message.totalPoints != null && message.hasOwnProperty("totalPoints"))
                    object.totalPoints = message.totalPoints;
                return object;
            };
    
            /**
             * Converts this Points to JSON.
             * @function toJSON
             * @memberof scqp_eg.Points
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Points.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Points;
        })();
    
        scqp_eg.PointsRsp = (function() {
    
            /**
             * Properties of a PointsRsp.
             * @memberof scqp_eg
             * @interface IPointsRsp
             * @property {common.IResult|null} [result] PointsRsp result
             * @property {number|null} [reason] PointsRsp reason
             * @property {Array.<scqp_eg.IPoints>|null} [points] PointsRsp points
             */
    
            /**
             * Constructs a new PointsRsp.
             * @memberof scqp_eg
             * @classdesc Represents a PointsRsp.
             * @implements IPointsRsp
             * @constructor
             * @param {scqp_eg.IPointsRsp=} [properties] Properties to set
             */
            function PointsRsp(properties) {
                this.points = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PointsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.PointsRsp
             * @instance
             */
            PointsRsp.prototype.result = null;
    
            /**
             * PointsRsp reason.
             * @member {number} reason
             * @memberof scqp_eg.PointsRsp
             * @instance
             */
            PointsRsp.prototype.reason = 0;
    
            /**
             * PointsRsp points.
             * @member {Array.<scqp_eg.IPoints>} points
             * @memberof scqp_eg.PointsRsp
             * @instance
             */
            PointsRsp.prototype.points = $util.emptyArray;
    
            /**
             * Creates a new PointsRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {scqp_eg.IPointsRsp=} [properties] Properties to set
             * @returns {scqp_eg.PointsRsp} PointsRsp instance
             */
            PointsRsp.create = function create(properties) {
                return new PointsRsp(properties);
            };
    
            /**
             * Encodes the specified PointsRsp message. Does not implicitly {@link scqp_eg.PointsRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {scqp_eg.IPointsRsp} message PointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.reason != null && message.hasOwnProperty("reason"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.reason);
                if (message.points != null && message.points.length)
                    for (var i = 0; i < message.points.length; ++i)
                        $root.scqp_eg.Points.encode(message.points[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified PointsRsp message, length delimited. Does not implicitly {@link scqp_eg.PointsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {scqp_eg.IPointsRsp} message PointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PointsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PointsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.PointsRsp} PointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.PointsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.reason = reader.uint32();
                        break;
                    case 3:
                        if (!(message.points && message.points.length))
                            message.points = [];
                        message.points.push($root.scqp_eg.Points.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PointsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.PointsRsp} PointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PointsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PointsRsp message.
             * @function verify
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PointsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.reason != null && message.hasOwnProperty("reason"))
                    if (!$util.isInteger(message.reason))
                        return "reason: integer expected";
                if (message.points != null && message.hasOwnProperty("points")) {
                    if (!Array.isArray(message.points))
                        return "points: array expected";
                    for (var i = 0; i < message.points.length; ++i) {
                        var error = $root.scqp_eg.Points.verify(message.points[i]);
                        if (error)
                            return "points." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a PointsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.PointsRsp} PointsRsp
             */
            PointsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.PointsRsp)
                    return object;
                var message = new $root.scqp_eg.PointsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.PointsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.reason != null)
                    message.reason = object.reason >>> 0;
                if (object.points) {
                    if (!Array.isArray(object.points))
                        throw TypeError(".scqp_eg.PointsRsp.points: array expected");
                    message.points = [];
                    for (var i = 0; i < object.points.length; ++i) {
                        if (typeof object.points[i] !== "object")
                            throw TypeError(".scqp_eg.PointsRsp.points: object expected");
                        message.points[i] = $root.scqp_eg.Points.fromObject(object.points[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a PointsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.PointsRsp
             * @static
             * @param {scqp_eg.PointsRsp} message PointsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PointsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.points = [];
                if (options.defaults) {
                    object.result = null;
                    object.reason = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.reason != null && message.hasOwnProperty("reason"))
                    object.reason = message.reason;
                if (message.points && message.points.length) {
                    object.points = [];
                    for (var j = 0; j < message.points.length; ++j)
                        object.points[j] = $root.scqp_eg.Points.toObject(message.points[j], options);
                }
                return object;
            };
    
            /**
             * Converts this PointsRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.PointsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PointsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PointsRsp;
        })();
    
        scqp_eg.DetailPointsReq = (function() {
    
            /**
             * Properties of a DetailPointsReq.
             * @memberof scqp_eg
             * @interface IDetailPointsReq
             * @property {common.IRequest|null} [request] DetailPointsReq request
             */
    
            /**
             * Constructs a new DetailPointsReq.
             * @memberof scqp_eg
             * @classdesc Represents a DetailPointsReq.
             * @implements IDetailPointsReq
             * @constructor
             * @param {scqp_eg.IDetailPointsReq=} [properties] Properties to set
             */
            function DetailPointsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DetailPointsReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.DetailPointsReq
             * @instance
             */
            DetailPointsReq.prototype.request = null;
    
            /**
             * Creates a new DetailPointsReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {scqp_eg.IDetailPointsReq=} [properties] Properties to set
             * @returns {scqp_eg.DetailPointsReq} DetailPointsReq instance
             */
            DetailPointsReq.create = function create(properties) {
                return new DetailPointsReq(properties);
            };
    
            /**
             * Encodes the specified DetailPointsReq message. Does not implicitly {@link scqp_eg.DetailPointsReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {scqp_eg.IDetailPointsReq} message DetailPointsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailPointsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DetailPointsReq message, length delimited. Does not implicitly {@link scqp_eg.DetailPointsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {scqp_eg.IDetailPointsReq} message DetailPointsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailPointsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DetailPointsReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.DetailPointsReq} DetailPointsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailPointsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.DetailPointsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DetailPointsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.DetailPointsReq} DetailPointsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailPointsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DetailPointsReq message.
             * @function verify
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DetailPointsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a DetailPointsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.DetailPointsReq} DetailPointsReq
             */
            DetailPointsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.DetailPointsReq)
                    return object;
                var message = new $root.scqp_eg.DetailPointsReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.DetailPointsReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DetailPointsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.DetailPointsReq
             * @static
             * @param {scqp_eg.DetailPointsReq} message DetailPointsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DetailPointsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this DetailPointsReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.DetailPointsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DetailPointsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DetailPointsReq;
        })();
    
        scqp_eg.DetailPointsRsp = (function() {
    
            /**
             * Properties of a DetailPointsRsp.
             * @memberof scqp_eg
             * @interface IDetailPointsRsp
             * @property {common.IResult|null} [result] DetailPointsRsp result
             * @property {Array.<scqp_eg.IEndInfo>|null} [endInfos] DetailPointsRsp endInfos
             */
    
            /**
             * Constructs a new DetailPointsRsp.
             * @memberof scqp_eg
             * @classdesc Represents a DetailPointsRsp.
             * @implements IDetailPointsRsp
             * @constructor
             * @param {scqp_eg.IDetailPointsRsp=} [properties] Properties to set
             */
            function DetailPointsRsp(properties) {
                this.endInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DetailPointsRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.DetailPointsRsp
             * @instance
             */
            DetailPointsRsp.prototype.result = null;
    
            /**
             * DetailPointsRsp endInfos.
             * @member {Array.<scqp_eg.IEndInfo>} endInfos
             * @memberof scqp_eg.DetailPointsRsp
             * @instance
             */
            DetailPointsRsp.prototype.endInfos = $util.emptyArray;
    
            /**
             * Creates a new DetailPointsRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {scqp_eg.IDetailPointsRsp=} [properties] Properties to set
             * @returns {scqp_eg.DetailPointsRsp} DetailPointsRsp instance
             */
            DetailPointsRsp.create = function create(properties) {
                return new DetailPointsRsp(properties);
            };
    
            /**
             * Encodes the specified DetailPointsRsp message. Does not implicitly {@link scqp_eg.DetailPointsRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {scqp_eg.IDetailPointsRsp} message DetailPointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailPointsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.endInfos != null && message.endInfos.length)
                    for (var i = 0; i < message.endInfos.length; ++i)
                        $root.scqp_eg.EndInfo.encode(message.endInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DetailPointsRsp message, length delimited. Does not implicitly {@link scqp_eg.DetailPointsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {scqp_eg.IDetailPointsRsp} message DetailPointsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailPointsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DetailPointsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.DetailPointsRsp} DetailPointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailPointsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.DetailPointsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.endInfos && message.endInfos.length))
                            message.endInfos = [];
                        message.endInfos.push($root.scqp_eg.EndInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DetailPointsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.DetailPointsRsp} DetailPointsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailPointsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DetailPointsRsp message.
             * @function verify
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DetailPointsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.endInfos != null && message.hasOwnProperty("endInfos")) {
                    if (!Array.isArray(message.endInfos))
                        return "endInfos: array expected";
                    for (var i = 0; i < message.endInfos.length; ++i) {
                        var error = $root.scqp_eg.EndInfo.verify(message.endInfos[i]);
                        if (error)
                            return "endInfos." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a DetailPointsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.DetailPointsRsp} DetailPointsRsp
             */
            DetailPointsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.DetailPointsRsp)
                    return object;
                var message = new $root.scqp_eg.DetailPointsRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.DetailPointsRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.endInfos) {
                    if (!Array.isArray(object.endInfos))
                        throw TypeError(".scqp_eg.DetailPointsRsp.endInfos: array expected");
                    message.endInfos = [];
                    for (var i = 0; i < object.endInfos.length; ++i) {
                        if (typeof object.endInfos[i] !== "object")
                            throw TypeError(".scqp_eg.DetailPointsRsp.endInfos: object expected");
                        message.endInfos[i] = $root.scqp_eg.EndInfo.fromObject(object.endInfos[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DetailPointsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.DetailPointsRsp
             * @static
             * @param {scqp_eg.DetailPointsRsp} message DetailPointsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DetailPointsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.endInfos = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.endInfos && message.endInfos.length) {
                    object.endInfos = [];
                    for (var j = 0; j < message.endInfos.length; ++j)
                        object.endInfos[j] = $root.scqp_eg.EndInfo.toObject(message.endInfos[j], options);
                }
                return object;
            };
    
            /**
             * Converts this DetailPointsRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.DetailPointsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DetailPointsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DetailPointsRsp;
        })();
    
        scqp_eg.ZhuangJiaRsp = (function() {
    
            /**
             * Properties of a ZhuangJiaRsp.
             * @memberof scqp_eg
             * @interface IZhuangJiaRsp
             * @property {common.IResult|null} [result] ZhuangJiaRsp result
             * @property {number|null} [bankerId] ZhuangJiaRsp bankerId
             */
    
            /**
             * Constructs a new ZhuangJiaRsp.
             * @memberof scqp_eg
             * @classdesc Represents a ZhuangJiaRsp.
             * @implements IZhuangJiaRsp
             * @constructor
             * @param {scqp_eg.IZhuangJiaRsp=} [properties] Properties to set
             */
            function ZhuangJiaRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ZhuangJiaRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.ZhuangJiaRsp
             * @instance
             */
            ZhuangJiaRsp.prototype.result = null;
    
            /**
             * ZhuangJiaRsp bankerId.
             * @member {number} bankerId
             * @memberof scqp_eg.ZhuangJiaRsp
             * @instance
             */
            ZhuangJiaRsp.prototype.bankerId = 0;
    
            /**
             * Creates a new ZhuangJiaRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {scqp_eg.IZhuangJiaRsp=} [properties] Properties to set
             * @returns {scqp_eg.ZhuangJiaRsp} ZhuangJiaRsp instance
             */
            ZhuangJiaRsp.create = function create(properties) {
                return new ZhuangJiaRsp(properties);
            };
    
            /**
             * Encodes the specified ZhuangJiaRsp message. Does not implicitly {@link scqp_eg.ZhuangJiaRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {scqp_eg.IZhuangJiaRsp} message ZhuangJiaRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ZhuangJiaRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.bankerId);
                return writer;
            };
    
            /**
             * Encodes the specified ZhuangJiaRsp message, length delimited. Does not implicitly {@link scqp_eg.ZhuangJiaRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {scqp_eg.IZhuangJiaRsp} message ZhuangJiaRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ZhuangJiaRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ZhuangJiaRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.ZhuangJiaRsp} ZhuangJiaRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ZhuangJiaRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.ZhuangJiaRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.bankerId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ZhuangJiaRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.ZhuangJiaRsp} ZhuangJiaRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ZhuangJiaRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ZhuangJiaRsp message.
             * @function verify
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ZhuangJiaRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    if (!$util.isInteger(message.bankerId))
                        return "bankerId: integer expected";
                return null;
            };
    
            /**
             * Creates a ZhuangJiaRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.ZhuangJiaRsp} ZhuangJiaRsp
             */
            ZhuangJiaRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.ZhuangJiaRsp)
                    return object;
                var message = new $root.scqp_eg.ZhuangJiaRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.ZhuangJiaRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.bankerId != null)
                    message.bankerId = object.bankerId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ZhuangJiaRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.ZhuangJiaRsp
             * @static
             * @param {scqp_eg.ZhuangJiaRsp} message ZhuangJiaRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ZhuangJiaRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.bankerId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.bankerId != null && message.hasOwnProperty("bankerId"))
                    object.bankerId = message.bankerId;
                return object;
            };
    
            /**
             * Converts this ZhuangJiaRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.ZhuangJiaRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ZhuangJiaRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ZhuangJiaRsp;
        })();
    
        scqp_eg.TimerRsp = (function() {
    
            /**
             * Properties of a TimerRsp.
             * @memberof scqp_eg
             * @interface ITimerRsp
             * @property {common.IResult|null} [result] TimerRsp result
             * @property {number|null} [time] TimerRsp time
             */
    
            /**
             * Constructs a new TimerRsp.
             * @memberof scqp_eg
             * @classdesc Represents a TimerRsp.
             * @implements ITimerRsp
             * @constructor
             * @param {scqp_eg.ITimerRsp=} [properties] Properties to set
             */
            function TimerRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TimerRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.TimerRsp
             * @instance
             */
            TimerRsp.prototype.result = null;
    
            /**
             * TimerRsp time.
             * @member {number} time
             * @memberof scqp_eg.TimerRsp
             * @instance
             */
            TimerRsp.prototype.time = 0;
    
            /**
             * Creates a new TimerRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {scqp_eg.ITimerRsp=} [properties] Properties to set
             * @returns {scqp_eg.TimerRsp} TimerRsp instance
             */
            TimerRsp.create = function create(properties) {
                return new TimerRsp(properties);
            };
    
            /**
             * Encodes the specified TimerRsp message. Does not implicitly {@link scqp_eg.TimerRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {scqp_eg.ITimerRsp} message TimerRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimerRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.time != null && message.hasOwnProperty("time"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                return writer;
            };
    
            /**
             * Encodes the specified TimerRsp message, length delimited. Does not implicitly {@link scqp_eg.TimerRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {scqp_eg.ITimerRsp} message TimerRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimerRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TimerRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.TimerRsp} TimerRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimerRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.TimerRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.time = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TimerRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.TimerRsp} TimerRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimerRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TimerRsp message.
             * @function verify
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimerRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                return null;
            };
    
            /**
             * Creates a TimerRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.TimerRsp} TimerRsp
             */
            TimerRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.TimerRsp)
                    return object;
                var message = new $root.scqp_eg.TimerRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.TimerRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.time != null)
                    message.time = object.time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a TimerRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.TimerRsp
             * @static
             * @param {scqp_eg.TimerRsp} message TimerRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimerRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.time = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                return object;
            };
    
            /**
             * Converts this TimerRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.TimerRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimerRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TimerRsp;
        })();
    
        scqp_eg.RoundRecordReq = (function() {
    
            /**
             * Properties of a RoundRecordReq.
             * @memberof scqp_eg
             * @interface IRoundRecordReq
             * @property {common.IRequest|null} [request] RoundRecordReq request
             */
    
            /**
             * Constructs a new RoundRecordReq.
             * @memberof scqp_eg
             * @classdesc Represents a RoundRecordReq.
             * @implements IRoundRecordReq
             * @constructor
             * @param {scqp_eg.IRoundRecordReq=} [properties] Properties to set
             */
            function RoundRecordReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoundRecordReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.RoundRecordReq
             * @instance
             */
            RoundRecordReq.prototype.request = null;
    
            /**
             * Creates a new RoundRecordReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {scqp_eg.IRoundRecordReq=} [properties] Properties to set
             * @returns {scqp_eg.RoundRecordReq} RoundRecordReq instance
             */
            RoundRecordReq.create = function create(properties) {
                return new RoundRecordReq(properties);
            };
    
            /**
             * Encodes the specified RoundRecordReq message. Does not implicitly {@link scqp_eg.RoundRecordReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {scqp_eg.IRoundRecordReq} message RoundRecordReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundRecordReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RoundRecordReq message, length delimited. Does not implicitly {@link scqp_eg.RoundRecordReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {scqp_eg.IRoundRecordReq} message RoundRecordReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundRecordReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoundRecordReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.RoundRecordReq} RoundRecordReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundRecordReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.RoundRecordReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoundRecordReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.RoundRecordReq} RoundRecordReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundRecordReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoundRecordReq message.
             * @function verify
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoundRecordReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a RoundRecordReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.RoundRecordReq} RoundRecordReq
             */
            RoundRecordReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.RoundRecordReq)
                    return object;
                var message = new $root.scqp_eg.RoundRecordReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.RoundRecordReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RoundRecordReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.RoundRecordReq
             * @static
             * @param {scqp_eg.RoundRecordReq} message RoundRecordReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoundRecordReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this RoundRecordReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.RoundRecordReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoundRecordReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoundRecordReq;
        })();
    
        scqp_eg.RoundRecordRsp = (function() {
    
            /**
             * Properties of a RoundRecordRsp.
             * @memberof scqp_eg
             * @interface IRoundRecordRsp
             * @property {common.IResult|null} [result] RoundRecordRsp result
             * @property {Array.<scqp_eg.IEndRsp>|null} [record] RoundRecordRsp record
             */
    
            /**
             * Constructs a new RoundRecordRsp.
             * @memberof scqp_eg
             * @classdesc Represents a RoundRecordRsp.
             * @implements IRoundRecordRsp
             * @constructor
             * @param {scqp_eg.IRoundRecordRsp=} [properties] Properties to set
             */
            function RoundRecordRsp(properties) {
                this.record = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RoundRecordRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.RoundRecordRsp
             * @instance
             */
            RoundRecordRsp.prototype.result = null;
    
            /**
             * RoundRecordRsp record.
             * @member {Array.<scqp_eg.IEndRsp>} record
             * @memberof scqp_eg.RoundRecordRsp
             * @instance
             */
            RoundRecordRsp.prototype.record = $util.emptyArray;
    
            /**
             * Creates a new RoundRecordRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {scqp_eg.IRoundRecordRsp=} [properties] Properties to set
             * @returns {scqp_eg.RoundRecordRsp} RoundRecordRsp instance
             */
            RoundRecordRsp.create = function create(properties) {
                return new RoundRecordRsp(properties);
            };
    
            /**
             * Encodes the specified RoundRecordRsp message. Does not implicitly {@link scqp_eg.RoundRecordRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {scqp_eg.IRoundRecordRsp} message RoundRecordRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundRecordRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.record != null && message.record.length)
                    for (var i = 0; i < message.record.length; ++i)
                        $root.scqp_eg.EndRsp.encode(message.record[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified RoundRecordRsp message, length delimited. Does not implicitly {@link scqp_eg.RoundRecordRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {scqp_eg.IRoundRecordRsp} message RoundRecordRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundRecordRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RoundRecordRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.RoundRecordRsp} RoundRecordRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundRecordRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.RoundRecordRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.record && message.record.length))
                            message.record = [];
                        message.record.push($root.scqp_eg.EndRsp.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RoundRecordRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.RoundRecordRsp} RoundRecordRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundRecordRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RoundRecordRsp message.
             * @function verify
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoundRecordRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.record != null && message.hasOwnProperty("record")) {
                    if (!Array.isArray(message.record))
                        return "record: array expected";
                    for (var i = 0; i < message.record.length; ++i) {
                        var error = $root.scqp_eg.EndRsp.verify(message.record[i]);
                        if (error)
                            return "record." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a RoundRecordRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.RoundRecordRsp} RoundRecordRsp
             */
            RoundRecordRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.RoundRecordRsp)
                    return object;
                var message = new $root.scqp_eg.RoundRecordRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.RoundRecordRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.record) {
                    if (!Array.isArray(object.record))
                        throw TypeError(".scqp_eg.RoundRecordRsp.record: array expected");
                    message.record = [];
                    for (var i = 0; i < object.record.length; ++i) {
                        if (typeof object.record[i] !== "object")
                            throw TypeError(".scqp_eg.RoundRecordRsp.record: object expected");
                        message.record[i] = $root.scqp_eg.EndRsp.fromObject(object.record[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a RoundRecordRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.RoundRecordRsp
             * @static
             * @param {scqp_eg.RoundRecordRsp} message RoundRecordRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoundRecordRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.record = [];
                if (options.defaults)
                    object.result = null;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.record && message.record.length) {
                    object.record = [];
                    for (var j = 0; j < message.record.length; ++j)
                        object.record[j] = $root.scqp_eg.EndRsp.toObject(message.record[j], options);
                }
                return object;
            };
    
            /**
             * Converts this RoundRecordRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.RoundRecordRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoundRecordRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RoundRecordRsp;
        })();
    
        scqp_eg.GameStateReq = (function() {
    
            /**
             * Properties of a GameStateReq.
             * @memberof scqp_eg
             * @interface IGameStateReq
             * @property {common.IRequest|null} [request] GameStateReq request
             */
    
            /**
             * Constructs a new GameStateReq.
             * @memberof scqp_eg
             * @classdesc Represents a GameStateReq.
             * @implements IGameStateReq
             * @constructor
             * @param {scqp_eg.IGameStateReq=} [properties] Properties to set
             */
            function GameStateReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameStateReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.GameStateReq
             * @instance
             */
            GameStateReq.prototype.request = null;
    
            /**
             * Creates a new GameStateReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {scqp_eg.IGameStateReq=} [properties] Properties to set
             * @returns {scqp_eg.GameStateReq} GameStateReq instance
             */
            GameStateReq.create = function create(properties) {
                return new GameStateReq(properties);
            };
    
            /**
             * Encodes the specified GameStateReq message. Does not implicitly {@link scqp_eg.GameStateReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {scqp_eg.IGameStateReq} message GameStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameStateReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified GameStateReq message, length delimited. Does not implicitly {@link scqp_eg.GameStateReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {scqp_eg.IGameStateReq} message GameStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameStateReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameStateReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GameStateReq} GameStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameStateReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GameStateReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameStateReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GameStateReq} GameStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameStateReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameStateReq message.
             * @function verify
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameStateReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                return null;
            };
    
            /**
             * Creates a GameStateReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GameStateReq} GameStateReq
             */
            GameStateReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GameStateReq)
                    return object;
                var message = new $root.scqp_eg.GameStateReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.GameStateReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a GameStateReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GameStateReq
             * @static
             * @param {scqp_eg.GameStateReq} message GameStateReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameStateReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.request = null;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                return object;
            };
    
            /**
             * Converts this GameStateReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.GameStateReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameStateReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameStateReq;
        })();
    
        scqp_eg.GameStateRsp = (function() {
    
            /**
             * Properties of a GameStateRsp.
             * @memberof scqp_eg
             * @interface IGameStateRsp
             * @property {common.IResult|null} [result] GameStateRsp result
             * @property {scqp_eg.IGameLoginRsp|null} [state] GameStateRsp state
             */
    
            /**
             * Constructs a new GameStateRsp.
             * @memberof scqp_eg
             * @classdesc Represents a GameStateRsp.
             * @implements IGameStateRsp
             * @constructor
             * @param {scqp_eg.IGameStateRsp=} [properties] Properties to set
             */
            function GameStateRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GameStateRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.GameStateRsp
             * @instance
             */
            GameStateRsp.prototype.result = null;
    
            /**
             * GameStateRsp state.
             * @member {scqp_eg.IGameLoginRsp|null|undefined} state
             * @memberof scqp_eg.GameStateRsp
             * @instance
             */
            GameStateRsp.prototype.state = null;
    
            /**
             * Creates a new GameStateRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {scqp_eg.IGameStateRsp=} [properties] Properties to set
             * @returns {scqp_eg.GameStateRsp} GameStateRsp instance
             */
            GameStateRsp.create = function create(properties) {
                return new GameStateRsp(properties);
            };
    
            /**
             * Encodes the specified GameStateRsp message. Does not implicitly {@link scqp_eg.GameStateRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {scqp_eg.IGameStateRsp} message GameStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameStateRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.state != null && message.hasOwnProperty("state"))
                    $root.scqp_eg.GameLoginRsp.encode(message.state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified GameStateRsp message, length delimited. Does not implicitly {@link scqp_eg.GameStateRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {scqp_eg.IGameStateRsp} message GameStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameStateRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GameStateRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.GameStateRsp} GameStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameStateRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.GameStateRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.state = $root.scqp_eg.GameLoginRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GameStateRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.GameStateRsp} GameStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameStateRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GameStateRsp message.
             * @function verify
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameStateRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.state != null && message.hasOwnProperty("state")) {
                    var error = $root.scqp_eg.GameLoginRsp.verify(message.state);
                    if (error)
                        return "state." + error;
                }
                return null;
            };
    
            /**
             * Creates a GameStateRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.GameStateRsp} GameStateRsp
             */
            GameStateRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.GameStateRsp)
                    return object;
                var message = new $root.scqp_eg.GameStateRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.GameStateRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".scqp_eg.GameStateRsp.state: object expected");
                    message.state = $root.scqp_eg.GameLoginRsp.fromObject(object.state);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a GameStateRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.GameStateRsp
             * @static
             * @param {scqp_eg.GameStateRsp} message GameStateRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameStateRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.state = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = $root.scqp_eg.GameLoginRsp.toObject(message.state, options);
                return object;
            };
    
            /**
             * Converts this GameStateRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.GameStateRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameStateRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GameStateRsp;
        })();
    
        scqp_eg.XiaZhuReq = (function() {
    
            /**
             * Properties of a XiaZhuReq.
             * @memberof scqp_eg
             * @interface IXiaZhuReq
             * @property {common.IRequest|null} [request] XiaZhuReq request
             * @property {number|null} [xiaZhu] XiaZhuReq xiaZhu
             */
    
            /**
             * Constructs a new XiaZhuReq.
             * @memberof scqp_eg
             * @classdesc Represents a XiaZhuReq.
             * @implements IXiaZhuReq
             * @constructor
             * @param {scqp_eg.IXiaZhuReq=} [properties] Properties to set
             */
            function XiaZhuReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * XiaZhuReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.XiaZhuReq
             * @instance
             */
            XiaZhuReq.prototype.request = null;
    
            /**
             * XiaZhuReq xiaZhu.
             * @member {number} xiaZhu
             * @memberof scqp_eg.XiaZhuReq
             * @instance
             */
            XiaZhuReq.prototype.xiaZhu = 0;
    
            /**
             * Creates a new XiaZhuReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {scqp_eg.IXiaZhuReq=} [properties] Properties to set
             * @returns {scqp_eg.XiaZhuReq} XiaZhuReq instance
             */
            XiaZhuReq.create = function create(properties) {
                return new XiaZhuReq(properties);
            };
    
            /**
             * Encodes the specified XiaZhuReq message. Does not implicitly {@link scqp_eg.XiaZhuReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {scqp_eg.IXiaZhuReq} message XiaZhuReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XiaZhuReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.xiaZhu);
                return writer;
            };
    
            /**
             * Encodes the specified XiaZhuReq message, length delimited. Does not implicitly {@link scqp_eg.XiaZhuReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {scqp_eg.IXiaZhuReq} message XiaZhuReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XiaZhuReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a XiaZhuReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.XiaZhuReq} XiaZhuReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XiaZhuReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.XiaZhuReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.xiaZhu = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a XiaZhuReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.XiaZhuReq} XiaZhuReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XiaZhuReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a XiaZhuReq message.
             * @function verify
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            XiaZhuReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    if (!$util.isInteger(message.xiaZhu))
                        return "xiaZhu: integer expected";
                return null;
            };
    
            /**
             * Creates a XiaZhuReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.XiaZhuReq} XiaZhuReq
             */
            XiaZhuReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.XiaZhuReq)
                    return object;
                var message = new $root.scqp_eg.XiaZhuReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.XiaZhuReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.xiaZhu != null)
                    message.xiaZhu = object.xiaZhu >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a XiaZhuReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.XiaZhuReq
             * @static
             * @param {scqp_eg.XiaZhuReq} message XiaZhuReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            XiaZhuReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.xiaZhu = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    object.xiaZhu = message.xiaZhu;
                return object;
            };
    
            /**
             * Converts this XiaZhuReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.XiaZhuReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            XiaZhuReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return XiaZhuReq;
        })();
    
        scqp_eg.XiaZhuRsp = (function() {
    
            /**
             * Properties of a XiaZhuRsp.
             * @memberof scqp_eg
             * @interface IXiaZhuRsp
             * @property {common.IResult|null} [result] XiaZhuRsp result
             * @property {number|null} [xiaZhu] XiaZhuRsp xiaZhu
             * @property {number|null} [userId] XiaZhuRsp userId
             */
    
            /**
             * Constructs a new XiaZhuRsp.
             * @memberof scqp_eg
             * @classdesc Represents a XiaZhuRsp.
             * @implements IXiaZhuRsp
             * @constructor
             * @param {scqp_eg.IXiaZhuRsp=} [properties] Properties to set
             */
            function XiaZhuRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * XiaZhuRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.XiaZhuRsp
             * @instance
             */
            XiaZhuRsp.prototype.result = null;
    
            /**
             * XiaZhuRsp xiaZhu.
             * @member {number} xiaZhu
             * @memberof scqp_eg.XiaZhuRsp
             * @instance
             */
            XiaZhuRsp.prototype.xiaZhu = 0;
    
            /**
             * XiaZhuRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.XiaZhuRsp
             * @instance
             */
            XiaZhuRsp.prototype.userId = 0;
    
            /**
             * Creates a new XiaZhuRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {scqp_eg.IXiaZhuRsp=} [properties] Properties to set
             * @returns {scqp_eg.XiaZhuRsp} XiaZhuRsp instance
             */
            XiaZhuRsp.create = function create(properties) {
                return new XiaZhuRsp(properties);
            };
    
            /**
             * Encodes the specified XiaZhuRsp message. Does not implicitly {@link scqp_eg.XiaZhuRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {scqp_eg.IXiaZhuRsp} message XiaZhuRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XiaZhuRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.xiaZhu);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified XiaZhuRsp message, length delimited. Does not implicitly {@link scqp_eg.XiaZhuRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {scqp_eg.IXiaZhuRsp} message XiaZhuRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XiaZhuRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a XiaZhuRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.XiaZhuRsp} XiaZhuRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XiaZhuRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.XiaZhuRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.xiaZhu = reader.int32();
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a XiaZhuRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.XiaZhuRsp} XiaZhuRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XiaZhuRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a XiaZhuRsp message.
             * @function verify
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            XiaZhuRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    if (!$util.isInteger(message.xiaZhu))
                        return "xiaZhu: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a XiaZhuRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.XiaZhuRsp} XiaZhuRsp
             */
            XiaZhuRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.XiaZhuRsp)
                    return object;
                var message = new $root.scqp_eg.XiaZhuRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.XiaZhuRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.xiaZhu != null)
                    message.xiaZhu = object.xiaZhu | 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a XiaZhuRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.XiaZhuRsp
             * @static
             * @param {scqp_eg.XiaZhuRsp} message XiaZhuRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            XiaZhuRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.xiaZhu = 0;
                    object.userId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.xiaZhu != null && message.hasOwnProperty("xiaZhu"))
                    object.xiaZhu = message.xiaZhu;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this XiaZhuRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.XiaZhuRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            XiaZhuRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return XiaZhuRsp;
        })();
    
        scqp_eg.JiaoZhuReq = (function() {
    
            /**
             * Properties of a JiaoZhuReq.
             * @memberof scqp_eg
             * @interface IJiaoZhuReq
             * @property {common.IRequest|null} [request] JiaoZhuReq request
             * @property {number|null} [zhuPai] JiaoZhuReq zhuPai
             */
    
            /**
             * Constructs a new JiaoZhuReq.
             * @memberof scqp_eg
             * @classdesc Represents a JiaoZhuReq.
             * @implements IJiaoZhuReq
             * @constructor
             * @param {scqp_eg.IJiaoZhuReq=} [properties] Properties to set
             */
            function JiaoZhuReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoZhuReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.JiaoZhuReq
             * @instance
             */
            JiaoZhuReq.prototype.request = null;
    
            /**
             * JiaoZhuReq zhuPai.
             * @member {number} zhuPai
             * @memberof scqp_eg.JiaoZhuReq
             * @instance
             */
            JiaoZhuReq.prototype.zhuPai = 0;
    
            /**
             * Creates a new JiaoZhuReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {scqp_eg.IJiaoZhuReq=} [properties] Properties to set
             * @returns {scqp_eg.JiaoZhuReq} JiaoZhuReq instance
             */
            JiaoZhuReq.create = function create(properties) {
                return new JiaoZhuReq(properties);
            };
    
            /**
             * Encodes the specified JiaoZhuReq message. Does not implicitly {@link scqp_eg.JiaoZhuReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {scqp_eg.IJiaoZhuReq} message JiaoZhuReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoZhuReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.zhuPai);
                return writer;
            };
    
            /**
             * Encodes the specified JiaoZhuReq message, length delimited. Does not implicitly {@link scqp_eg.JiaoZhuReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {scqp_eg.IJiaoZhuReq} message JiaoZhuReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoZhuReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoZhuReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.JiaoZhuReq} JiaoZhuReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoZhuReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.JiaoZhuReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.zhuPai = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoZhuReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.JiaoZhuReq} JiaoZhuReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoZhuReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoZhuReq message.
             * @function verify
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoZhuReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    if (!$util.isInteger(message.zhuPai))
                        return "zhuPai: integer expected";
                return null;
            };
    
            /**
             * Creates a JiaoZhuReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.JiaoZhuReq} JiaoZhuReq
             */
            JiaoZhuReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.JiaoZhuReq)
                    return object;
                var message = new $root.scqp_eg.JiaoZhuReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.JiaoZhuReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.zhuPai != null)
                    message.zhuPai = object.zhuPai | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoZhuReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.JiaoZhuReq
             * @static
             * @param {scqp_eg.JiaoZhuReq} message JiaoZhuReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoZhuReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.zhuPai = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    object.zhuPai = message.zhuPai;
                return object;
            };
    
            /**
             * Converts this JiaoZhuReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.JiaoZhuReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoZhuReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoZhuReq;
        })();
    
        scqp_eg.JiaoZhuRsp = (function() {
    
            /**
             * Properties of a JiaoZhuRsp.
             * @memberof scqp_eg
             * @interface IJiaoZhuRsp
             * @property {common.IResult|null} [result] JiaoZhuRsp result
             * @property {number|null} [zhuPai] JiaoZhuRsp zhuPai
             * @property {number|null} [userId] JiaoZhuRsp userId
             */
    
            /**
             * Constructs a new JiaoZhuRsp.
             * @memberof scqp_eg
             * @classdesc Represents a JiaoZhuRsp.
             * @implements IJiaoZhuRsp
             * @constructor
             * @param {scqp_eg.IJiaoZhuRsp=} [properties] Properties to set
             */
            function JiaoZhuRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoZhuRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.JiaoZhuRsp
             * @instance
             */
            JiaoZhuRsp.prototype.result = null;
    
            /**
             * JiaoZhuRsp zhuPai.
             * @member {number} zhuPai
             * @memberof scqp_eg.JiaoZhuRsp
             * @instance
             */
            JiaoZhuRsp.prototype.zhuPai = 0;
    
            /**
             * JiaoZhuRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.JiaoZhuRsp
             * @instance
             */
            JiaoZhuRsp.prototype.userId = 0;
    
            /**
             * Creates a new JiaoZhuRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {scqp_eg.IJiaoZhuRsp=} [properties] Properties to set
             * @returns {scqp_eg.JiaoZhuRsp} JiaoZhuRsp instance
             */
            JiaoZhuRsp.create = function create(properties) {
                return new JiaoZhuRsp(properties);
            };
    
            /**
             * Encodes the specified JiaoZhuRsp message. Does not implicitly {@link scqp_eg.JiaoZhuRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {scqp_eg.IJiaoZhuRsp} message JiaoZhuRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoZhuRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.zhuPai);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified JiaoZhuRsp message, length delimited. Does not implicitly {@link scqp_eg.JiaoZhuRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {scqp_eg.IJiaoZhuRsp} message JiaoZhuRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoZhuRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoZhuRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.JiaoZhuRsp} JiaoZhuRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoZhuRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.JiaoZhuRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.zhuPai = reader.int32();
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoZhuRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.JiaoZhuRsp} JiaoZhuRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoZhuRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoZhuRsp message.
             * @function verify
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoZhuRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    if (!$util.isInteger(message.zhuPai))
                        return "zhuPai: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a JiaoZhuRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.JiaoZhuRsp} JiaoZhuRsp
             */
            JiaoZhuRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.JiaoZhuRsp)
                    return object;
                var message = new $root.scqp_eg.JiaoZhuRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.JiaoZhuRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.zhuPai != null)
                    message.zhuPai = object.zhuPai | 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoZhuRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.JiaoZhuRsp
             * @static
             * @param {scqp_eg.JiaoZhuRsp} message JiaoZhuRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoZhuRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.zhuPai = 0;
                    object.userId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.zhuPai != null && message.hasOwnProperty("zhuPai"))
                    object.zhuPai = message.zhuPai;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this JiaoZhuRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.JiaoZhuRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoZhuRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoZhuRsp;
        })();
    
        scqp_eg.JiaoPengReq = (function() {
    
            /**
             * Properties of a JiaoPengReq.
             * @memberof scqp_eg
             * @interface IJiaoPengReq
             * @property {common.IRequest|null} [request] JiaoPengReq request
             * @property {number|null} [pengCard] JiaoPengReq pengCard
             */
    
            /**
             * Constructs a new JiaoPengReq.
             * @memberof scqp_eg
             * @classdesc Represents a JiaoPengReq.
             * @implements IJiaoPengReq
             * @constructor
             * @param {scqp_eg.IJiaoPengReq=} [properties] Properties to set
             */
            function JiaoPengReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoPengReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.JiaoPengReq
             * @instance
             */
            JiaoPengReq.prototype.request = null;
    
            /**
             * JiaoPengReq pengCard.
             * @member {number} pengCard
             * @memberof scqp_eg.JiaoPengReq
             * @instance
             */
            JiaoPengReq.prototype.pengCard = 0;
    
            /**
             * Creates a new JiaoPengReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {scqp_eg.IJiaoPengReq=} [properties] Properties to set
             * @returns {scqp_eg.JiaoPengReq} JiaoPengReq instance
             */
            JiaoPengReq.create = function create(properties) {
                return new JiaoPengReq(properties);
            };
    
            /**
             * Encodes the specified JiaoPengReq message. Does not implicitly {@link scqp_eg.JiaoPengReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {scqp_eg.IJiaoPengReq} message JiaoPengReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoPengReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pengCard);
                return writer;
            };
    
            /**
             * Encodes the specified JiaoPengReq message, length delimited. Does not implicitly {@link scqp_eg.JiaoPengReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {scqp_eg.IJiaoPengReq} message JiaoPengReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoPengReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoPengReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.JiaoPengReq} JiaoPengReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoPengReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.JiaoPengReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pengCard = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoPengReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.JiaoPengReq} JiaoPengReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoPengReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoPengReq message.
             * @function verify
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoPengReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    if (!$util.isInteger(message.pengCard))
                        return "pengCard: integer expected";
                return null;
            };
    
            /**
             * Creates a JiaoPengReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.JiaoPengReq} JiaoPengReq
             */
            JiaoPengReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.JiaoPengReq)
                    return object;
                var message = new $root.scqp_eg.JiaoPengReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.JiaoPengReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.pengCard != null)
                    message.pengCard = object.pengCard | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoPengReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.JiaoPengReq
             * @static
             * @param {scqp_eg.JiaoPengReq} message JiaoPengReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoPengReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.request = null;
                    object.pengCard = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    object.pengCard = message.pengCard;
                return object;
            };
    
            /**
             * Converts this JiaoPengReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.JiaoPengReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoPengReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoPengReq;
        })();
    
        scqp_eg.JiaoPengRsp = (function() {
    
            /**
             * Properties of a JiaoPengRsp.
             * @memberof scqp_eg
             * @interface IJiaoPengRsp
             * @property {common.IResult|null} [result] JiaoPengRsp result
             * @property {number|null} [pengCard] JiaoPengRsp pengCard
             * @property {number|null} [userId] JiaoPengRsp userId
             */
    
            /**
             * Constructs a new JiaoPengRsp.
             * @memberof scqp_eg
             * @classdesc Represents a JiaoPengRsp.
             * @implements IJiaoPengRsp
             * @constructor
             * @param {scqp_eg.IJiaoPengRsp=} [properties] Properties to set
             */
            function JiaoPengRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * JiaoPengRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.JiaoPengRsp
             * @instance
             */
            JiaoPengRsp.prototype.result = null;
    
            /**
             * JiaoPengRsp pengCard.
             * @member {number} pengCard
             * @memberof scqp_eg.JiaoPengRsp
             * @instance
             */
            JiaoPengRsp.prototype.pengCard = 0;
    
            /**
             * JiaoPengRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.JiaoPengRsp
             * @instance
             */
            JiaoPengRsp.prototype.userId = 0;
    
            /**
             * Creates a new JiaoPengRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {scqp_eg.IJiaoPengRsp=} [properties] Properties to set
             * @returns {scqp_eg.JiaoPengRsp} JiaoPengRsp instance
             */
            JiaoPengRsp.create = function create(properties) {
                return new JiaoPengRsp(properties);
            };
    
            /**
             * Encodes the specified JiaoPengRsp message. Does not implicitly {@link scqp_eg.JiaoPengRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {scqp_eg.IJiaoPengRsp} message JiaoPengRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoPengRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pengCard);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified JiaoPengRsp message, length delimited. Does not implicitly {@link scqp_eg.JiaoPengRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {scqp_eg.IJiaoPengRsp} message JiaoPengRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JiaoPengRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a JiaoPengRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.JiaoPengRsp} JiaoPengRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoPengRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.JiaoPengRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pengCard = reader.int32();
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a JiaoPengRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.JiaoPengRsp} JiaoPengRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JiaoPengRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a JiaoPengRsp message.
             * @function verify
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JiaoPengRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    if (!$util.isInteger(message.pengCard))
                        return "pengCard: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a JiaoPengRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.JiaoPengRsp} JiaoPengRsp
             */
            JiaoPengRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.JiaoPengRsp)
                    return object;
                var message = new $root.scqp_eg.JiaoPengRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.JiaoPengRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.pengCard != null)
                    message.pengCard = object.pengCard | 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a JiaoPengRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.JiaoPengRsp
             * @static
             * @param {scqp_eg.JiaoPengRsp} message JiaoPengRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JiaoPengRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.pengCard = 0;
                    object.userId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.pengCard != null && message.hasOwnProperty("pengCard"))
                    object.pengCard = message.pengCard;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this JiaoPengRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.JiaoPengRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JiaoPengRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return JiaoPengRsp;
        })();
    
        scqp_eg.KouDiRsp = (function() {
    
            /**
             * Properties of a KouDiRsp.
             * @memberof scqp_eg
             * @interface IKouDiRsp
             * @property {common.IResult|null} [result] KouDiRsp result
             * @property {number|null} [cardsNum] KouDiRsp cardsNum
             * @property {Array.<number>|null} [cards] KouDiRsp cards
             * @property {number|null} [userId] KouDiRsp userId
             */
    
            /**
             * Constructs a new KouDiRsp.
             * @memberof scqp_eg
             * @classdesc Represents a KouDiRsp.
             * @implements IKouDiRsp
             * @constructor
             * @param {scqp_eg.IKouDiRsp=} [properties] Properties to set
             */
            function KouDiRsp(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KouDiRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.KouDiRsp
             * @instance
             */
            KouDiRsp.prototype.result = null;
    
            /**
             * KouDiRsp cardsNum.
             * @member {number} cardsNum
             * @memberof scqp_eg.KouDiRsp
             * @instance
             */
            KouDiRsp.prototype.cardsNum = 0;
    
            /**
             * KouDiRsp cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.KouDiRsp
             * @instance
             */
            KouDiRsp.prototype.cards = $util.emptyArray;
    
            /**
             * KouDiRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.KouDiRsp
             * @instance
             */
            KouDiRsp.prototype.userId = 0;
    
            /**
             * Creates a new KouDiRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {scqp_eg.IKouDiRsp=} [properties] Properties to set
             * @returns {scqp_eg.KouDiRsp} KouDiRsp instance
             */
            KouDiRsp.create = function create(properties) {
                return new KouDiRsp(properties);
            };
    
            /**
             * Encodes the specified KouDiRsp message. Does not implicitly {@link scqp_eg.KouDiRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {scqp_eg.IKouDiRsp} message KouDiRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouDiRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cardsNum);
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cards[i]);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified KouDiRsp message, length delimited. Does not implicitly {@link scqp_eg.KouDiRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {scqp_eg.IKouDiRsp} message KouDiRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouDiRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KouDiRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.KouDiRsp} KouDiRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouDiRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.KouDiRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.cardsNum = reader.uint32();
                        break;
                    case 3:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 4:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KouDiRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.KouDiRsp} KouDiRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouDiRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KouDiRsp message.
             * @function verify
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KouDiRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    if (!$util.isInteger(message.cardsNum))
                        return "cardsNum: integer expected";
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a KouDiRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.KouDiRsp} KouDiRsp
             */
            KouDiRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.KouDiRsp)
                    return object;
                var message = new $root.scqp_eg.KouDiRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.KouDiRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.cardsNum != null)
                    message.cardsNum = object.cardsNum >>> 0;
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.KouDiRsp.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a KouDiRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.KouDiRsp
             * @static
             * @param {scqp_eg.KouDiRsp} message KouDiRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KouDiRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults) {
                    object.result = null;
                    object.cardsNum = 0;
                    object.userId = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.cardsNum != null && message.hasOwnProperty("cardsNum"))
                    object.cardsNum = message.cardsNum;
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this KouDiRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.KouDiRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KouDiRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KouDiRsp;
        })();
    
        scqp_eg.KouPaiReq = (function() {
    
            /**
             * Properties of a KouPaiReq.
             * @memberof scqp_eg
             * @interface IKouPaiReq
             * @property {common.IRequest|null} [request] KouPaiReq request
             * @property {Array.<number>|null} [cards] KouPaiReq cards
             * @property {number|null} [userId] KouPaiReq userId
             */
    
            /**
             * Constructs a new KouPaiReq.
             * @memberof scqp_eg
             * @classdesc Represents a KouPaiReq.
             * @implements IKouPaiReq
             * @constructor
             * @param {scqp_eg.IKouPaiReq=} [properties] Properties to set
             */
            function KouPaiReq(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KouPaiReq request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.KouPaiReq
             * @instance
             */
            KouPaiReq.prototype.request = null;
    
            /**
             * KouPaiReq cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.KouPaiReq
             * @instance
             */
            KouPaiReq.prototype.cards = $util.emptyArray;
    
            /**
             * KouPaiReq userId.
             * @member {number} userId
             * @memberof scqp_eg.KouPaiReq
             * @instance
             */
            KouPaiReq.prototype.userId = 0;
    
            /**
             * Creates a new KouPaiReq instance using the specified properties.
             * @function create
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {scqp_eg.IKouPaiReq=} [properties] Properties to set
             * @returns {scqp_eg.KouPaiReq} KouPaiReq instance
             */
            KouPaiReq.create = function create(properties) {
                return new KouPaiReq(properties);
            };
    
            /**
             * Encodes the specified KouPaiReq message. Does not implicitly {@link scqp_eg.KouPaiReq.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {scqp_eg.IKouPaiReq} message KouPaiReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouPaiReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cards[i]);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified KouPaiReq message, length delimited. Does not implicitly {@link scqp_eg.KouPaiReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {scqp_eg.IKouPaiReq} message KouPaiReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouPaiReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KouPaiReq message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.KouPaiReq} KouPaiReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouPaiReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.KouPaiReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KouPaiReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.KouPaiReq} KouPaiReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouPaiReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KouPaiReq message.
             * @function verify
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KouPaiReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a KouPaiReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.KouPaiReq} KouPaiReq
             */
            KouPaiReq.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.KouPaiReq)
                    return object;
                var message = new $root.scqp_eg.KouPaiReq();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.KouPaiReq.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.KouPaiReq.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a KouPaiReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.KouPaiReq
             * @static
             * @param {scqp_eg.KouPaiReq} message KouPaiReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KouPaiReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults) {
                    object.request = null;
                    object.userId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this KouPaiReq to JSON.
             * @function toJSON
             * @memberof scqp_eg.KouPaiReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KouPaiReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KouPaiReq;
        })();
    
        scqp_eg.KouPaiRsp = (function() {
    
            /**
             * Properties of a KouPaiRsp.
             * @memberof scqp_eg
             * @interface IKouPaiRsp
             * @property {common.IRequest|null} [request] KouPaiRsp request
             * @property {Array.<number>|null} [cards] KouPaiRsp cards
             * @property {number|null} [userId] KouPaiRsp userId
             */
    
            /**
             * Constructs a new KouPaiRsp.
             * @memberof scqp_eg
             * @classdesc Represents a KouPaiRsp.
             * @implements IKouPaiRsp
             * @constructor
             * @param {scqp_eg.IKouPaiRsp=} [properties] Properties to set
             */
            function KouPaiRsp(properties) {
                this.cards = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KouPaiRsp request.
             * @member {common.IRequest|null|undefined} request
             * @memberof scqp_eg.KouPaiRsp
             * @instance
             */
            KouPaiRsp.prototype.request = null;
    
            /**
             * KouPaiRsp cards.
             * @member {Array.<number>} cards
             * @memberof scqp_eg.KouPaiRsp
             * @instance
             */
            KouPaiRsp.prototype.cards = $util.emptyArray;
    
            /**
             * KouPaiRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.KouPaiRsp
             * @instance
             */
            KouPaiRsp.prototype.userId = 0;
    
            /**
             * Creates a new KouPaiRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {scqp_eg.IKouPaiRsp=} [properties] Properties to set
             * @returns {scqp_eg.KouPaiRsp} KouPaiRsp instance
             */
            KouPaiRsp.create = function create(properties) {
                return new KouPaiRsp(properties);
            };
    
            /**
             * Encodes the specified KouPaiRsp message. Does not implicitly {@link scqp_eg.KouPaiRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {scqp_eg.IKouPaiRsp} message KouPaiRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouPaiRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.request != null && message.hasOwnProperty("request"))
                    $root.common.Request.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cards != null && message.cards.length)
                    for (var i = 0; i < message.cards.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cards[i]);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                return writer;
            };
    
            /**
             * Encodes the specified KouPaiRsp message, length delimited. Does not implicitly {@link scqp_eg.KouPaiRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {scqp_eg.IKouPaiRsp} message KouPaiRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KouPaiRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KouPaiRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.KouPaiRsp} KouPaiRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouPaiRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.KouPaiRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.request = $root.common.Request.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.cards && message.cards.length))
                            message.cards = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.cards.push(reader.uint32());
                        } else
                            message.cards.push(reader.uint32());
                        break;
                    case 3:
                        message.userId = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KouPaiRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.KouPaiRsp} KouPaiRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KouPaiRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KouPaiRsp message.
             * @function verify
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KouPaiRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.request != null && message.hasOwnProperty("request")) {
                    var error = $root.common.Request.verify(message.request);
                    if (error)
                        return "request." + error;
                }
                if (message.cards != null && message.hasOwnProperty("cards")) {
                    if (!Array.isArray(message.cards))
                        return "cards: array expected";
                    for (var i = 0; i < message.cards.length; ++i)
                        if (!$util.isInteger(message.cards[i]))
                            return "cards: integer[] expected";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };
    
            /**
             * Creates a KouPaiRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.KouPaiRsp} KouPaiRsp
             */
            KouPaiRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.KouPaiRsp)
                    return object;
                var message = new $root.scqp_eg.KouPaiRsp();
                if (object.request != null) {
                    if (typeof object.request !== "object")
                        throw TypeError(".scqp_eg.KouPaiRsp.request: object expected");
                    message.request = $root.common.Request.fromObject(object.request);
                }
                if (object.cards) {
                    if (!Array.isArray(object.cards))
                        throw TypeError(".scqp_eg.KouPaiRsp.cards: array expected");
                    message.cards = [];
                    for (var i = 0; i < object.cards.length; ++i)
                        message.cards[i] = object.cards[i] >>> 0;
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a KouPaiRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.KouPaiRsp
             * @static
             * @param {scqp_eg.KouPaiRsp} message KouPaiRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KouPaiRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.cards = [];
                if (options.defaults) {
                    object.request = null;
                    object.userId = 0;
                }
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = $root.common.Request.toObject(message.request, options);
                if (message.cards && message.cards.length) {
                    object.cards = [];
                    for (var j = 0; j < message.cards.length; ++j)
                        object.cards[j] = message.cards[j];
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };
    
            /**
             * Converts this KouPaiRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.KouPaiRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KouPaiRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KouPaiRsp;
        })();
    
        scqp_eg.MaxCardRsp = (function() {
    
            /**
             * Properties of a MaxCardRsp.
             * @memberof scqp_eg
             * @interface IMaxCardRsp
             * @property {common.IResult|null} [result] MaxCardRsp result
             * @property {number|null} [userId] MaxCardRsp userId
             * @property {number|null} [maxCard] MaxCardRsp maxCard
             */
    
            /**
             * Constructs a new MaxCardRsp.
             * @memberof scqp_eg
             * @classdesc Represents a MaxCardRsp.
             * @implements IMaxCardRsp
             * @constructor
             * @param {scqp_eg.IMaxCardRsp=} [properties] Properties to set
             */
            function MaxCardRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MaxCardRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.MaxCardRsp
             * @instance
             */
            MaxCardRsp.prototype.result = null;
    
            /**
             * MaxCardRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.MaxCardRsp
             * @instance
             */
            MaxCardRsp.prototype.userId = 0;
    
            /**
             * MaxCardRsp maxCard.
             * @member {number} maxCard
             * @memberof scqp_eg.MaxCardRsp
             * @instance
             */
            MaxCardRsp.prototype.maxCard = 0;
    
            /**
             * Creates a new MaxCardRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {scqp_eg.IMaxCardRsp=} [properties] Properties to set
             * @returns {scqp_eg.MaxCardRsp} MaxCardRsp instance
             */
            MaxCardRsp.create = function create(properties) {
                return new MaxCardRsp(properties);
            };
    
            /**
             * Encodes the specified MaxCardRsp message. Does not implicitly {@link scqp_eg.MaxCardRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {scqp_eg.IMaxCardRsp} message MaxCardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MaxCardRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userId);
                if (message.maxCard != null && message.hasOwnProperty("maxCard"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxCard);
                return writer;
            };
    
            /**
             * Encodes the specified MaxCardRsp message, length delimited. Does not implicitly {@link scqp_eg.MaxCardRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {scqp_eg.IMaxCardRsp} message MaxCardRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MaxCardRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MaxCardRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.MaxCardRsp} MaxCardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MaxCardRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.MaxCardRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.uint32();
                        break;
                    case 4:
                        message.maxCard = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MaxCardRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.MaxCardRsp} MaxCardRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MaxCardRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MaxCardRsp message.
             * @function verify
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MaxCardRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.maxCard != null && message.hasOwnProperty("maxCard"))
                    if (!$util.isInteger(message.maxCard))
                        return "maxCard: integer expected";
                return null;
            };
    
            /**
             * Creates a MaxCardRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.MaxCardRsp} MaxCardRsp
             */
            MaxCardRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.MaxCardRsp)
                    return object;
                var message = new $root.scqp_eg.MaxCardRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.MaxCardRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.maxCard != null)
                    message.maxCard = object.maxCard | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MaxCardRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.MaxCardRsp
             * @static
             * @param {scqp_eg.MaxCardRsp} message MaxCardRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MaxCardRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.userId = 0;
                    object.maxCard = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.maxCard != null && message.hasOwnProperty("maxCard"))
                    object.maxCard = message.maxCard;
                return object;
            };
    
            /**
             * Converts this MaxCardRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.MaxCardRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MaxCardRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MaxCardRsp;
        })();
    
        scqp_eg.addScoreRsp = (function() {
    
            /**
             * Properties of an addScoreRsp.
             * @memberof scqp_eg
             * @interface IaddScoreRsp
             * @property {common.IResult|null} [result] addScoreRsp result
             * @property {number|null} [userId] addScoreRsp userId
             * @property {number|null} [totalScore] addScoreRsp totalScore
             * @property {number|null} [myScore] addScoreRsp myScore
             * @property {Array.<number>|null} [scoreCard] addScoreRsp scoreCard
             */
    
            /**
             * Constructs a new addScoreRsp.
             * @memberof scqp_eg
             * @classdesc Represents an addScoreRsp.
             * @implements IaddScoreRsp
             * @constructor
             * @param {scqp_eg.IaddScoreRsp=} [properties] Properties to set
             */
            function addScoreRsp(properties) {
                this.scoreCard = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * addScoreRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.addScoreRsp
             * @instance
             */
            addScoreRsp.prototype.result = null;
    
            /**
             * addScoreRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.addScoreRsp
             * @instance
             */
            addScoreRsp.prototype.userId = 0;
    
            /**
             * addScoreRsp totalScore.
             * @member {number} totalScore
             * @memberof scqp_eg.addScoreRsp
             * @instance
             */
            addScoreRsp.prototype.totalScore = 0;
    
            /**
             * addScoreRsp myScore.
             * @member {number} myScore
             * @memberof scqp_eg.addScoreRsp
             * @instance
             */
            addScoreRsp.prototype.myScore = 0;
    
            /**
             * addScoreRsp scoreCard.
             * @member {Array.<number>} scoreCard
             * @memberof scqp_eg.addScoreRsp
             * @instance
             */
            addScoreRsp.prototype.scoreCard = $util.emptyArray;
    
            /**
             * Creates a new addScoreRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {scqp_eg.IaddScoreRsp=} [properties] Properties to set
             * @returns {scqp_eg.addScoreRsp} addScoreRsp instance
             */
            addScoreRsp.create = function create(properties) {
                return new addScoreRsp(properties);
            };
    
            /**
             * Encodes the specified addScoreRsp message. Does not implicitly {@link scqp_eg.addScoreRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {scqp_eg.IaddScoreRsp} message addScoreRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            addScoreRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userId);
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalScore);
                if (message.myScore != null && message.hasOwnProperty("myScore"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.myScore);
                if (message.scoreCard != null && message.scoreCard.length)
                    for (var i = 0; i < message.scoreCard.length; ++i)
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.scoreCard[i]);
                return writer;
            };
    
            /**
             * Encodes the specified addScoreRsp message, length delimited. Does not implicitly {@link scqp_eg.addScoreRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {scqp_eg.IaddScoreRsp} message addScoreRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            addScoreRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an addScoreRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.addScoreRsp} addScoreRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            addScoreRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.addScoreRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.uint32();
                        break;
                    case 3:
                        message.totalScore = reader.int32();
                        break;
                    case 4:
                        message.myScore = reader.int32();
                        break;
                    case 5:
                        if (!(message.scoreCard && message.scoreCard.length))
                            message.scoreCard = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.scoreCard.push(reader.int32());
                        } else
                            message.scoreCard.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an addScoreRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.addScoreRsp} addScoreRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            addScoreRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an addScoreRsp message.
             * @function verify
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            addScoreRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    if (!$util.isInteger(message.totalScore))
                        return "totalScore: integer expected";
                if (message.myScore != null && message.hasOwnProperty("myScore"))
                    if (!$util.isInteger(message.myScore))
                        return "myScore: integer expected";
                if (message.scoreCard != null && message.hasOwnProperty("scoreCard")) {
                    if (!Array.isArray(message.scoreCard))
                        return "scoreCard: array expected";
                    for (var i = 0; i < message.scoreCard.length; ++i)
                        if (!$util.isInteger(message.scoreCard[i]))
                            return "scoreCard: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates an addScoreRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.addScoreRsp} addScoreRsp
             */
            addScoreRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.addScoreRsp)
                    return object;
                var message = new $root.scqp_eg.addScoreRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.addScoreRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.totalScore != null)
                    message.totalScore = object.totalScore | 0;
                if (object.myScore != null)
                    message.myScore = object.myScore | 0;
                if (object.scoreCard) {
                    if (!Array.isArray(object.scoreCard))
                        throw TypeError(".scqp_eg.addScoreRsp.scoreCard: array expected");
                    message.scoreCard = [];
                    for (var i = 0; i < object.scoreCard.length; ++i)
                        message.scoreCard[i] = object.scoreCard[i] | 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from an addScoreRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.addScoreRsp
             * @static
             * @param {scqp_eg.addScoreRsp} message addScoreRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            addScoreRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.scoreCard = [];
                if (options.defaults) {
                    object.result = null;
                    object.userId = 0;
                    object.totalScore = 0;
                    object.myScore = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    object.totalScore = message.totalScore;
                if (message.myScore != null && message.hasOwnProperty("myScore"))
                    object.myScore = message.myScore;
                if (message.scoreCard && message.scoreCard.length) {
                    object.scoreCard = [];
                    for (var j = 0; j < message.scoreCard.length; ++j)
                        object.scoreCard[j] = message.scoreCard[j];
                }
                return object;
            };
    
            /**
             * Converts this addScoreRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.addScoreRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            addScoreRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return addScoreRsp;
        })();
    
        scqp_eg.FriendAppearRsp = (function() {
    
            /**
             * Properties of a FriendAppearRsp.
             * @memberof scqp_eg
             * @interface IFriendAppearRsp
             * @property {common.IResult|null} [result] FriendAppearRsp result
             * @property {number|null} [userId] FriendAppearRsp userId
             * @property {number|null} [totalScore] FriendAppearRsp totalScore
             */
    
            /**
             * Constructs a new FriendAppearRsp.
             * @memberof scqp_eg
             * @classdesc Represents a FriendAppearRsp.
             * @implements IFriendAppearRsp
             * @constructor
             * @param {scqp_eg.IFriendAppearRsp=} [properties] Properties to set
             */
            function FriendAppearRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FriendAppearRsp result.
             * @member {common.IResult|null|undefined} result
             * @memberof scqp_eg.FriendAppearRsp
             * @instance
             */
            FriendAppearRsp.prototype.result = null;
    
            /**
             * FriendAppearRsp userId.
             * @member {number} userId
             * @memberof scqp_eg.FriendAppearRsp
             * @instance
             */
            FriendAppearRsp.prototype.userId = 0;
    
            /**
             * FriendAppearRsp totalScore.
             * @member {number} totalScore
             * @memberof scqp_eg.FriendAppearRsp
             * @instance
             */
            FriendAppearRsp.prototype.totalScore = 0;
    
            /**
             * Creates a new FriendAppearRsp instance using the specified properties.
             * @function create
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {scqp_eg.IFriendAppearRsp=} [properties] Properties to set
             * @returns {scqp_eg.FriendAppearRsp} FriendAppearRsp instance
             */
            FriendAppearRsp.create = function create(properties) {
                return new FriendAppearRsp(properties);
            };
    
            /**
             * Encodes the specified FriendAppearRsp message. Does not implicitly {@link scqp_eg.FriendAppearRsp.verify|verify} messages.
             * @function encode
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {scqp_eg.IFriendAppearRsp} message FriendAppearRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendAppearRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.result != null && message.hasOwnProperty("result"))
                    $root.common.Result.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userId);
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.totalScore);
                return writer;
            };
    
            /**
             * Encodes the specified FriendAppearRsp message, length delimited. Does not implicitly {@link scqp_eg.FriendAppearRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {scqp_eg.IFriendAppearRsp} message FriendAppearRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendAppearRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FriendAppearRsp message from the specified reader or buffer.
             * @function decode
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scqp_eg.FriendAppearRsp} FriendAppearRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendAppearRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scqp_eg.FriendAppearRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.result = $root.common.Result.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.uint32();
                        break;
                    case 3:
                        message.totalScore = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FriendAppearRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scqp_eg.FriendAppearRsp} FriendAppearRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendAppearRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FriendAppearRsp message.
             * @function verify
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendAppearRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.result != null && message.hasOwnProperty("result")) {
                    var error = $root.common.Result.verify(message.result);
                    if (error)
                        return "result." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    if (!$util.isInteger(message.totalScore))
                        return "totalScore: integer expected";
                return null;
            };
    
            /**
             * Creates a FriendAppearRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scqp_eg.FriendAppearRsp} FriendAppearRsp
             */
            FriendAppearRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.scqp_eg.FriendAppearRsp)
                    return object;
                var message = new $root.scqp_eg.FriendAppearRsp();
                if (object.result != null) {
                    if (typeof object.result !== "object")
                        throw TypeError(".scqp_eg.FriendAppearRsp.result: object expected");
                    message.result = $root.common.Result.fromObject(object.result);
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.totalScore != null)
                    message.totalScore = object.totalScore >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a FriendAppearRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scqp_eg.FriendAppearRsp
             * @static
             * @param {scqp_eg.FriendAppearRsp} message FriendAppearRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendAppearRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.result = null;
                    object.userId = 0;
                    object.totalScore = 0;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = $root.common.Result.toObject(message.result, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.totalScore != null && message.hasOwnProperty("totalScore"))
                    object.totalScore = message.totalScore;
                return object;
            };
    
            /**
             * Converts this FriendAppearRsp to JSON.
             * @function toJSON
             * @memberof scqp_eg.FriendAppearRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendAppearRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FriendAppearRsp;
        })();
    
        return scqp_eg;
    })();

    return $root;
});
